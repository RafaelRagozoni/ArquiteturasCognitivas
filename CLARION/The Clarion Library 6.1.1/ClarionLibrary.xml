<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>ClarionLibrary</name>
  </assembly>
  <members>
    <member name="T:Clarion.AgentInitializer">
      <summary>
            Contains static initializer methods that are used to initialize the internal components of an agent.
            </summary>
    </member>
    <member name="M:Clarion.AgentInitializer.InitializeActionRule``1(Clarion.Framework.Agent,Clarion.Framework.Templates.IActionRuleFactory{``0},System.Object[])">
      <summary>
            Initializes an <see cref="T:Clarion.Framework.Templates.ActionRule" /> of the specified type (to be placed in the top level of the ACS upon being committed)
            </summary>
      <param name="destination">The agent in whom the rule is being attached</param>
      <param name="factory">The factory to use to generate the rule</param>
      <param name="parameters">(optional) Any parameters that may be needed by the factory in order to initialize the rule.<br />
            To find-out the list of required and optional parameters, please consult the documentation of the factory for the rule being generated</param>
      <typeparam name="T">The type of rule that is to be initialized</typeparam>
      <returns>An action rule of the type specified initialized within the agent specified</returns>
    </member>
    <member name="M:Clarion.AgentInitializer.InitializeAssociativeEpisodicMemoryNetwork``1(Clarion.Framework.Agent,Clarion.Framework.Templates.IimplicitComponentFactory{``0},System.Object[])">
      <summary>
            Initializes an <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> of the specified type (to be placed in the bottom level of episodic memory upon being committed)
            </summary>
      <param name="destination">The agent in whom the component is being attached</param>
      <param name="factory">The factory to use to generate the implicit component</param>
      <param name="parameters">(optional) Any parameters that may be needed by the factory in order to initialize the component.<br />
            To find-out the list of required and optional parameters, please consult the documentation of the factory for the component being generated</param>
      <typeparam name="T">The type of implicit component that is to be initialized</typeparam>
      <returns>An implicit component of the type specified initialized within the agent specified</returns>
    </member>
    <member name="M:Clarion.AgentInitializer.InitializeAssociativeMemoryNetwork``1(Clarion.Framework.Agent,Clarion.Framework.Templates.IimplicitComponentFactory{``0},System.Object[])">
      <summary>
            Initializes an <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> of the specified type (to be placed in the bottom level of the NACS upon being committed)
            </summary>
      <param name="destination">The agent in whom the component is being attached</param>
      <param name="factory">The factory to use to generate the implicit component</param>
      <param name="parameters">(optional) Any parameters that may be needed by the factory in order to initialize the component.<br />
            To find-out the list of required and optional parameters, please consult the documentation of the factory for the component being generated</param>
      <typeparam name="T">The type of implicit component that is to be initialized</typeparam>
      <returns>An implicit component of the type specified initialized within the agent specified</returns>
    </member>
    <member name="M:Clarion.AgentInitializer.InitializeAssociativeRule``1(Clarion.Framework.Agent,Clarion.Framework.Templates.IAssociativeRuleFactory{``0},System.Object[])">
      <summary>
            Initializes an <see cref="T:Clarion.Framework.Templates.AssociativeRule" /> of the specified type (to be placed in the top level of the NACS upon being committed)
            </summary>
      <param name="destination">The agent in whom the rule is being attached</param>
      <param name="factory">The factory to use to generate the rule</param>
      <param name="parameters">(optional) Any parameters that may be needed by the factory in order to initialize the rule.<br />
            To find-out the list of required and optional parameters, please consult the documentation of the factory for the rule being generated</param>
      <typeparam name="T">The type of rule that is to be initialized</typeparam>
      <returns>An associative rule of the type specified initialized within the agent specified</returns>
    </member>
    <member name="M:Clarion.AgentInitializer.InitializeDrive``1(Clarion.Framework.Agent,Clarion.Framework.Templates.IDriveFactory{``0},System.Object[])">
      <summary>
            Initializes a <see cref="T:Clarion.Framework.Templates.Drive" /> of the specified type (to be placed in the bottom level of the MS upon being committed)
            </summary>
      <param name="destination">The agent in whom the drive is being attached</param>
      <param name="factory">The factory to use to generate the drive</param>
      <param name="parameters">(optional) Any parameters that may be needed by the factory in order to initialize the drive.<br />
            To find-out the list of required and optional parameters, please consult the documentation of the factory for the drive being generated</param>
      <typeparam name="T">The type of drive that is to be initialized</typeparam>
      <returns>A drive of the type specified initialized within the agent specified</returns>
    </member>
    <member name="M:Clarion.AgentInitializer.InitializeDriveComponent``1(Clarion.Framework.Templates.Drive,Clarion.Framework.Templates.IimplicitComponentFactory{``0},System.Object[])">
      <summary>
            Initializes an <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> to be used inside of a <see cref="T:Clarion.Framework.Templates.Drive" /> (upon being committed)
            </summary>
      <param name="destination">The drive in which the component is being attached</param>
      <param name="factory">The factory to use to generate the component</param>
      <param name="parameters">(optional) Any parameters that may be needed by the factory in order to initialize the component.<br />
            To find-out the list of required and optional parameters, please consult the documentation of the factory for the component being generated</param>
      <typeparam name="T">The type of <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> that is to be initialized within the drive</typeparam>
      <returns>A component of the type specified initialized within the drive specified</returns>
    </member>
    <member name="M:Clarion.AgentInitializer.InitializeImplicitDecisionNetwork``1(Clarion.Framework.Agent,Clarion.Framework.Templates.IimplicitComponentFactory{``0},System.Object[])">
      <summary>
            Initializes an <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> of the specified type (to be placed in the bottom level of the ACS upon being committed)
            </summary>
      <param name="destination">The agent in whom the component is being attached</param>
      <param name="factory">The factory to use to generate the implicit component</param>
      <param name="parameters">(optional) Any parameters that may be needed by the factory in order to initialize the component.<br />
            To find-out the list of required and optional parameters, please consult the documentation of the factory for the component being generated</param>
      <typeparam name="T">The type of implicit component that is to be initialized</typeparam>
      <returns>An implicit component of the type specified initialized within the agent specified</returns>
    </member>
    <member name="M:Clarion.AgentInitializer.InitializeMetaCognitiveActionRule``1(Clarion.Framework.Templates.MetaCognitiveModule,Clarion.Framework.Templates.IActionRuleFactory{``0},System.Object[])">
      <summary>
            Initializes a <see cref="T:Clarion.Framework.RefineableActionRule" /> to be used in the top level of a <see cref="T:Clarion.Framework.Templates.MetaCognitiveModule" /> (upon being committed)
            </summary>
      <param name="destination">The module in which the rule is being attached</param>
      <param name="factory">The factory to use to generate the rule</param>
      <param name="parameters">(optional) Any parameters that may be needed by the factory in order to initialize the rule.<br />
            To find-out the list of required and optional parameters, please consult the documentation of the factory for the rule being generated</param>
      <typeparam name="T">The type of <see cref="T:Clarion.Framework.RefineableActionRule" /> that is to be initialized within the module</typeparam>
      <returns>A rule of the type specified initialized within the module specified</returns>
    </member>
    <member name="M:Clarion.AgentInitializer.InitializeMetaCognitiveDecisionNetwork``1(Clarion.Framework.Templates.MetaCognitiveModule,Clarion.Framework.Templates.IimplicitComponentFactory{``0},System.Object[])">
      <summary>
            Initializes an <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> to be used in the bottom level of a <see cref="T:Clarion.Framework.Templates.MetaCognitiveModule" /> (upon being committed)
            </summary>
      <param name="destination">The module in which the component is being attached</param>
      <param name="factory">The factory to use to generate the component</param>
      <param name="parameters">(optional) Any parameters that may be needed by the factory in order to initialize the component.<br />
            To find-out the list of required and optional parameters, please consult the documentation of the factory for the component being generated</param>
      <typeparam name="T">The type of <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> that is to be initialized within the module</typeparam>
      <returns>An implicit component of the type specified initialized within the module specified</returns>
    </member>
    <member name="M:Clarion.AgentInitializer.InitializeMetaCognitiveModule``1(Clarion.Framework.Agent,Clarion.Framework.Templates.IMetaCognitiveModuleFactory{``0},System.Object[])">
      <summary>
            Initializes a <see cref="T:Clarion.Framework.Templates.MetaCognitiveModule" /> of the specified type (to be placed in the MCS upon being committed)
            </summary>
      <param name="destination">The agent in whom the module is being attached</param>
      <param name="factory">The factory to use to generate the module</param>
      <param name="parameters">(optional) Any parameters that may be needed by the factory in order to initialize the module.<br />
            To find-out the list of required and optional parameters, please consult the documentation of the factory for the module being generated</param>
      <typeparam name="T">The type of module that is to be initialized</typeparam>
      <returns>A module of the type specified initialized within the agent specified</returns>
    </member>
    <member name="T:Clarion.ImplicitComponentInitializer">
      <summary>
            Provides various constructs that can be used to aid in the initialization and "pre-training" of implicit components 
            </summary>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.ImplicitComponentInitializer" /> class</summary>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.AddRange(Clarion.Framework.Core.IWorldObject,System.Double,System.Double,System.Double)">
      <summary>
            Adds a range for the specified <see cref="T:Clarion.Framework.Core.IWorldObject">world object</see> associated with a node on the input layer of an implicit component that is to be trained
            by the implicit component initializer
            </summary>
      <param name="o">The world object for which a range is being added</param>
      <param name="lowerBound">The lower bound of the range</param>
      <param name="upperBound">The upper bound of the range</param>
      <param name="increment">The increment by which the range should be traversed</param>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.AddRange(System.Guid,System.Double,System.Double,System.Double)">
      <summary>
            Adds a range for the specified <see cref="T:Clarion.Framework.Core.IWorldObject">world object</see> associated with a node on the input layer of an implicit component that is to be trained
            by the implicit component initializer
            </summary>
      <param name="id">The world ID of the world object for which a range is being added</param>
      <param name="lowerBound">The lower bound of the range</param>
      <param name="upperBound">The upper bound of the range</param>
      <param name="increment">The increment by which the range should be traversed</param>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.ClearRanges">
      <summary>
            Removes all range specifications for all <see cref="T:Clarion.Framework.Core.IWorldObject">world objects</see></summary>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.Destroy">
      <summary>
            Destroys the current singleton instance of the implicit component initializer class
            </summary>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.Encode``1(``0,System.Collections.Generic.IEnumerable{Clarion.Framework.ActivationCollection},Clarion.ImplicitComponentInitializer.EncodeTerminationConditions,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Encodes the specified datasets into the target <see cref="T:Clarion.Framework.Templates.IAutoEncoder">auto-encoder</see></summary>
      <param name="target">The implicit component inside of which the datasets are to be encoded</param>
      <param name="dataSets">The set of all "activation patterns" that are to be encoded into the target auto-encoder
            <note type="implementnotes">For any nodes that have an associated <see cref="T:Clarion.ImplicitComponentInitializer.Range" /> defined (using 
            <see cref="M:Clarion.ImplicitComponentInitializer.AddRange(Clarion.Framework.Core.IWorldObject,System.Double,System.Double,System.Double)" />), encoding will occur over that range irrespective
            of the activations that are specified by the datasets (for those nodes)</note></param>
      <param name="termination">The condition in which the encoding operation is to be terminated</param>
      <param name="numIterations">(Optional) If the <see cref="F:Clarion.ImplicitComponentInitializer.EncodeTerminationConditions.FIXED">FIXED</see> termination condition is being used, this specifies the number
            of times over which the datasets should be traversed</param>
      <param name="randomTraversal">(Optional) Indicates whether the data sets should be traversed in a random order for each iteration</param>
      <param name="testOnly">(Optional) Specifies that the target is ONLY being tested by this call to check that it is able to successfully recall all of the data sets</param>
      <typeparam name="T">The type of <see cref="T:Clarion.Framework.Templates.IAutoEncoder" />, <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> that is the target of the encoding operation</typeparam>
      <returns>The accuracy at which the target has encoding the specified data sets</returns>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.Initialize">
      <summary>
            Initializes a new instance of the implicit component initializer
            </summary>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.InitializeTrainer``1(Clarion.Framework.Templates.IimplicitComponentFactory{``0},System.Object[])">
      <summary>
            Initializes a trainer (to be used by 
            <see cref="M:Clarion.ImplicitComponentInitializer.Train``1(``0,Clarion.Framework.Templates.ImplicitComponent,System.Collections.Generic.IEnumerable{Clarion.Framework.ActivationCollection},Clarion.ImplicitComponentInitializer.TrainingTerminationConditions,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean)" />)
            </summary>
      <param name="factory">The factory that is to be used to generate the trainer</param>
      <param name="parameters">(Optional) Any parameters that are necessary for generating the implicit component using the specified factory</param>
      <typeparam name="T">The type of the trainer that is to be initialized</typeparam>
      <returns>An implicit component that can be used as a trainer for training another implicit component</returns>
    </member>
    <member name="P:Clarion.ImplicitComponentInitializer.Instance">
      <summary>
            Gets the singleton instance of the implicit component initializer
            </summary>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.NewDataSet">
      <summary>
            Returns a new activation collection object that can be used for creating a data set
            </summary>
      <returns>A new activation collection object</returns>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.RemoveRange(Clarion.Framework.Core.IWorldObject)">
      <summary>
            Removes the range specification for the specified <see cref="T:Clarion.Framework.Core.IWorldObject">world object</see> (if one exists)
            </summary>
      <param name="o">The world object for which the range is to be removed</param>
      <returns>
        <c>True</c> if the range was successfully removed, otherwise <c>False</c></returns>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.RemoveRange(System.Guid)">
      <summary>
            Removes the range specification for the specified <see cref="T:Clarion.Framework.Core.IWorldObject">world object</see> (if one exists)
            </summary>
      <param name="id">The world ID of the world object for which the range is to be removed</param>
      <returns>
        <c>True</c> if the range was successfully removed, otherwise <c>False</c></returns>
    </member>
    <member name="M:Clarion.ImplicitComponentInitializer.Train``1(``0,Clarion.Framework.Templates.ImplicitComponent,System.Collections.Generic.IEnumerable{Clarion.Framework.ActivationCollection},Clarion.ImplicitComponentInitializer.TrainingTerminationConditions,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Using the specified trainer, this method trains the target <see cref="T:Clarion.Framework.Templates.ITrainable" /><see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> with the specified settings over the specified datasets
            </summary>
      <param name="target">The implicit component that is being trained</param>
      <param name="trainer">The implicit component that is acting as the trainer (i.e., by providing the <see cref="P:Clarion.Framework.Templates.ITrainable.DesiredOutput" />, given each training dataset, 
            to the target)</param>
      <param name="dataSets">
            The set of all "input patterns" that are to be used for training the target implicit component
            <note type="implementnotes">For any input nodes that have an associated <see cref="T:Clarion.ImplicitComponentInitializer.Range" /> defined (using 
            <see cref="M:Clarion.ImplicitComponentInitializer.AddRange(Clarion.Framework.Core.IWorldObject,System.Double,System.Double,System.Double)" />), training will occur over that range irrespective
            of the activations that are specified by the datasets (for those nodes)</note></param>
      <param name="termination">(Optional) The condition under which training should be terminated</param>
      <param name="numIterations">(Optional) If the <see cref="F:Clarion.ImplicitComponentInitializer.TrainingTerminationConditions.FIXED">FIXED</see> termination condition is being used, this specifies the number
            of times over which the training datasets should be traversed</param>
      <param name="sumSqErrThreshold">(Optional) If the <see cref="F:Clarion.ImplicitComponentInitializer.TrainingTerminationConditions.SUM_SQ_ERROR">SUM_SQ_ERROR</see> termination condition is being used, this specifies
            the threshold under which the sum of squared error must fall</param>
      <param name="selection_temperature">(Optional) If the target implements the <see cref="T:Clarion.Framework.Templates.IReinforcementTrainable" /> interface, this specifies the temperature for 
            stochastic selection</param>
      <param name="randomTraversal">(Optional) Indicates whether the data sets should be traversed in a random order for each iteration</param>
      <param name="testOnly">(Optional) Specifies that the target is ONLY being tested by this call to check its performance based on the specified data sets</param>
      <typeparam name="T">The type of <see cref="T:Clarion.Framework.Templates.ITrainable" />, <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> that is to be trained</typeparam>
      <returns>The accuracy in which the target is performing on the specified data sets</returns>
    </member>
    <member name="T:Clarion.ImplicitComponentInitializer.EncodeTerminationConditions">
      <summary>
            The termination condition options for encoding
            </summary>
    </member>
    <member name="F:Clarion.ImplicitComponentInitializer.EncodeTerminationConditions.FIXED">
      <summary>
            Indicates that encoding should be terminated only after a fixed number of encoding operations have been performed on each item in the encoding data set
            </summary>
    </member>
    <member name="F:Clarion.ImplicitComponentInitializer.EncodeTerminationConditions.UNTIL_ENCODED">
      <summary>
            Indicates that encoding should be terminated as soon as all of the items in the encoding data set have been successfully encoded (and recalled)
            </summary>
    </member>
    <member name="T:Clarion.ImplicitComponentInitializer.Range">
      <summary>
            This struct is used to define the upper and lower bounds (and the increment) for training a range of values/activations
            </summary>
    </member>
    <member name="T:Clarion.ImplicitComponentInitializer.TrainingTerminationConditions">
      <summary>
            The termination condition options for training
            </summary>
    </member>
    <member name="F:Clarion.ImplicitComponentInitializer.TrainingTerminationConditions.FIXED">
      <summary>
            Indicates that training should terminate after a fixed number of iterations through the training data set
            </summary>
    </member>
    <member name="F:Clarion.ImplicitComponentInitializer.TrainingTerminationConditions.SUM_SQ_ERROR">
      <summary>
            Indicates that training should terminate when the sum of squared error falls below a specified threshold
            </summary>
    </member>
    <member name="F:Clarion.ImplicitComponentInitializer.TrainingTerminationConditions.BOTH">
      <summary>
            Indicates that training should terminate either after a fixed number of iterations <b>OR</b> based on the sum of squared error, whichever comes first
            </summary>
    </member>
    <member name="T:Clarion.World">
      <summary>
            Represents the world in which Clarion agents exist.
            </summary>
    </member>
    <member name="M:Clarion.World.Contains(Clarion.Framework.Core.IWorldObject)">
      <summary>
            Returns whether or not the world contains the specified World object.
            </summary>
      <param name="o">The World object whose membership within the world you wish to check</param>
      <returns>
        <c>True</c> if the specified World object is in the world, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.World.Contains(System.Guid)">
      <summary>
            Returns whether or not the world contains a World object with the specified world ID.
            </summary>
      <param name="worldID">The world ID of World object whose membership within the world you wish to check</param>
      <returns>
        <c>True</c> if the World object with the specified world ID is in the world, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.World.Destroy">
      <summary>
            Destroys the current singleton instance of the world class
            </summary>
    </member>
    <member name="P:Clarion.World.DimensionCount">
      <summary>
            Gets the number of dimensions for the dimension-value pairs in the world
            </summary>
    </member>
    <member name="M:Clarion.World.GetActionChunk(System.Guid)">
      <summary>
            Gets the action chunk with the specified world ID. If the action chunk cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="worldID">The world ID of the action chunk to get</param>
      <returns>The action chunk with the specified world ID or <c>null</c> if the action chunk
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetActionChunk(System.IComparable)">
      <summary>
            Gets an action chunk with the specified label. If an action chunk cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="label">The label of an action chunk to get</param>
      <returns>An action chunk with the specified label or <c>null</c> if an action chunk
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetActionChunks">
      <summary>
            Gets a thread-safe "read-only" list of all action chunks in the world.
            </summary>
      <returns>A "read-only" list of all the action chunks in the world</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetActionChunks(System.IComparable)">
      <summary>
            Gets a thread-safe "read-only" list of all of the action chunks in the world with the specified label.
            </summary>
      <param name="label">The label of an action chunks to get</param>
      <returns>A "read-only" list of all the action chunks in the world with the specified label</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetActionChunksContainingDV(Clarion.Framework.DimensionValuePair)">
      <summary>
            Gets a thread-safe "read-only" list of all of the action chunks in the world that contain the specified dimension-value pair.
            </summary>
      <returns>A "read-only" list of all the action chunks in the world that contain the specified dimension-value pair</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetActionChunksContainingDV(System.Guid)">
      <summary>
            Gets a thread-safe "read-only" list of all of the action chunks in the world that contain the dimension-value pair with the specified world ID.
            </summary>
      <returns>A "read-only" list of all the action chunks in the world that contain the dimension-value pair with the specified world ID</returns>
    </member>
    <member name="M:Clarion.World.GetActionChunksContainingDV(System.Object,System.IComparable)">
      <summary>
            Gets a thread-safe "read-only" list of all of the action chunks in the world that contain the dimension-value pair with the specified
            dimension and value IDs.
            </summary>
      <returns>A "read-only" list of all the action chunks in the world that contain the dimension-value pair with the specified dimension and
            value IDs</returns>
    </member>
    <member name="M:Clarion.World.GetActionChunksContainingDVs(System.Collections.Generic.ICollection{Clarion.Framework.DimensionValuePair})">
      <summary>
            Gets a thread-safe "read-only" list of all of the action chunks in the world that contain all of the specified dimension-value pairs.
            </summary>
      <returns>A "read-only" list of all the action chunks in the world that contain all of the specified dimension-value pairs</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetActionChunksContainingDVs(System.Collections.Generic.ICollection{System.Guid})">
      <summary>
            Gets a thread-safe "read-only" list of all of the action chunks in the world that contain all of the dimension-value pairs with the specified world IDs.
            </summary>
      <returns>A "read-only" list of all the action chunks in the world that contain all of the dimension-value pairs with the specified world IDs</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetAgent(System.Guid)">
      <summary>
            Gets the agent with the specified world ID. If the agent cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="worldID">The world ID of the agent to get</param>
      <returns>The agent with the specified world ID or <c>null</c> if the agent
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetAgent(System.IComparable)">
      <summary>
            Gets an agent with the specified name. If an agent cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="name">The name of an agent to get</param>
      <returns>An agent with the specified name or <c>null</c> if an agent
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetAgentMetaInfo(Clarion.Framework.Agent)">
      <summary>
            Gets a thread-safe "read-only" list of the meta info for the specified agent.
            </summary>
      <param name="agent">The agent whose meta info you wish to get</param>
      <returns>A "read-only" list of the meta info for the specified agent</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetAgentMetaInfo(Clarion.Framework.Agent,Clarion.Framework.Agent.InternalWorldObjectContainers)">
      <summary>
            Gets a thread-safe "read-only" list of the meta info for the specified container in the specified agent.
            </summary>
      <param name="agent">The agent whose meta info you wish to get</param>
      <param name="container">The container from which to get meta info</param>
      <returns>A "read-only" list of the meta info for the specified container in the specified agent</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetAgentMetaInfo(System.Guid)">
      <summary>
            Gets a thread-safe "read-only" list of the meta info for the agent with the specified world ID.
            </summary>
      <param name="agentID">The world ID for the agent whose meta info you wish to get</param>
      <returns>A "read-only" list of the meta info for the agent with the specified world ID</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetAgentMetaInfo(System.Guid,Clarion.Framework.Agent.InternalWorldObjectContainers)">
      <summary>
            Gets a thread-safe "read-only" list of the meta info for the specified container in the agent with the specified world ID.
            </summary>
      <param name="agentID">The world ID of the agent whose meta info you wish to get</param>
      <param name="container">The container from which to get meta info</param>
      <returns>A "read-only" list of the meta info for the specified container in the agent with the specified world ID</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetAgents">
      <summary>
            Gets a thread-safe "read-only" list of all agents in the world.
            </summary>
      <returns>A "read-only" list of all the agents in the world</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetAgents(System.IComparable)">
      <summary>
            Gets a thread-safe "read-only" list of all of the agents in the world with the specified name.
            </summary>
      <param name="name">The name of the agents to get</param>
      <returns>A "read-only" list of all the agents in the world with the specified name</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDeclarativeChunk(System.Guid)">
      <summary>
            Gets the declarative chunk with the specified world ID. If the declarative chunk cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="worldID">The world ID of the declarative chunk to get</param>
      <returns>The declarative chunk with the specified world ID or <c>null</c> if the declarative chunk
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDeclarativeChunk(System.IComparable)">
      <summary>
            Gets a declarative chunk with the specified label. If a declarative chunk cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="label">The label of a declarative chunk to get</param>
      <returns>A declarative chunk with the specified label or <c>null</c> if a declarative chunk
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDeclarativeChunks">
      <summary>
            Gets a thread-safe "read-only" list of all declarative chunks in the world.
            </summary>
      <returns>A "read-only" list of all the declarative chunks in the world</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDeclarativeChunks(System.IComparable)">
      <summary>
            Gets a thread-safe "read-only" list of all of the declarative chunks in the world with the specified label.
            </summary>
      <param name="label">The label of a declarative chunks to get</param>
      <returns>A "read-only" list of all the declarative chunks in the world with the specified label</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDeclarativeChunksContainingDV(Clarion.Framework.DimensionValuePair)">
      <summary>
            Gets a thread-safe "read-only" list of all of the declarative chunks in the world that contain the specified dimension-value pair.
            </summary>
      <returns>A "read-only" list of all the declarative chunks in the world that contain the specified dimension-value pair</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDeclarativeChunksContainingDV(System.Guid)">
      <summary>
            Gets a thread-safe "read-only" list of all of the declarative chunks in the world that contain the dimension-value pair with the specified world ID.
            </summary>
      <returns>A "read-only" list of all the declarative chunks in the world that contain the dimension-value pair with the specified world ID</returns>
    </member>
    <member name="M:Clarion.World.GetDeclarativeChunksContainingDV(System.Object,System.IComparable)">
      <summary>
            Gets a thread-safe "read-only" list of all of the declarative chunks in the world that contain the dimension-value pair with the specified
            dimension and value IDs.
            </summary>
      <returns>A "read-only" list of all the declarative chunks in the world that contain the dimension-value pair with the specified dimension and
            value IDs</returns>
    </member>
    <member name="M:Clarion.World.GetDeclarativeChunksContainingDVs(System.Collections.Generic.ICollection{Clarion.Framework.DimensionValuePair})">
      <summary>
            Gets a thread-safe "read-only" list of all of the declarative chunks in the world that contain all of the specified dimension-value pairs.
            </summary>
      <returns>A "read-only" list of all the declarative chunks in the world that contain all of the specified dimension-value pairs</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDeclarativeChunksContainingDVs(System.Collections.Generic.ICollection{System.Guid})">
      <summary>
            Gets a thread-safe "read-only" list of all of the declarative chunks in the world that contain all of the dimension-value pairs with the specified world IDs.
            </summary>
      <returns>A "read-only" list of all the declarative chunks in the world that contain all of the dimension-value pairs with the specified world IDs</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDimension(System.Object)">
      <summary>
            Gets a thread-safe "read-only" list of all the dimension-value pairs with the specified dimension ID.
            </summary>
      <param name="dimensionID">The ID of the dimension whose dimension-value pairs you wish to get</param>
      <returns>A "read-only" list of all the dimension-value pairs in the specified dimension</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDimensionValuePair(System.Guid)">
      <summary>
            Gets the dimension-value pair with the specified world ID. If the dimension-value pair cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="worldID">The ID (in the World) of the dimension-value pair to get</param>
      <returns>The dimension-value pair with the specified world ID or <c>null</c> if the dimension-value pair
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDimensionValuePair``2(``0,``1)">
      <summary>
            Gets the dimension-value pair with the specified dimension and value IDs. If the dimension-value pair cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="dimensionID">The dimension ID of the dimension-value pair to get</param>
      <param name="valueID">The value ID of the dimension-value pair to get</param>
      <returns>The dimension-value pair with the specified dimension and value IDs or <c>null</c> if the dimension-value pair
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDimensionValuePairs">
      <summary>
            Gets a thread-safe "read-only" list of all dimension-value pairs in the world.
            </summary>
      <returns>A "read-only" list of all the dimension-value pairs in the world</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetDimensionWorldIDs(System.Object)">
      <summary>
            Gets a thread-safe "read-only" list of the world IDs for all the dimension-value pairs with the specified dimension ID.
            </summary>
      <param name="dimensionID">The ID of the dimension whose dimension-value pairs you wish to get</param>
      <returns>A "read-only" list of the world IDs for all the dimension-value pairs in the specified dimension</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetGoalChunk(System.Guid)">
      <summary>
            Gets the goal chunk with the specified world ID. If the goal chunk cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="worldID">The world ID of the goal chunk to get</param>
      <returns>The goal chunk with the specified world ID or <c>null</c> if the goal chunk
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetGoalChunk(System.IComparable)">
      <summary>
            Gets a goal chunk with the specified label. If a goal chunk cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="label">The label of a goal chunk to get</param>
      <returns>A goal chunk with the specified label or <c>null</c> if a goal chunk
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetGoalChunks">
      <summary>
            Gets a thread-safe "read-only" list of all goal chunks in the world.
            </summary>
      <returns>A "read-only" list of all the goal chunks in the world</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetGoalChunks(System.IComparable)">
      <summary>
            Gets a thread-safe "read-only" list of all of the goal chunks in the world with the specified label.
            </summary>
      <param name="label">The label of a goal chunks to get</param>
      <returns>A "read-only" list of all the goal chunks in the world with the specified label</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetGoalChunksContainingDV(Clarion.Framework.DimensionValuePair)">
      <summary>
            Gets a thread-safe "read-only" list of all of the goal chunks in the world that contain the specified dimension-value pair.
            </summary>
      <returns>A "read-only" list of all the goal chunks in the world that contain the specified dimension-value pair</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetGoalChunksContainingDV(System.Guid)">
      <summary>
            Gets a thread-safe "read-only" list of all of the goal chunks in the world that contain the dimension-value pair with the specified world ID.
            </summary>
      <returns>A "read-only" list of all the goal chunks in the world that contain the dimension-value pair with the specified world ID</returns>
    </member>
    <member name="M:Clarion.World.GetGoalChunksContainingDV(System.Object,System.IComparable)">
      <summary>
            Gets a thread-safe "read-only" list of all of the goal chunks in the world that contain the dimension-value pair with the specified
            dimension and value IDs.
            </summary>
      <returns>A "read-only" list of all the goal chunks in the world that contain the dimension-value pair with the specified dimension and
            value IDs</returns>
    </member>
    <member name="M:Clarion.World.GetGoalChunksContainingDVs(System.Collections.Generic.ICollection{Clarion.Framework.DimensionValuePair})">
      <summary>
            Gets a thread-safe "read-only" list of all of the goal chunks in the world that contain all of the specified dimension-value pairs.
            </summary>
      <returns>A "read-only" list of all the goal chunks in the world that contain all of the specified dimension-value pairs</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetGoalChunksContainingDVs(System.Collections.Generic.ICollection{System.Guid})">
      <summary>
            Gets a thread-safe "read-only" list of all of the goal chunks in the world that contain all of the dimension-value pairs with the specified world IDs.
            </summary>
      <returns>A "read-only" list of all the goal chunks in the world that contain all of the dimension-value pairs with the specified world IDs</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetTimeStamp(System.Guid)">
      <summary>
            Gets the time stamp with the specified world ID. If the time stamp cannot be found,
            this method returns <c>-1</c>.
            </summary>
      <param name="worldID">The world ID of the time stamp to get</param>
      <returns>The time stamp with the specified world ID or <c>-1</c> if the time stamp
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetTimeStamp(System.Int64)">
      <summary>
            Gets the time stamp with the specified long integer value. If the time stamp cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="t">The long integer value of the time stamp to get</param>
      <returns>The time stamp with the specified long integer value or <c>null</c> if the time stamp
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetWorldObject(System.Guid)">
      <summary>
            Gets the World object with the specified world ID. If the World object cannot be found,
            this method returns <c>null</c>.
            </summary>
      <param name="worldID">The world ID of the World object to get</param>
      <returns>The World object with the specified world ID or <c>null</c> if the World object
            cannot be found</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.GetWorldObjects">
      <summary>
            Gets a thread-safe "read-only" list of all objects in the world.
            </summary>
      <returns>A "read-only" list of all objects in the world</returns>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.Initialize">
      <summary>
            Initializes a new instance of the world singleton
            </summary>
    </member>
    <member name="P:Clarion.World.Instance">
      <summary>
            Gets the singleton instance of the world.
            </summary>
    </member>
    <member name="P:Clarion.World.LoggingFileName">
      <summary>
            Gets or sets the logging file name for the default trace listener
            </summary>
    </member>
    <member name="P:Clarion.World.LoggingLevel">
      <summary>
            Gets or sets the trace level to use when logging in the Clarion Library 
            </summary>
    </member>
    <member name="P:Clarion.World.LoggingSwitch">
      <summary>
            Gets the logging switch used for determining whether a logging message should be written
            </summary>
    </member>
    <member name="M:Clarion.World.NewAgent(System.IComparable,Clarion.Framework.Agent.AgentParameters,Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters,Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters,Clarion.Framework.MotivationalSubsystem.MotivationalSubsystemParameters,System.Boolean)">
      <summary>
            Initializes a new agent. Also, if the optional name is specified (and is not <c>null</c>), then this method also 
            generates a <see cref="T:Clarion.Framework.Core.SemanticLabel" /> object for the specified name (if one does not already exist for it) and adds it to the declarative
            chunk representation of the agent.
            </summary>
      <param name="name">(optional) The name for the agent being generated. If this parameter is left unspecified, the agent's name will be 
            set to an empty string (i.e., "")</param>
      <param name="agent_pars">(optional) A parameters class instance that can be used to initialize the agent</param>
      <param name="acs_pars">(optional) A parameters class instance that can be used to initialize the ACS of the agent</param>
      <param name="nacs_pars">(optional) A parameters class instance that can be used to initialize the NACS of the agent</param>
      <param name="ms_pars">(optional) A parameters class instance that can be used to initialize the MS of the agent</param>
      <param name="addSemanticLabel">(optional) Specifies whether the <see cref="T:Clarion.Framework.Core.SemanticLabel" /> should be added to the dimension-value pairs collection 
            of the chunk. <note type="implementnotes">The semantic label is still generated regardless of whether it is added to the chunk.</note></param>
      <returns>A new agent</returns>
    </member>
    <member name="M:Clarion.World.NewCustomMetaCognitiveActionChunk``1(System.IComparable,System.Boolean)">
      <summary>
            Initializes a new custom meta-cognitive action chunk (of type T). Also, if the optional label is specified (and is not <c>null</c>), then this method 
            generates a <see cref="T:Clarion.Framework.Core.SemanticLabel" /> object for the specified label (if one does not already exist for it) and adds it to the action chunk 
            (unless otherwise indicated).
            </summary>
      <param name="label">The (optional) label for the action chunk being generated</param>
      <param name="addSemanticLabel">(optional) Specifies whether the <see cref="T:Clarion.Framework.Core.SemanticLabel" /> should be added to the dimension-value pairs collection 
            of the chunk. <note type="implementnotes">The semantic label is still generated regardless of whether it is added to the chunk.</note></param>
      <returns>A new custom meta-cognitive action chunk (of type T)</returns>
    </member>
    <member name="M:Clarion.World.NewDeclarativeChunk(System.IComparable,System.Boolean)">
      <summary>
            Initializes a new declarative chunk with the specified label. This method also generates a <see cref="T:Clarion.Framework.Core.SemanticLabel" /> object for
            the specified label (if one does not already exist for it) and adds it to the declarative chunk (unless otherwise specified).
            </summary>
      <param name="label">The label for the declarative chunk being generated</param>
      <param name="addSemanticLabel">(optional) Specifies whether the <see cref="T:Clarion.Framework.Core.SemanticLabel" /> should be added to the dimension-value pairs collection 
            of the chunk. <note type="implementnotes">The semantic label is still generated regardless of whether it is added to the chunk.</note></param>
      <returns>A new declarative chunk</returns>
    </member>
    <member name="M:Clarion.World.NewDimensionValuePair``2(``0,``1)">
      <summary>
            Initializes a new dimension-value pair with the specified dimension and value IDs. If a dimension-value pair already exists with the
            specified dimension and value IDs, this method will return that dimension-value pair instead.
            </summary>
      <param name="dimensionID">The dimension ID for the dimension-value pair to be generated</param>
      <param name="valueID">The value ID for the dimension-value pair to be generated</param>
      <returns>A new (or retrieved) dimension-value pair with specified dimension and value IDs</returns>
    </member>
    <member name="M:Clarion.World.NewDistributedDimensionValuePair``1(Clarion.Framework.Agent,``0)">
      <summary>
            Initializes a new distributed dimension-value pair for the specified agent using the specified value ID. If a distributed dimension-value pair 
            already exists for the specified agent with the specified value ID, this method will return that distributed dimension-value pair instead.
            </summary>
      <param name="a">The agent in which the distributed dimension-value pair is to be generated</param>
      <param name="valueID">The value ID for the distributed dimension-value pair to be generated</param>
      <returns>A new (or retrieved) distributed dimension-value pair for the specified agent with the specified value ID</returns>
    </member>
    <member name="M:Clarion.World.NewExternalActionChunk(System.IComparable,System.Boolean)">
      <summary>
            Initializes a new external action chunk. Also, if the optional label is specified (and is not <c>null</c>), then this method 
            generates a <see cref="T:Clarion.Framework.Core.SemanticLabel" /> object for the specified label (if one does not already exist for it) and adds it to the action chunk 
            (unless otherwise indicated).
            </summary>
      <param name="label">The (optional) label for the action chunk being generated</param>
      <param name="addSemanticLabel">(optional) Specifies whether the <see cref="T:Clarion.Framework.Core.SemanticLabel" /> should be added to the dimension-value pairs collection 
            of the chunk. <note type="implementnotes">The semantic label is still generated regardless of whether it is added to the chunk.</note></param>
      <returns>A new external action chunk</returns>
    </member>
    <member name="M:Clarion.World.NewGoalChunk(System.IComparable,System.Boolean)">
      <summary>
            Initializes a new goal chunk. Also, if the optional label is specified (and is not <c>null</c>), then this method 
            generates a <see cref="T:Clarion.Framework.Core.SemanticLabel" /> object for the specified label (if one does not already exist for it) and adds it to the action chunk 
            (unless otherwise indicated).
            </summary>
      <param name="label">The (optional) label for the goal chunk being generated</param>
      <param name="addSemanticLabel">(optional) Specifies whether the <see cref="T:Clarion.Framework.Core.SemanticLabel" /> should be added to the dimension-value pairs collection 
            of the chunk. <note type="implementnotes">The semantic label is still generated regardless of whether it is added to the chunk.</note></param>
      <returns>A new goal chunk</returns>
    </member>
    <member name="M:Clarion.World.NewGoalStructureUpdateActionChunk(System.IComparable,System.Boolean)">
      <summary>
            Initializes a new goal structure update action chunk. Also, if the optional label is specified (and is not <c>null</c>), then this method 
            generates a <see cref="T:Clarion.Framework.Core.SemanticLabel" /> object for the specified label (if one does not already exist for it) and adds it to the action chunk 
            (unless otherwise indicated).
            </summary>
      <param name="label">The (optional) label for the action chunk being generated</param>
      <param name="addSemanticLabel">(optional) Specifies whether the <see cref="T:Clarion.Framework.Core.SemanticLabel" /> should be added to the dimension-value pairs collection 
            of the chunk. <note type="implementnotes">The semantic label is still generated regardless of whether it is added to the chunk.</note></param>
      <returns>A new goal structure update action chunk</returns>
    </member>
    <member name="M:Clarion.World.NewParameterChangeActionChunk(System.IComparable,System.Boolean)">
      <summary>
            Initializes a new parameter change action chunk. Also, if the optional label is specified (and is not <c>null</c>), then this method 
            generates a <see cref="T:Clarion.Framework.Core.SemanticLabel" /> object for the specified label (if one does not already exist for it) and adds it to the action chunk 
            (unless otherwise indicated).
            </summary>
      <param name="label">(optional) The label for the action chunk being generated</param>
      <param name="addSemanticLabel">(optional) Specifies whether the <see cref="T:Clarion.Framework.Core.SemanticLabel" /> should be added to the dimension-value pairs collection 
            of the chunk. <note type="implementnotes">The semantic label is still generated regardless of whether it is added to the chunk.</note></param>
      <returns>A new parameter change action chunk</returns>
    </member>
    <member name="M:Clarion.World.NewReasoningRequestActionChunk(System.IComparable,System.Boolean)">
      <summary>
            Initializes a new NACS reasoning action chunk. Also, if the optional label is specified (and is not <c>null</c>), then this method 
            generates a <see cref="T:Clarion.Framework.Core.SemanticLabel" /> object for the specified label (if one does not already exist for it) and adds it to the action chunk 
            (unless otherwise indicated).
            </summary>
      <param name="label">The (optional) label for the action chunk being generated</param>
      <param name="addSemanticLabel">(optional) Specifies whether the <see cref="T:Clarion.Framework.Core.SemanticLabel" /> should be added to the dimension-value pairs collection 
            of the chunk. <note type="implementnotes">The semantic label is still generated regardless of whether it is added to the chunk.</note></param>
      <returns>A new NACS reasoning action chunk</returns>
    </member>
    <member name="M:Clarion.World.NewRetrieveRequestActionChunk(System.IComparable,System.Boolean)">
      <summary>
            Initializes a new NACS retrieve action chunk. Also, if the optional label is specified (and is not <c>null</c>), then this method 
            generates a <see cref="T:Clarion.Framework.Core.SemanticLabel" /> object for the specified label (if one does not already exist for it) and adds it to the action chunk 
            (unless otherwise indicated).
            </summary>
      <param name="label">The (optional) label for the action chunk being generated</param>
      <param name="addSemanticLabel">(optional) Specifies whether the <see cref="T:Clarion.Framework.Core.SemanticLabel" /> should be added to the dimension-value pairs collection 
            of the chunk. <note type="implementnotes">The semantic label is still generated regardless of whether it is added to the chunk.</note></param>
      <returns>A new NACS retrieve action chunk</returns>
    </member>
    <member name="M:Clarion.World.NewSensoryInformation(Clarion.Framework.Agent,Clarion.Framework.SensoryInformation,Clarion.World.SensoryInformationIncrementOptions)">
      <summary>
            Initializes a new sensory information object for the specified agent and sets up the generated sensory information object to match
            the configuration of the specified sensory information object.
            </summary>
      <param name="agent">The agent for whom the sensory information is intended</param>
      <param name="i">The sensory information object that is to be copied</param>
      <returns>The sensory information object for the specified agent generated by this method</returns>
    </member>
    <member name="M:Clarion.World.NewSensoryInformation(Clarion.Framework.Agent,Clarion.World.SensoryInformationIncrementOptions)">
      <summary>
            Initializes a new sensory information object for the specified agent using the specified time stamp increment option.
            </summary>
      <param name="agent">The agent for whom the sensory information is intended</param>
      <param name="siOption">The option to use for incrementing the time at which this sensory information is to be perceived by the agent.
            By default this option is set to the maximum response time for the specified agent (see <see cref="T:Clarion.World.SensoryInformationIncrementOptions" />
            for more details)</param>
      <returns>The sensory information object for the specified agent generated by this method</returns>
    </member>
    <member name="M:Clarion.World.NewSensoryInformation(Clarion.Framework.Agent,System.Int64)">
      <summary>
            Initializes a new sensory information object for the specified agent at the specified time stamp.
            </summary>
      <param name="agent">The agent for whom the sensory information is intended</param>
      <param name="timeStamp">The long value of the time stamp for the sensory information object to be generated</param>
      <returns>The sensory information object for the specified agent generated by this method</returns>
    </member>
    <member name="M:Clarion.World.NewWorkingMemoryUpdateActionChunk(System.IComparable,System.Boolean)">
      <summary>
            Initializes a new working memory update action chunk. Also, if the optional label is specified (and is not <c>null</c>), then this method 
            generates a <see cref="T:Clarion.Framework.Core.SemanticLabel" /> object for the specified label (if one does not already exist for it) and adds it to the action chunk 
            (unless otherwise indicated).
            </summary>
      <param name="label">The (optional) label for the action chunk being generated</param>
      <param name="addSemanticLabel">(optional) Specifies whether the <see cref="T:Clarion.Framework.Core.SemanticLabel" /> should be added to the dimension-value pairs collection 
            of the chunk. <note type="implementnotes">The semantic label is still generated regardless of whether it is added to the chunk.</note></param>
      <returns>A new working memory update action chunk</returns>
    </member>
    <member name="M:Clarion.World.Remove(Clarion.Framework.Core.IWorldObject)">
      <summary>
            Removes the specified World object from the world.
            </summary>
      <param name="o">The World object to be removed</param>
      <returns>
        <c>True</c> if the specified World object was successfully removed, otherwise <c>false</c></returns>
      <exception cref="T:System.InvalidCastException">If the specified World object is not a dimension-value pair,
            chunk, or agent</exception>
      <exception cref="T:System.InvalidOperationException">If the singleton world instance has not been initialized</exception>
    </member>
    <member name="M:Clarion.World.ToString">
      <summary>
            Returns a string that represents the world.
            </summary>
      <returns>A string representation of the world</returns>
    </member>
    <member name="P:Clarion.World.UseTimeStamp">
      <summary>
            Specifies whether or not time stamp dimension-value pairs should be generated.
            </summary>
    </member>
    <member name="T:Clarion.World.ReservedIDs">
      <summary>
            IDs that are reserved in order to allow for specific capabilities within the system.
            </summary>
    </member>
    <member name="F:Clarion.World.ReservedIDs.NULL_DV">
      <summary>
            Reserved for the NULL_DV
            </summary>
    </member>
    <member name="F:Clarion.World.ReservedIDs.DISTRIBUTED_DV">
      <summary>
            Reserved for agent-specific dimension-value pairs
            </summary>
    </member>
    <member name="F:Clarion.World.ReservedIDs.DO_NOTHING">
      <summary>
            Reserved for the DO_NOTHING External Action Chunk
            </summary>
    </member>
    <member name="T:Clarion.World.SensoryInformationIncrementOptions">
      <summary>
            The options for how time should be incremented for an agent. 
            </summary>
    </member>
    <member name="F:Clarion.World.SensoryInformationIncrementOptions.PERCEPTION_TIME">
      <summary>
            The minimum interval between perceptions (defined by <see cref="P:Clarion.Framework.Agent.AgentParameters.PERCEPTION_TIME" />).
            </summary>
    </member>
    <member name="F:Clarion.World.SensoryInformationIncrementOptions.MAX_RESPONSE_TIME">
      <summary>
            The maximum interval of time between perceptions (defined by <see cref="P:Clarion.Framework.Agent.AgentParameters.MAX_RESPONSE_TIME" />)
            </summary>
    </member>
    <member name="T:Clarion.Framework.ActionCenteredSubsystem">
      <summary>
            This class implements the Action Centered Subsystem (ACS) in the Clarion Library
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#IPublishes#SubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#IPublishes#UnsubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes#PublicationTimingsSpecifiedEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes#PublisherAvailableEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes#PublisherRemovedEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.GetDecisionTime(System.Int64)"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>ActionCenteredSubsystem</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.Emotion.ActionPotentialUpdatedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.Emotion.ActionPotentialUpdatedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.ExternalActionRecommendedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.ExternalActionRecommendedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.GoalStructureUpdateRequestedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.GoalStructureUpdateRequestedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.ParameterChangeRequestedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.ParameterChangeRequestedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.PerceivedSensoryInformationModifiedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.PerceivedSensoryInformationModifiedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.ReasoningRequestedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.ReasoningRequestedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.RetrieveRequestedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.RetrieveRequestedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.TimingHoldRequestedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.TimingHoldRequestedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.WorkingMemoryUpdatedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.WorkingMemoryUpdatedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.WorkingMemoryUpdateRequestedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.WorkingMemoryUpdateRequestedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.MetaInfo">
      <summary>
            Gets the meta info
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.Parameters"></member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.PositiveMatchMethod">
      <summary>
            Sets the (optional) positive match determiner that can be used in-lieu of the default method for
            updating the match statistics for the top and bottom levels as a whole
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ReasoningInputFilterMethod">
      <summary>
            Sets the (optional) filtering method that can be used in-lieu of the default method for
            filtering the input that is passed by the ACS to the NACS for reasoning
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ReasoningOutputFilterMethod">
      <summary>
            Sets the (optional) filtering method that can be used in-lieu of the default method for
            filtering the conclusions from reasoning
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.RetrievalInputFilterMethod">
      <summary>
            Sets the (optional) filtering method that can be used in-lieu of the default method for
            filtering the input that is passed by the ACS to the NACS for retrieval
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.RetrievalOutputFilterMethod">
      <summary>
            Sets the (optional) filtering method that can be used in-lieu of the default method for
            filtering the output from knowledge retrieval
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.RuleExtractionFactory">
      <summary>
            Sets the factory that is to be used for extracting rules from the bottom level of the ACS
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.RuleExtractionFactoryParameters">
      <summary>
            Sets the parameters associated with the factory used for extracting rules from the bottom level of the ACS
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.RuleExtractionMethod">
      <summary>
            Sets the (optional) rule extraction method that can be used in-lieu of the default method for
            extracting rule from the bottom level of the ACS
            </summary>
    </member>
    <member name="M:Clarion.Framework.ActionCenteredSubsystem.UpdateMetaInfo(Clarion.Framework.SensoryInformation,Clarion.Framework.Core.TimedEventArgs.Timings)">
      <summary>
            Updates the action potential meta-info within the specified sensory information object
            </summary>
      <param name="i">The sensory information object in which to set the action potential meta-info</param>
      <param name="timing">Not used in this context</param>
    </member>
    <member name="T:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters">
      <summary>
            This is parameters class for the <see cref="T:Clarion.Framework.ActionCenteredSubsystem" /> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.A">
      <summary>
            The constant A used to factor in the MCS measure when calculating the probability or weight of for the bottom level
            during level selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.B">
      <summary>
            The constant B used to factor in the MCS measure when calculating the probability or weight of for the bottom level
            during level selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.BOTTOM_LEVEL_DECISION_TIME">
      <summary>
            The decision time for the bottom level of the ACS
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.C3">
      <summary>
            The C3 constant used for variable level selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.C4">
      <summary>
            The C4 constant used for variable level selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.DEFAULT_ACTION_POTENTIAL">
      <summary>
            Specifies the default activation to set for the DO_NOTHING external action chunk (if no IDNs are eligible to be used) 
            when calculating action potential
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.DELETION_FREQUENCY">
      <summary>
            The frequency (in terms of # of learning steps) in which deletions by density are to be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.DISCOUNT">
      <summary>
            The match discount factor to be applied at the end of an episode
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.EXTERNAL_ACTION_PROBABILITY">
      <summary>
            The probability of choosing an external action
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.FIXED_BL_LEVEL_SELECTION_MEASURE">
      <summary>
            The fixed selection measure for the bottom level
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.FIXED_FR_LEVEL_SELECTION_MEASURE">
      <summary>
            The fixed selection measure for the fixed rules
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.FIXED_IRL_LEVEL_SELECTION_MEASURE">
      <summary>
            The fixed selection measure for the IRL rules
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.FIXED_RER_LEVEL_SELECTION_MEASURE">
      <summary>
            The fixed selection measure for the RER rules
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.GS_UPDATE_ACTION_PROBABILITY">
      <summary>
            The probability of choosing a goal structure update action
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.LEVEL_SELECTION_METHOD">
      <summary>
            Specifies the method to use for level selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.LEVEL_SELECTION_OPTION">
      <summary>
            Specifies the option to use for level selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.LOCAL_EPISODIC_MEMORY_RETENTION_THRESHOLD">
      <summary>
            The maximum number of time steps (since the most recent) that local episodic memory should be kept before being discarded
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.MAXIMUM_DECISION_TIME">
      <summary>
            The maximum decision-time for the ACS
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.MCS_BL_SELECTION_MEASURE">
      <summary>
            The level selection measure specified by the the MCS (used for selecting the bottom level of the ACS)
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.MCS_FR_SELECTION_MEASURE">
      <summary>
            The level selection measure specified by the the MCS (used for selecting the bottom level of the ACS)
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.MCS_IRL_SELECTION_MEASURE">
      <summary>
            The level selection measure specified by the the MCS (used for selecting the bottom level of the ACS)
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.MCS_MAXIMUM_DECISION_TIME">
      <summary>
            The maximum decision-time as reported by the MCS
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.MCS_RER_SELECTION_MEASURE">
      <summary>
            The level selection measure specified by the the MCS (used for selecting the bottom level of the ACS)
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.NACS_REASONING_ACTION_PROBABILITY">
      <summary>
            The probability of choosing an NACS reasoning action
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.NACS_RETRIEVE_ACTION_PROBABILITY">
      <summary>
            The probability of choosing an NACS retrieve action
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.PARAMETER_CHANGE_ACTION_PROBABILITY">
      <summary>
            The probability of choosing a parameter change action
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.PERFORM_BL_LEARNING">
      <summary>
            Specifies whether or not bottom level learning should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.PERFORM_DELETION_BY_DENSITY">
      <summary>
            Specifies whether or not intermittent rule deletion by density should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.PERFORM_IRL_REFINEMENT">
      <summary>
            Specifies whether or not IRL rule refinement should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.PERFORM_LEARNING">
      <summary>
            Specifies whether or not learning in general (including extraction, refinement, bottom-level learning, deletion by density, etc.) 
            should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.PERFORM_RER_REFINEMENT">
      <summary>
            Specifies whether or not RER rule refinement should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.PERFORM_RULE_EXTRACTION">
      <summary>
            Specifies whether or not rule extraction should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.PERFORM_TOP_DOWN_LEARNING">
      <summary>
            Specifies whether or not top-down learning should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.PERSISTENCE">
      <summary>
            The persistence factor for the previous selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion of the top and bottom level component collections
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.SELECTION_TEMPERATURE">
      <summary>
            The temperature for stochastic selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.SELECTION_THRESHOLD">
      <summary>
            The threshold for stochastic selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.TOP_LEVEL_DECISION_TIME">
      <summary>
            The decision time for the top level of the ACS
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.USE_ACTION_POTENTIAL">
      <summary>
            Specifies whether action potential should be calculated by the ACS during perception
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.USE_ACTION_PROBABILITIES">
      <summary>
            Specifies whether action type selection (based on probability) should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.VARIABLE_BL_BETA">
      <summary>
            The bottom level beta for variable level selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.VARIABLE_FR_BETA">
      <summary>
            The fixed rule beta for variable level selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.VARIABLE_IRL_BETA">
      <summary>
            The IRL beta for variable level selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.VARIABLE_RER_BETA">
      <summary>
            The RER beta for variable level selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.WM_UPDATE_ACTION_PROBABILITY">
      <summary>
            The probability of choosing a working memory update action
            </summary>
    </member>
    <member name="P:Clarion.Framework.ActionCenteredSubsystem.ActionCenteredSubsystemParameters.WORKING_MEMORY_CAPACITY">
      <summary>
            The maximum number of slots for working memory (i.e., the maximum number of chunks that can be in working memory)
            </summary>
    </member>
    <member name="T:Clarion.Framework.ActionCenteredSubsystem.LevelSelectionMethods">
      <summary>
            The various methods that can be used for level selection (such as stochastic or combined)
            </summary>
    </member>
    <member name="F:Clarion.Framework.ActionCenteredSubsystem.LevelSelectionMethods.STOCHASTIC">
      <summary>
            Specifies that stochastic level selection should be performed
            </summary>
    </member>
    <member name="F:Clarion.Framework.ActionCenteredSubsystem.LevelSelectionMethods.COMBINED">
      <summary>
            Specifies that outcomes of the top and bottom levels should be combined using weighted combination
            </summary>
    </member>
    <member name="T:Clarion.Framework.ActionCenteredSubsystem.LevelSelectionOptions">
      <summary>
            The options for level selection (such as fixed or variable)
            </summary>
    </member>
    <member name="F:Clarion.Framework.ActionCenteredSubsystem.LevelSelectionOptions.FIXED">
      <summary>
            Specifies that level selection should be made using the fixed level selection method
            </summary>
    </member>
    <member name="F:Clarion.Framework.ActionCenteredSubsystem.LevelSelectionOptions.VARIABLE">
      <summary>
            Specifies that level selection should be made using the variable level selection method
            </summary>
    </member>
    <member name="T:Clarion.Framework.ActionCenteredSubsystem.MetaInfoReservations">
      <summary>
            The meta-info reservations for the action-centered subsystem
            </summary>
    </member>
    <member name="F:Clarion.Framework.ActionCenteredSubsystem.MetaInfoReservations.ACTION_POTENTIAL"></member>
    <member name="F:Clarion.Framework.ActionCenteredSubsystem.MetaInfoReservations.CALCULATING_ACTION_POTENTIAL"></member>
    <member name="F:Clarion.Framework.ActionCenteredSubsystem.MetaInfoReservations.CHOOSING_ACTION"></member>
    <member name="F:Clarion.Framework.ActionCenteredSubsystem.MetaInfoReservations.LEARNING"></member>
    <member name="F:Clarion.Framework.ActionCenteredSubsystem.MetaInfoReservations.PERFORMING_INTERMITTENT_RULE_DELETION"></member>
    <member name="F:Clarion.Framework.ActionCenteredSubsystem.MetaInfoReservations.UPDATING_WM"></member>
    <member name="T:Clarion.Framework.ActivationCollection"></member>
    <member name="M:Clarion.Framework.ActivationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.ActivationCollection" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.ActivationCollection.#ctor(Clarion.Framework.ActivationCollection)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.ActivationCollection" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.ActivationCollection.Add(Clarion.Framework.Core.ActivationTuple)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Add(Clarion.Framework.Core.IWorldObject,System.Double)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Add(System.Guid,System.Double)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.AddRange(System.Collections.Generic.IEnumerable{Clarion.Framework.Core.ActivationTuple})"></member>
    <member name="M:Clarion.Framework.ActivationCollection.AddRange(System.Collections.Generic.IEnumerable{Clarion.Framework.Core.IWorldObject},System.Double)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.AddRange(System.Collections.Generic.IEnumerable{System.Guid},System.Double)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Clear"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Contains(Clarion.Framework.Core.ActivationTuple)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Contains(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Contains(Clarion.Framework.Core.IWorldObject,System.Double)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Contains(System.Guid)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Contains(System.Guid,System.Double)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Contains(System.Object,System.IComparable)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Contains(System.Object,System.IComparable,System.Double)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.ContainsDimension(System.Object)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.CopyTo(Clarion.Framework.Core.ActivationTuple[],System.Int32)"></member>
    <member name="P:Clarion.Framework.ActivationCollection.Count"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Equals(Clarion.Framework.ActivationCollection)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Equals(System.Object)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.GetEnumerator"></member>
    <member name="P:Clarion.Framework.ActivationCollection.Item(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="P:Clarion.Framework.ActivationCollection.Item(System.Guid)"></member>
    <member name="P:Clarion.Framework.ActivationCollection.Item(System.Object,System.IComparable)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.op_Addition(Clarion.Framework.ActivationCollection,Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.op_Equality(Clarion.Framework.ActivationCollection,Clarion.Framework.ActivationCollection)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.op_Inequality(Clarion.Framework.ActivationCollection,Clarion.Framework.ActivationCollection)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.op_Subtraction(Clarion.Framework.ActivationCollection,Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Remove(Clarion.Framework.Core.ActivationTuple)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Remove(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.Remove(System.Guid)"></member>
    <member name="M:Clarion.Framework.ActivationCollection.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:Clarion.Framework.ActivationCollection.ToString"></member>
    <member name="M:Clarion.Framework.ActivationCollection.ToString(System.String)"></member>
    <member name="P:Clarion.Framework.ActivationCollection.UnboxedCollection"></member>
    <member name="P:Clarion.Framework.ActivationCollection.UnboxedCollectionLocker"></member>
    <member name="T:Clarion.Framework.AffiliationBelongingnessDrive">
      <summary>
            This class implements an affiliation and belongingness drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.AffiliationBelongingnessDrive.#ctor(System.Guid,Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes an affiliation and belongingness drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.AffiliationBelongingnessDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>AffiliationBelongingnessDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.AffiliationBelongingnessDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>AffiliationBelongingnessDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.AffiliationBelongingnessDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveFactory">
      <summary>
            The factory class for generating an affiliation and belongingness drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.AffiliationBelongingnessDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A affiliation and belongingness drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.AffiliationBelongingnessDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveParameters.#ctor(Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.AffiliationBelongingnessDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.AffiliationBelongingnessDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.AffiliationBelongingnessDrive.AffiliationBelongingnessDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.Agent">
      <summary>
             This class implements an agent within the Clarion Library
             </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.ACS">
      <summary>
            Gets the agent's ACS
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.ActuationTimeVariabilityCalculator">
      <summary>
            Can optionally be used to set a custom delegate for calculating the actuation time with variability
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.AddEpisode(Clarion.Framework.Episode)">
      <summary>
            Adds the specified episode to episodic memory
            </summary>
      <param name="em">The episode to be added to episodic memory</param>
    </member>
    <member name="M:Clarion.Framework.Agent.AddKnowledge(Clarion.Framework.Core.Chunk)">
      <summary>
            Adds the specified chunk to the general knowledge store
            </summary>
      <param name="ch">The chunk to be added to the general knowledge store</param>
    </member>
    <member name="P:Clarion.Framework.Agent.AsDeclarativeChunk">
      <summary>
            Gets the declarative chunk representation of the agent
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AsDimensionValuePair">
      <summary>
            Gets the dimension-value pair representation of the agent
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AverageResponseTime">
      <summary>
            Gets the agent's average response time
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.Clarion#Framework#Templates#IPublishes#SubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.Agent.Clarion#Framework#Templates#IPublishes#UnsubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.Agent.Clarion#Framework#Templates#ISubscribes#PublicationTimingsSpecifiedEventHandler"></member>
    <member name="P:Clarion.Framework.Agent.Clarion#Framework#Templates#ISubscribes#PublisherAvailableEventHandler"></member>
    <member name="P:Clarion.Framework.Agent.Clarion#Framework#Templates#ISubscribes#PublisherRemovedEventHandler"></member>
    <member name="P:Clarion.Framework.Agent.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.Agent.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.Agent.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.Agent.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="M:Clarion.Framework.Agent.Commit(Clarion.Framework.Core.ICommitable)">
      <summary>
            Commits the specified internal (<see cref="T:Clarion.Framework.Core.ICommitable" />, functional) item to the agent
            </summary>
      <param name="agentInternal">The internal (functional) item that is to be committed</param>
      <exception cref="T:System.ArgumentException">If the specified agent internal is not associated with this agent</exception>
    </member>
    <member name="P:Clarion.Framework.Agent.CurrentGoal">
      <summary>
            Gets the current goal for the agent (of <c>null</c> if no goal is set in the goal structure)
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.Die">
      <summary>
            Kills the agent
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.EndEpisode(System.Int64,System.Int64)">
      <summary>
            Indicates that the episode (beginning at the specified start time) has ended (at the specified end time)
            </summary>
      <param name="sTimeStamp">The time stamp associated with the start of the episode</param>
      <param name="eTimeStamp">The time stamp associated with the end of the episode</param>
    </member>
    <member name="M:Clarion.Framework.Agent.Equals(Clarion.Framework.Agent)">
      <summary>
            Compares the specified agent to this agent
            </summary>
      <param name="a">The agent against which this agent will be checked for equality</param>
      <returns>
        <c>True</c> if the specified agent is equal to this agent, otherwise false</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.Equals(System.Object)">
      <summary>
            Compares the specified agent to this agent
            </summary>
      <param name="a">The agent against which this agent will be checked for equality</param>
      <returns>
        <c>True</c> if the specified agent is equal to this agent, otherwise false</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.GetChosenExternalAction(Clarion.Framework.SensoryInformation)">
      <summary>
            Gets the external action that was chosen based on the related sensory information
            </summary>
      <param name="relatedSI">The sensory information that was perceived (and which leads to an external action being chosen)</param>
      <returns>The external action that was chosen based on the related sensory information</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.GetChosenExternalAction(Clarion.Framework.SensoryInformation,System.Collections.Generic.Dictionary{Clarion.Framework.Core.ActionChunk,System.Double}@)">
      <summary>
            Gets the external action that was chosen based on the related sensory information
            </summary>
      <param name="relatedSI">The sensory information that was perceived (and which leads to an external action being chosen)</param>
      <param name="finalActionActivations">(Optional) Returns the final selection activations for all of the actions that were considered during the given time stamp</param>
      <returns>The external action that was chosen based on the related sensory information</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.GetChosenExternalAction(System.Int64)">
      <summary>
            Gets the external action that was chosen based on the time stamp for the related sensory information
            </summary>
      <param name="siTimeStamp">The time stamp associated with the sensory information that was perceived (and which leads to an external action being chosen)</param>
      <returns>The external action that was chosen based on the related sensory information</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.GetChosenExternalAction(System.Int64,System.Collections.Generic.Dictionary{Clarion.Framework.Core.ActionChunk,System.Double}@)">
      <summary>
            Gets the external action that was chosen based on the time stamp for the related sensory information
            </summary>
      <param name="siTimeStamp">The time stamp associated with the sensory information that was perceived (and which leads to an external action being chosen)</param>
      <param name="finalActionActivations">(Optional) Returns the final selection activations for all of the actions that were considered during the given time stamp</param>
      <returns>The external action that was chosen based on the related sensory information</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.GetHashCode">
      <summary>
            Gets the hash code of the agent
            </summary>
      <returns>The hash code</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.GetInternals">
      <summary>
            Gets all of the internal (<see cref="T:Clarion.Framework.Core.ICommitable" />, functional) items from the agent
            </summary>
      <returns>The internal (functional) items located in the agent</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.GetInternals(Clarion.Framework.Agent.InternalContainers,Clarion.Framework.Agent.InternalContainers[])">
      <summary>
            Gets the internal (<see cref="T:Clarion.Framework.Core.ICommitable" />, functional) items for the specified <see cref="T:Clarion.Framework.Agent.InternalContainers" /></summary>
      <param name="container">A container from which to get internal (functional) items</param>
      <param name="additionalContainers">(optional) Any additional containers that may be desired from which to get internal (functional) items</param>
      <returns>The internal (functional) items located in the specified internals container(s)</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.GetInternals(Clarion.Framework.Agent.InternalWorldObjectContainers,Clarion.Framework.Agent.InternalWorldObjectContainers[])">
      <summary>
            Gets any internal descriptive (<see cref="T:Clarion.Framework.Core.IWorldObject" />) items for the specified <see cref="T:Clarion.Framework.Agent.InternalWorldObjectContainers" /></summary>
      <param name="container">A container from which to get internal descriptive items</param>
      <param name="additionalContainers">(optional) Any additional containers that may be desired from which to get internal descriptive items</param>
      <returns>The internal descriptive items located in the specified internals container(s)</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.GetResponseTime(Clarion.Framework.SensoryInformation)">
      <summary>
            Gets the response time of the external action that was chosen for the related sensory information object that was perceived
            </summary>
      <param name="relatedSI">The sensory information that was perceived (and which lead to an external action being chosen)</param>
      <returns>The response time</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.GetResponseTime(System.Int64)">
      <summary>
            Gets the response time of the external action that was chosen for the related sensory information object that was perceived
            at the specified time stamp
            </summary>
      <param name="siTimeStamp">The time stamp associated with the sensory information that was perceived (and which lead to an external action being chosen)</param>
      <returns>The response time</returns>
    </member>
    <member name="P:Clarion.Framework.Agent.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>Agent</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.InvokeEvent(Clarion.Framework.Core.GoalStructureUpdateRequestedEventArgs)"></member>
    <member name="M:Clarion.Framework.Agent.InvokeEvent(Clarion.Framework.Core.LearningRequestedEventArgs)"></member>
    <member name="M:Clarion.Framework.Agent.InvokeEvent(Clarion.Framework.Core.SensoryInformationPerceivedEventArgs)"></member>
    <member name="M:Clarion.Framework.Agent.InvokeEvent(Clarion.Framework.Core.WorkingMemoryUpdateRequestedEventArgs)"></member>
    <member name="M:Clarion.Framework.Agent.InvokeEvent(Clarion.Framework.Templates.NewExternalActionChosenEventArgs)"></member>
    <member name="P:Clarion.Framework.Agent.IsAlive">
      <summary>
            Specifies whether the agent is alive
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.MCS">
      <summary>
            Gets the agent's MCS
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.MS">
      <summary>
            Gets the agent's MS
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.NACS">
      <summary>
            Gets the agent's NACS
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.Name">
      <summary>
            Gets the name of the agent
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.NotifyChosenActionReceived(Clarion.Framework.SensoryInformation)">
      <summary>
            Notifies the agent that the external action (which was chosen based on the related sensory information object that was perceived) has be received by the simulating environment
            </summary>
      <param name="relatedSI">The sensory information that was perceived (and which lead to an external action being chosen)</param>
    </member>
    <member name="M:Clarion.Framework.Agent.NotifyChosenActionReceived(System.Int64)">
      <summary>
            Notifies the agent that the external action (which was chosen based on the specified time stamp for the related sensory information object
            that was perceived) has be received by the simulating environment
            </summary>
      <param name="siTimeStamp">The time stamp associated with the sensory information that was perceived (and which lead to an external action being chosen)</param>
    </member>
    <member name="P:Clarion.Framework.Agent.Parameters">
      <summary>
            Gets the local parameters class instance for this agent
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.Perceive(Clarion.Framework.SensoryInformation)">
      <summary>
            Perceives the specified sensory information and initiates the agent's internal operations for processing the perceived information
            </summary>
      <param name="i">The sensory information that is being perceived</param>
    </member>
    <member name="P:Clarion.Framework.Agent.PerceptionTimeVariabilityCalculator">
      <summary>
            Can optionally be used to set a custom delegate for calculating the perception time with variability
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.ReceiveFeedback(Clarion.Framework.SensoryInformation,System.Double,System.Int64)">
      <summary>
            Delivers feedback to the agent for the external action that was chosen based on the related sensory information object that was perceived
            </summary>
      <param name="relatedSI">The sensory information that was perceived (and which led to an external action being chosen)</param>
      <param name="feedback">The feedback for the external action that was chosen</param>
      <param name="receivedAt">(optional) The time stamp for when the feedback was received. If this is not specified, then the \"received at\" 
            time stamp is assumed to be equal to the time stamp for when the action, associated with the related sensory information, was performed </param>
    </member>
    <member name="M:Clarion.Framework.Agent.ReceiveFeedback(System.Int64,System.Double,System.Int64)">
      <summary>
            Delivers feedback to the agent for the external action that was chosen based on the sensory information perceived at
            the specified time stamp
            </summary>
      <param name="siTimeStamp">The time stamp associated with the sensory information that was perceived (and which led to an external action being chosen)</param>
      <param name="feedback">The feedback for the external action that was chosen</param>
      <param name="receivedAt">(optional) The time stamp for when the feedback was received. If this is not specified, then the \"received at\" 
            time stamp is assumed to be equal to the time stamp for when the action, associated with the related sensory information time stamp, was performed</param>
    </member>
    <member name="M:Clarion.Framework.Agent.RegisterAsynchronousSimulatingEnvironment(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Templates.NewExternalActionChosenEventArgs})">
      <summary>
            Indicates to the agent that the specified simulating environment should be notified asynchronously when a new external action is chosen
            </summary>
      <param name="subscriber">The class instance (from the simulating environment) that contains the external action chosen event handler</param>
    </member>
    <member name="M:Clarion.Framework.Agent.Remove(Clarion.Framework.Core.ICommitable)">
      <summary>
            Removes the specified internal (<see cref="T:Clarion.Framework.Core.ICommitable" />, functional) item from the agent (as long is it is in the "initializing state")
            </summary>
      <param name="agentInternal">The internal (functional) item to be removed</param>
      <returns>
        <c>True</c> if the internal (functional) item was successfully removed, otherwise <c>False</c></returns>
      <exception cref="T:System.ArgumentException">If the specified agent internal is not in the initializing state or is not associated with this agent</exception>
    </member>
    <member name="M:Clarion.Framework.Agent.RemoveKnowledge(Clarion.Framework.Core.Chunk)">
      <summary>
            Removes the specified chunk from the general knowledge store
            </summary>
      <param name="ch">The chunk to be removed from the general knowledge store</param>
    </member>
    <member name="M:Clarion.Framework.Agent.ResetGoal(Clarion.Framework.GoalChunk)">
      <summary>
            Resets (i.e., removes) the specified goal in the goal structure 
            </summary>
      <param name="g">The goal to be go (i.e., removed)</param>
    </member>
    <member name="M:Clarion.Framework.Agent.ResetGoalStructure">
      <summary>
            Resets (i.e., removes) all goals from the goal structure 
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.ResetWMChunk(Clarion.Framework.Core.Chunk)">
      <summary>
            Resets (i.e., removes) the specified chunk from working memory
            </summary>
      <param name="ch">The chunk to be go (i.e., removed)</param>
    </member>
    <member name="M:Clarion.Framework.Agent.ResetWorkingMemory">
      <summary>
            Resets (i.e., removes) all chunks from working memory 
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.Retract(Clarion.Framework.Core.ICommitable,Clarion.Framework.Agent.InternalContainers)">
      <summary>
            Retracts the specified internal (<see cref="T:Clarion.Framework.Core.ICommitable" />, functional) item from the specified container within the agent
            </summary>
      <param name="agentInternal">The internal (functional) item that is to be retracted</param>
      <param name="container">The internal container in which the item is located</param>
      <exception cref="T:System.ArgumentException">If the specified internal item is not of the correct type for the specified internal container or if it can not be found in
            the specified internal container</exception>
    </member>
    <member name="M:Clarion.Framework.Agent.SetGoal(Clarion.Framework.GoalChunk,System.Double)">
      <summary>
            Sets the specified goal in the goal structure with the specified activation
            </summary>
      <param name="g">The goal to be set in the goal structure</param>
      <param name="activation">The activation for the goal that is being set</param>
    </member>
    <member name="M:Clarion.Framework.Agent.SetResetGoal(Clarion.Framework.GoalChunk,System.Double)">
      <summary>
            Resets the goal structure and then sets the specified goal in the goal structure with the specified activation
            </summary>
      <param name="g">The goal to be set in the goal structure</param>
      <param name="activation">The activation for the goal that is being set</param>
    </member>
    <member name="M:Clarion.Framework.Agent.SetResetWMChunk(Clarion.Framework.Core.Chunk,System.Double)">
      <summary>
            Resets working memory and then sets the specified chunk in working memory with the specified activation
            </summary>
      <param name="ch">The chunk to be set in working memory</param>
      <param name="activation">The activation for the chunk that is being set</param>
    </member>
    <member name="M:Clarion.Framework.Agent.SetWMChunk(Clarion.Framework.Core.Chunk,System.Double)">
      <summary>
            Sets the specified chunk in working memory with the specified activation
            </summary>
      <param name="ch">The chunk to be set in working memory</param>
      <param name="activation">The activation for the chunk that is being set</param>
    </member>
    <member name="M:Clarion.Framework.Agent.ToString">
      <summary>
            Returns a string representation of the agent
            </summary>
      <returns>A string representation of the agent</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.ToString(System.String)">
      <summary>
            Returns a string representation of the agent indented to the specified indent level
            </summary>
      <param name="indent">The indent to be used</param>
      <returns>A string representation of the agent indented to the specified indent level</returns>
    </member>
    <member name="M:Clarion.Framework.Agent.TryGetName(System.Guid)"></member>
    <member name="M:Clarion.Framework.Agent.UnregisterAsynchronousSimulatingEnvironment(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Templates.NewExternalActionChosenEventArgs})">
      <summary>
            Indicates to the agent that the specified simulating environment should no longer be notified asynchronously when a new external action is chosen
            </summary>
      <param name="subscriber">The class instance (from the simulating environment) that contains the external action chosen event handler</param>
    </member>
    <member name="P:Clarion.Framework.Agent.WorldID">
      <summary>
            Gets the world ID of the agent
            </summary>
    </member>
    <member name="T:Clarion.Framework.Agent.AgentParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.Agent" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.AgentParameters.#ctor(Clarion.Framework.Agent,System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.Agent" /></summary>
      <param name="agent">(optional) The <see cref="T:Clarion.Framework.Agent" /> class instance in which the parameters class is being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Agent.AgentParameters.#ctor(Clarion.Framework.Agent.AgentParameters,Clarion.Framework.Agent,System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.Agent" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="agent">(optional) The <see cref="T:Clarion.Framework.Agent" /> class instance in which the parameters class is being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.ACTUATION_TIME">
      <summary>
            Actuation time (used for calculating response time)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.ACTUATION_TIME_VARIABILITY_THRESHOLD">
      <summary>
            The variability threshold for actuation time
            </summary>
    </member>
    <member name="M:Clarion.Framework.Agent.AgentParameters.Global_OnParameterChanged(System.Object,Clarion.Framework.Core.ParameterChangeRequestedEventArgs)">
      <summary>
            The event method used for performing global parameter changes
            </summary>
      <param name="sender">The particular parameters class instance that initiated the global parameter change</param>
      <param name="e">The event args (i.e., the parameter that is to be set and the new value for that parameter)</param>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.IN_REAL_TIME">
      <summary>
            Specifies whether the agent should run in "real time" or "simulated time"
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.IsGlobal">
      <summary>
            Used to specify whether the particular instance of the parameters class is being used for global or local parameters
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.MAX_ACTIVATION">
      <summary>
            The maximum value for either the activations in the sensory information or the feedback that is perceived/received by the agent
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.MAX_RESPONSE_TIME">
      <summary>
            Gets the maximum response time
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.MIN_ACTIVATION">
      <summary>
            The minimum value for either the activations in the sensory information or the feedback that is perceived/received by the agent
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.ParameterChange_EventInvoked">
      <summary>
            Used to specify that a global parameter change event in in progress
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.PERCEPTION_TIME">
      <summary>
            Perception time (used for calculating response time)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.PERCEPTION_TIME_VARIABILITY_THRESHOLD">
      <summary>
            The variability threshold for perception time
            </summary>
    </member>
    <member name="P:Clarion.Framework.Agent.AgentParameters.PREVIOUS_RT_CAPACITY">
      <summary>
            The number of previous time stamps that are tracked (for the purpose of reporting response times)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Agent.InternalContainers">
      <summary>
            The list of internal "containers" in which <see cref="T:Clarion.Framework.Core.ICommitable" /> (i.e., functional) objects are
            stored within the agent
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalContainers.DRIVES">
      <summary>
            Specifies the "container" for the bottom level of the MS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalContainers.ACTION_RULES">
      <summary>
            Specifies the "container" for the top level of the ACS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalContainers.IMPLICIT_DECISION_NETWORKS">
      <summary>
            Specifies the "container" for the bottom level of the ACS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalContainers.ASSOCIATIVE_RULES">
      <summary>
            Specifies the "container" for the top level of the NACS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalContainers.ASSOCIATIVE_MEMORY_NETWORKS">
      <summary>
            Specifies the "container" for the bottom level of the NACS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalContainers.ASSOCIATIVE_EPISODIC_MEMORY_NETWORKS">
      <summary>
            Specifies the "container" for the bottom level of episodic memory (in the NACS)
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalContainers.META_COGNITIVE_MODULES">
      <summary>
            Specifies the "container" for meta-cognitive modules (in the MCS)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Agent.InternalWorldObjectContainers">
      <summary>
            The list of internal "containers" in which <see cref="T:Clarion.Framework.Core.IWorldObject" /> (i.e., descriptive) knowledge is
            stored within the agent
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalWorldObjectContainers.GOAL_STRUCTURE">
      <summary>
            Specifies the "container" used for storing goals within an agent (located in the top level of the MS)
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalWorldObjectContainers.GENERAL_KNOWLEDGE">
      <summary>
            Specifies the "container" used for storing general knowledge (located in the top level of the NACS)
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalWorldObjectContainers.WORKING_MEMORY">
      <summary>
            Specifies the "container" used for storing working memory chunks (located in the top level of the ACS)
            </summary>
    </member>
    <member name="F:Clarion.Framework.Agent.InternalWorldObjectContainers.META_INFO">
      <summary>
            Specifies the "container" used for storing agent meta info
            </summary>
    </member>
    <member name="T:Clarion.Framework.AutonomyDrive">
      <summary>
            This class implements an autonomy drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.AutonomyDrive.#ctor(System.Guid,Clarion.Framework.AutonomyDrive.AutonomyDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes an autonomy drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.AutonomyDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>AutonomyDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.AutonomyDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>AutonomyDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.AutonomyDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.AutonomyDrive.AutonomyDriveFactory">
      <summary>
            The factory class for generating an autonomy drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.AutonomyDrive.AutonomyDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.AutonomyDrive.AutonomyDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.AutonomyDrive.AutonomyDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.AutonomyDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A autonomy drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.AutonomyDrive.AutonomyDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.AutonomyDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.AutonomyDrive.AutonomyDriveParameters.#ctor(Clarion.Framework.AutonomyDrive.AutonomyDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.AutonomyDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.AutonomyDrive.AutonomyDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.AutonomyDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.AutonomyDrive.AutonomyDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.AutonomyDrive.AutonomyDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.AutonomyDrive.AutonomyDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.AutonomyDrive.AutonomyDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.AvoidingPhysicalDangerDrive">
      <summary>
            This class implements an avoiding physical danger drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.AvoidingPhysicalDangerDrive.#ctor(System.Guid,Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes an avoiding physical danger drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.AvoidingPhysicalDangerDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>AvoidingPhysicalDangerDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.AvoidingPhysicalDangerDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>AvoidingPhysicalDangerDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.AvoidingPhysicalDangerDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveFactory">
      <summary>
            The factory class for generating an avoiding physical danger drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.AvoidingPhysicalDangerDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A avoiding physical danger drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.AvoidingPhysicalDangerDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveParameters.#ctor(Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.AvoidingPhysicalDangerDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.AvoidingPhysicalDangerDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.AvoidingPhysicalDangerDrive.AvoidingPhysicalDangerDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.AvoidingUnpleasantStimuliDrive">
      <summary>
            This class implements an avoiding unpleasant stimuli drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.AvoidingUnpleasantStimuliDrive.#ctor(System.Guid,Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes an avoiding unpleasant stimuli drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.AvoidingUnpleasantStimuliDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>AvoidingUnpleasantStimuliDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.AvoidingUnpleasantStimuliDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>AvoidingUnpleasantStimuliDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.AvoidingUnpleasantStimuliDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveFactory">
      <summary>
            The factory class for generating an avoiding unpleasant stimuli drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.AvoidingUnpleasantStimuliDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A avoiding unpleasant stimuli drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.AvoidingUnpleasantStimuliDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveParameters.#ctor(Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.AvoidingUnpleasantStimuliDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.AvoidingUnpleasantStimuliDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.AvoidingUnpleasantStimuliDrive.AvoidingUnpleasantStimuliDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.BPNetwork">
      <summary>
            This class implements a 3-layer backpropagation neural network in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.#ctor(Clarion.Framework.BPNetwork.BPNetworkParameters,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            Initializes a backpropagation network
            </summary>
      <param name="pars">The parameters class containing the local parameters for the backpropagation network</param>
      <param name="elChecker">(optional) Used for specifying a user-defined method for checking the eligibility of a neural network</param>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.Commit">
      <summary>
            Commits the backpropagation network
            </summary>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.ComputeHiddenActivation">
      <summary>
            Computes the hidden layer activation
            </summary>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.ComputeOutputActivation">
      <summary>
            Computes the output layer activation
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.DesiredOutput">
      <summary>
            Sets the desired output for the backpropagation network
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.Factory">
      <summary>
            Gets the <see cref="T:Clarion.Framework.BPNetwork.BPNetworkFactory">factory</see> used for generating <c>BPNetwork</c> components
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>BPNetwork</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.Learn">
      <summary>
            Updates the network using standard backpropagation
            </summary>
      <exception cref="T:System.InvalidOperationException">If the backpropagation network has not been committed before this method is called</exception>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.ModifyHiddenToOutput">
      <summary>
            Modifies the dWeights of the hidden to output layer
            </summary>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.ModifyInputToHidden">
      <summary>
            Modifies the dWeights of the input to hidden layer
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.Parameters">
      <summary>
            Gets the local parameters for this backpropagation network
            </summary>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.Retract"></member>
    <member name="T:Clarion.Framework.BPNetwork.BPNetworkFactory">
      <summary>
            The factory class for generating 3-layer backpropagation neural networks
            </summary>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.BPNetworkFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.BPNetwork.BPNetworkFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.BPNetworkFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.BPNetwork" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the backpropagation network</param>
      <returns>A backpropagation network initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.BPNetwork.BPNetworkParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.BPNetwork" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.BPNetworkParameters.#ctor(Clarion.Framework.BPNetwork.BPNetworkParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.BPNetwork" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.BPNetwork.BPNetworkParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.BPNetwork" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.BPNetworkParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.BPNetworkParameters.INITIAL_THRESHOLDS_LOWER_BOUND">
      <summary>
            The low bound for the initial threshold
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.BPNetworkParameters.INITIAL_THRESHOLDS_UPPER_BOUND">
      <summary>
            The upper bound for the initial threshold
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.BPNetworkParameters.INITIAL_WEIGHTS_LOWER_BOUND">
      <summary>
            The low bound for the initial dWeights
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.BPNetworkParameters.INITIAL_WEIGHTS_UPPER_BOUND">
      <summary>
            The upper bound for the initial dWeights
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.BPNetworkParameters.LEARNING_RATE">
      <summary>
            The learning rate (used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.BPNetworkParameters.MOMENTUM">
      <summary>
            The momentum (used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.BPNetwork.BPNetworkParameters.R_ZERO">
      <summary>
            The error tolerance (used for learning)
            </summary>
    </member>
    <member name="T:Clarion.Framework.ConservationDrive">
      <summary>
            This class implements a conservation drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.ConservationDrive.#ctor(System.Guid,Clarion.Framework.ConservationDrive.ConservationDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a conservation drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.ConservationDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>ConservationDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.ConservationDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>ConservationDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.ConservationDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.ConservationDrive.ConservationDriveFactory">
      <summary>
            The factory class for generating a conservation drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.ConservationDrive.ConservationDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.ConservationDrive.ConservationDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.ConservationDrive.ConservationDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.ConservationDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A conservation drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.ConservationDrive.ConservationDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.ConservationDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.ConservationDrive.ConservationDriveParameters.#ctor(Clarion.Framework.ConservationDrive.ConservationDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.ConservationDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.ConservationDrive.ConservationDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.ConservationDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.ConservationDrive.ConservationDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.ConservationDrive.ConservationDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.ConservationDrive.ConservationDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.ConservationDrive.ConservationDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.CuriosityDrive">
      <summary>
            This class implements a curiosity drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.CuriosityDrive.#ctor(System.Guid,Clarion.Framework.CuriosityDrive.CuriosityDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a curiosity drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.CuriosityDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>CuriosityDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.CuriosityDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>CuriosityDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.CuriosityDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.CuriosityDrive.CuriosityDriveFactory">
      <summary>
            The factory class for generating a curiosity drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.CuriosityDrive.CuriosityDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.CuriosityDrive.CuriosityDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.CuriosityDrive.CuriosityDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.CuriosityDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A curiosity drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.CuriosityDrive.CuriosityDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.CuriosityDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.CuriosityDrive.CuriosityDriveParameters.#ctor(Clarion.Framework.CuriosityDrive.CuriosityDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.CuriosityDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.CuriosityDrive.CuriosityDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.CuriosityDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.CuriosityDrive.CuriosityDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.CuriosityDrive.CuriosityDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.CuriosityDrive.CuriosityDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.CuriosityDrive.CuriosityDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.DeclarativeChunk"></member>
    <member name="T:Clarion.Framework.DeferenceDrive">
      <summary>
            This class implements a deference drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.DeferenceDrive.#ctor(System.Guid,Clarion.Framework.DeferenceDrive.DeferenceDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a deference drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.DeferenceDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>DeferenceDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.DeferenceDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>DeferenceDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.DeferenceDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.DeferenceDrive.DeferenceDriveFactory">
      <summary>
            The factory class for generating a deference drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.DeferenceDrive.DeferenceDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.DeferenceDrive.DeferenceDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.DeferenceDrive.DeferenceDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.DeferenceDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A deference drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.DeferenceDrive.DeferenceDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.DeferenceDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.DeferenceDrive.DeferenceDriveParameters.#ctor(Clarion.Framework.DeferenceDrive.DeferenceDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.DeferenceDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.DeferenceDrive.DeferenceDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.DeferenceDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.DeferenceDrive.DeferenceDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.DeferenceDrive.DeferenceDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.DeferenceDrive.DeferenceDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.DeferenceDrive.DeferenceDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.DimensionValuePair">
      <summary>
            Implements a dimension-value pair within Clarion by specifying the IDs of the dimension and value.
            </summary>
    </member>
    <member name="P:Clarion.Framework.DimensionValuePair.AsDimensionValuePair">
      <summary>
            Gets the dimension-value representation
            </summary>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.CompareTo(Clarion.Framework.DimensionValuePair)">
      <summary>
            Compares the specified dimension-value pair to this dimension-value pair.
            </summary>
      <param name="dv">The dimension-value pair to compare to this dimension-value pair</param>
      <returns>
        <para>
          <c>-1</c> if the specified dimension-value pair is bigger than this dimension-value pair</para>
        <para>
          <c>0</c> if the two dimension-value pairs are equal</para>
        <para>
          <c>1</c> if this dimension-value pair is bigger than the specified dimension-value pair</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">If the specified dimension-value pair is null</exception>
      <exception cref="T:System.InvalidOperationException">If the specified dimension-value pair is not in the same dimension as this dimension-value pair</exception>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.CompareTo(System.Object)">
      <summary>
            Compares the specified object to this dimension-value pair.
            </summary>
      <param name="dv">The object to compare to this dimension-value pair</param>
      <returns>
        <para>
          <c>-1</c> if the specified object is bigger than this dimension-value pair</para>
        <para>
          <c>0</c> if the two dimension-value pairs are equal</para>
        <para>
          <c>1</c> if this dimension-value pair is bigger than the specified object</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">If the specified object is null</exception>
      <exception cref="T:System.InvalidOperationException">If the specified object is not of the type DimensionValuePair</exception>
    </member>
    <member name="P:Clarion.Framework.DimensionValuePair.Dimension">
      <summary>
            Gets the dimension ID for this dimension-value pair.
            </summary>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.Equals(Clarion.Framework.DimensionValuePair)">
      <summary>
            Checks to see if the specified dimension-value pair is equal to this dimension-value pair.
            <note type="implementnotes">
            This method only checks for "object" equality by comparing the world IDs. In other words, two dimension-value pairs are only 
            considered equal if they have the same world ID and are therefore the same object.
            </note></summary>
      <param name="dv">The dimension-value pair to check for equality</param>
      <returns>
        <c>True</c> if the specified dimension-value pair is equal to this dimension-value pair, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.Equals(System.Object)">
      <summary>
            Checks to see if the specified object is equal to this dimension-value pair.
            <note type="implementnotes">
            This method only checks for "object" equality by comparing the world IDs. In other words, two dimension-value pairs are only 
            considered equal if they have the same world ID and are therefore the same object.
            </note></summary>
      <param name="dv">The object to check for equality</param>
      <returns>
        <c>True</c> if the specified object is equal to this dimension-value pair, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.GetHashCode">
      <summary>
            Gets the hash value for this dimension-value pair.
            </summary>
      <returns>The hash value for this dimension-value pair</returns>
    </member>
    <member name="P:Clarion.Framework.DimensionValuePair.IsRepresentation">
      <summary>
            Specifies whether this is a dimension-value pair representation of a larger construct (such as a <see cref="T:Clarion.Framework.Core.Chunk" /> or <see cref="T:Clarion.Framework.Agent" />)
            </summary>
    </member>
    <member name="P:Clarion.Framework.DimensionValuePair.NULL_DV_PAIR"></member>
    <member name="M:Clarion.Framework.DimensionValuePair.op_Equality(Clarion.Framework.DimensionValuePair,Clarion.Framework.DimensionValuePair)">
      <summary>
            Overloads the "equals" operator for dimension-value pairs
            </summary>
      <param name="dv1">The dimension-value pair on the left-hand side of the "equals" operator</param>
      <param name="dv2">The dimension-value pair on the right-hand side of the "equals" operator</param>
      <returns>
        <c>True</c> if the dimension-value pairs are equal, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.op_GreaterThan(Clarion.Framework.DimensionValuePair,Clarion.Framework.DimensionValuePair)">
      <summary>
            Overloads the "greater than" operator for dimension-value pairs
            </summary>
      <param name="dv1">The dimension-value pair on the left-hand side of the "greater than" operator</param>
      <param name="dv2">The dimension-value pair on the right-hand side of the "greater than" operator</param>
      <returns>
        <c>True</c> if the left-hand dimension-value pair is greater-than the right-hand dimension-value pair, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.op_GreaterThanOrEqual(Clarion.Framework.DimensionValuePair,Clarion.Framework.DimensionValuePair)">
      <summary>
            Overloads the "greater than or equals" operator for dimension-value pairs
            </summary>
      <param name="dv1">The dimension-value pair on the left-hand side of the "greater than or equals" operator</param>
      <param name="dv2">The dimension-value pair on the right-hand side of the "greater than or equals" operator</param>
      <returns>
        <c>True</c> if the left-hand dimension-value pair is greater-than or equal to the right-hand dimension-value pair, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.op_Inequality(Clarion.Framework.DimensionValuePair,Clarion.Framework.DimensionValuePair)">
      <summary>
            Overloads the "not equals" operator for dimension-value pairs
            </summary>
      <param name="dv1">The dimension-value pair on the left-hand side of the "not equals" operator</param>
      <param name="dv2">The dimension-value pair on the right-hand side of the "not equals" operator</param>
      <returns>
        <c>True</c> if the dimension-value pairs are not equal, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.op_LessThan(Clarion.Framework.DimensionValuePair,Clarion.Framework.DimensionValuePair)">
      <summary>
            Overloads the "less than" operator for dimension-value pairs
            </summary>
      <param name="dv1">The dimension-value pair on the left-hand side of the "less than" operator</param>
      <param name="dv2">The dimension-value pair on the right-hand side of the "less than" operator</param>
      <returns>
        <c>True</c> if the left-hand dimension-value pair is less-than the right-hand dimension-value pair, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.op_LessThanOrEqual(Clarion.Framework.DimensionValuePair,Clarion.Framework.DimensionValuePair)">
      <summary>
            Overloads the "less than or equals" operator for dimension-value pairs
            </summary>
      <param name="dv1">The dimension-value pair on the left-hand side of the "less than or equals" operator</param>
      <param name="dv2">The dimension-value pair on the right-hand side of the "less than or equals" operator</param>
      <returns>
        <c>True</c> if the left-hand dimension-value pair is less-than or equal to the right-hand dimension-value pair, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.ToString">
      <summary>
            Returns a String that represents this dimension-value pair.
            </summary>
      <returns>A String representation of this dimension-value pair.</returns>
    </member>
    <member name="M:Clarion.Framework.DimensionValuePair.ToString(System.String)">
      <summary>
            Returns a String that represents this dimension-value pair.
            </summary>
      <param name="indent">The indentation level to append to the string representation</param>
      <returns>A String representation of this dimension-value pair.</returns>
    </member>
    <member name="P:Clarion.Framework.DimensionValuePair.Value">
      <summary>
            Gets the value ID for this dimension-value pair.
            </summary>
    </member>
    <member name="P:Clarion.Framework.DimensionValuePair.WorldID">
      <summary>
            Gets the world ID for this dimension-value pair.
            </summary>
    </member>
    <member name="T:Clarion.Framework.DimensionValuePair`2">
      <summary>
            Implements a dimension-value pair within Clarion by specifying the IDs of the dimension and value.
            </summary>
    </member>
    <member name="P:Clarion.Framework.DimensionValuePair`2.Dimension"></member>
    <member name="P:Clarion.Framework.DimensionValuePair`2.Value"></member>
    <member name="T:Clarion.Framework.DistributedDimensionValuePair`1"></member>
    <member name="M:Clarion.Framework.DistributedDimensionValuePair`1.ToString"></member>
    <member name="T:Clarion.Framework.DominancePowerDrive">
      <summary>
            This class implements a dominance and power drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.DominancePowerDrive.#ctor(System.Guid,Clarion.Framework.DominancePowerDrive.DominancePowerDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a dominance and power drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.DominancePowerDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>DominancePowerDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.DominancePowerDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>DominancePowerDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.DominancePowerDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.DominancePowerDrive.DominancePowerDriveFactory">
      <summary>
            The factory class for generating a dominance and power drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.DominancePowerDrive.DominancePowerDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.DominancePowerDrive.DominancePowerDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.DominancePowerDrive.DominancePowerDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.DominancePowerDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A dominance and power drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.DominancePowerDrive.DominancePowerDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.DominancePowerDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.DominancePowerDrive.DominancePowerDriveParameters.#ctor(Clarion.Framework.DominancePowerDrive.DominancePowerDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.DominancePowerDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.DominancePowerDrive.DominancePowerDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.DominancePowerDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.DominancePowerDrive.DominancePowerDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.DominancePowerDrive.DominancePowerDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.DominancePowerDrive.DominancePowerDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.DominancePowerDrive.DominancePowerDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.Episode"></member>
    <member name="M:Clarion.Framework.Episode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Episode" /> class</summary>
    </member>
    <member name="T:Clarion.Framework.ExternalActionChunk"></member>
    <member name="P:Clarion.Framework.ExternalActionChunk.DO_NOTHING"></member>
    <member name="T:Clarion.Framework.FairnessDrive">
      <summary>
            This class implements a fairness drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.FairnessDrive.#ctor(System.Guid,Clarion.Framework.FairnessDrive.FairnessDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a fairness drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.FairnessDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>FairnessDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.FairnessDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>FairnessDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.FairnessDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.FairnessDrive.FairnessDriveFactory">
      <summary>
            The factory class for generating a fairness drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.FairnessDrive.FairnessDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.FairnessDrive.FairnessDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.FairnessDrive.FairnessDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.FairnessDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A fairness drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.FairnessDrive.FairnessDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.FairnessDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.FairnessDrive.FairnessDriveParameters.#ctor(Clarion.Framework.FairnessDrive.FairnessDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.FairnessDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.FairnessDrive.FairnessDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.FairnessDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.FairnessDrive.FairnessDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.FairnessDrive.FairnessDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.FairnessDrive.FairnessDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.FairnessDrive.FairnessDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.FixedAssociativeRule">
      <summary>
            This class implements a fixed associative rule in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.FixedAssociativeRule.CalculateSupport(Clarion.Framework.ActivationCollection)"></member>
    <member name="M:Clarion.Framework.FixedAssociativeRule.CheckDeletion(System.Int64)"></member>
    <member name="M:Clarion.Framework.FixedAssociativeRule.Covers(Clarion.Framework.Core.Rule)"></member>
    <member name="M:Clarion.Framework.FixedAssociativeRule.Equals(Clarion.Framework.Core.Rule)"></member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.Factory"></member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>FixedAssociativeRule</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.Parameters">
      <summary>
            Gets the local parameters for this fixed associative rule
            </summary>
    </member>
    <member name="T:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleFactory">
      <summary>
            The factory for generating fixed associative rules
            </summary>
    </member>
    <member name="M:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleFactory.Generate(System.Object[])">
      <summary>
            Generates fixed associative rules
            </summary>
    </member>
    <member name="T:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters">
      <summary>
            This is the parameters class the <see cref="T:Clarion.Framework.FixedAssociativeRule" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.#ctor(Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.FixedAssociativeRule" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.FixedAssociativeRule" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.C">
      <summary>
            Constant c (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.D">
      <summary>
            Constant d (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.DEFAULT_PARTIAL_MATCH_OFF_THRESHOLD">
      <summary>
            The threshold value when partial match is turned OFF
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.DEFAULT_PARTIAL_MATCH_ON_THRESHOLD">
      <summary>
            The threshold value when partial match is turned ON
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.DELETABLE_BY_DENSITY">
      <summary>
            A flag indicating whether or not a fixed associative rule can be deleted using deletion by density
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.DELETION_DENSITY">
      <summary>
            The density (the minimum frequency in which a rule must be eligible in order for it to be kept)
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.INITIAL_BLA">
      <summary>
            The initial BLA
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.PARTIAL_MATCH_ON">
      <summary>
            Turns partial match on/off for calculating a rule's support
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.PARTIAL_MATCH_THRESHOLD">
      <summary>
            The threshold the support calculation must pass for the condition of a rule to be matched
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedAssociativeRule.FixedAssociativeRuleParameters.WEIGHT">
      <summary>
            The weight (for calculating support)
            </summary>
    </member>
    <member name="T:Clarion.Framework.FixedRule">
      <summary>
            This class implements a fixed rule in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.FixedRule.CalculateSupport(Clarion.Framework.ActivationCollection)"></member>
    <member name="M:Clarion.Framework.FixedRule.CalculateUtility(System.Double,System.Double)"></member>
    <member name="M:Clarion.Framework.FixedRule.CheckDeletion(System.Int64)"></member>
    <member name="M:Clarion.Framework.FixedRule.Covers(Clarion.Framework.Core.Rule)"></member>
    <member name="M:Clarion.Framework.FixedRule.Equals(Clarion.Framework.Core.Rule)"></member>
    <member name="P:Clarion.Framework.FixedRule.Factory"></member>
    <member name="P:Clarion.Framework.FixedRule.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>FixedRule</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.Parameters">
      <summary>
            Gets the local parameters for this fixed rule
            </summary>
    </member>
    <member name="T:Clarion.Framework.FixedRule.FixedRuleFactory">
      <summary>
            The factory for generating fixed rules
            </summary>
    </member>
    <member name="M:Clarion.Framework.FixedRule.FixedRuleFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.FixedRule.FixedRuleFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.FixedRule.FixedRuleFactory.Generate(System.Object[])">
      <summary>
            Generates fixed rules
            </summary>
    </member>
    <member name="T:Clarion.Framework.FixedRule.FixedRuleParameters">
      <summary>
            This is the parameters class the <see cref="T:Clarion.Framework.FixedRule" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.FixedRule.FixedRuleParameters.#ctor(Clarion.Framework.FixedRule.FixedRuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.FixedRule" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.FixedRule.FixedRuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.FixedRule" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.BENEFIT_CONSTANT">
      <summary>
            The constant to use for benefit when using the constant option for utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.C">
      <summary>
            Constant c (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.C7">
      <summary>
            Benefit equation constant C7
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.C8">
      <summary>
            Benefit equation constant C8
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.COST_CONSTANT">
      <summary>
            The constant to use for cost when using the constant option for utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.D">
      <summary>
            Constant d (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.DEFAULT_PARTIAL_MATCH_OFF_THRESHOLD">
      <summary>
            The threshold value when partial match is turned OFF
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.DEFAULT_PARTIAL_MATCH_ON_THRESHOLD">
      <summary>
            The threshold value when partial match is turned ON
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.DELETABLE_BY_DENSITY">
      <summary>
            A flag indicating whether or not a fixed rule can be deleted using deletion by density
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.DELETION_DENSITY">
      <summary>
            The density (the minimum frequency in which a rule must be eligible in order for it to be kept)
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.INITIAL_BLA">
      <summary>
            The initial BLA
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.PARTIAL_MATCH_ON">
      <summary>
            Turns partial match on/off for calculating a rule's support
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.PARTIAL_MATCH_THRESHOLD">
      <summary>
            The threshold the support calculation must pass for the condition of a rule to be matched
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.SELECTION_TYPE">
      <summary>
            The selection type to use for the selection measure of the rule
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.UTILITY_OPTION">
      <summary>
            Specifies the method to use for calculating utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.V">
      <summary>
            The cost scaling factor (used to calculate utility)
            </summary>
    </member>
    <member name="P:Clarion.Framework.FixedRule.FixedRuleParameters.WEIGHT">
      <summary>
            The weight (for calculating support)
            </summary>
    </member>
    <member name="T:Clarion.Framework.FoodDrive">
      <summary>
            This class implements a food drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.FoodDrive.#ctor(System.Guid,Clarion.Framework.FoodDrive.FoodDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a food drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.FoodDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>FoodDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.FoodDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>FoodDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.FoodDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.FoodDrive.FoodDriveFactory">
      <summary>
            The factory class for generating a food drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.FoodDrive.FoodDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.FoodDrive.FoodDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.FoodDrive.FoodDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.FoodDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A food drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.FoodDrive.FoodDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.FoodDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.FoodDrive.FoodDriveParameters.#ctor(Clarion.Framework.FoodDrive.FoodDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.FoodDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.FoodDrive.FoodDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.FoodDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.FoodDrive.FoodDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.FoodDrive.FoodDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.FoodDrive.FoodDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.FoodDrive.FoodDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.GeneralKnowledgeStore"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Add(Clarion.Framework.Agent)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Add(Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Add(Clarion.Framework.Core.ChunkTuple)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Add(System.Guid)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Clear"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Contains(Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Contains(Clarion.Framework.Core.ChunkTuple)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Contains(System.Guid)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.ContainsKey(Clarion.Framework.DimensionValuePair)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.ContainsKey(System.Guid)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.CopyTo(Clarion.Framework.Core.ChunkTuple[],System.Int32)"></member>
    <member name="P:Clarion.Framework.GeneralKnowledgeStore.Count"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.GetEnumerator"></member>
    <member name="P:Clarion.Framework.GeneralKnowledgeStore.IsReadOnly"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Remove(Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Remove(Clarion.Framework.Core.ChunkTuple)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.Remove(System.Guid)"></member>
    <member name="M:Clarion.Framework.GeneralKnowledgeStore.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:Clarion.Framework.GoalChunk"></member>
    <member name="T:Clarion.Framework.GoalStructure"></member>
    <member name="M:Clarion.Framework.GoalStructure.Add(Clarion.Framework.Core.GoalChunkTuple)"></member>
    <member name="M:Clarion.Framework.GoalStructure.Add(Clarion.Framework.GoalChunk,System.Double,System.Int64)"></member>
    <member name="M:Clarion.Framework.GoalStructure.Clear"></member>
    <member name="M:Clarion.Framework.GoalStructure.Contains(Clarion.Framework.Core.GoalChunkTuple)"></member>
    <member name="M:Clarion.Framework.GoalStructure.Contains(Clarion.Framework.GoalChunk)"></member>
    <member name="M:Clarion.Framework.GoalStructure.Contains(System.Guid)"></member>
    <member name="M:Clarion.Framework.GoalStructure.CopyTo(Clarion.Framework.Core.GoalChunkTuple[],System.Int32)"></member>
    <member name="P:Clarion.Framework.GoalStructure.Count"></member>
    <member name="P:Clarion.Framework.GoalStructure.CurrentGoal"></member>
    <member name="M:Clarion.Framework.GoalStructure.GetEnumerator"></member>
    <member name="P:Clarion.Framework.GoalStructure.IsReadOnly"></member>
    <member name="P:Clarion.Framework.GoalStructure.Item(Clarion.Framework.GoalChunk)"></member>
    <member name="P:Clarion.Framework.GoalStructure.Item(System.Guid)"></member>
    <member name="P:Clarion.Framework.GoalStructure.Item(System.Int64)"></member>
    <member name="M:Clarion.Framework.GoalStructure.Remove(Clarion.Framework.Core.GoalChunkTuple)"></member>
    <member name="M:Clarion.Framework.GoalStructure.Remove(Clarion.Framework.GoalChunk)"></member>
    <member name="M:Clarion.Framework.GoalStructure.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:Clarion.Framework.GoalStructure.RecognizedActions"></member>
    <member name="F:Clarion.Framework.GoalStructure.RecognizedActions.RESET_ALL"></member>
    <member name="F:Clarion.Framework.GoalStructure.RecognizedActions.SET_RESET"></member>
    <member name="F:Clarion.Framework.GoalStructure.RecognizedActions.RESET"></member>
    <member name="F:Clarion.Framework.GoalStructure.RecognizedActions.SET"></member>
    <member name="T:Clarion.Framework.GoalStructureUpdateActionChunk"></member>
    <member name="M:Clarion.Framework.GoalStructureUpdateActionChunk.Add(Clarion.Framework.GoalStructure.RecognizedActions,Clarion.Framework.GoalChunk[])"></member>
    <member name="M:Clarion.Framework.GoalStructureUpdateActionChunk.Contains(Clarion.Framework.GoalStructure.RecognizedActions,Clarion.Framework.GoalChunk)"></member>
    <member name="M:Clarion.Framework.GoalStructureUpdateActionChunk.ContainsAction(Clarion.Framework.GoalStructure.RecognizedActions)"></member>
    <member name="M:Clarion.Framework.GoalStructureUpdateActionChunk.ContainsAction(Clarion.Framework.GoalStructure.RecognizedActions,System.Double)"></member>
    <member name="M:Clarion.Framework.GoalStructureUpdateActionChunk.ContainsActionAsNOTActivated(Clarion.Framework.GoalStructure.RecognizedActions)"></member>
    <member name="M:Clarion.Framework.GoalStructureUpdateActionChunk.GetActionWeight(Clarion.Framework.GoalStructure.RecognizedActions)"></member>
    <member name="P:Clarion.Framework.GoalStructureUpdateActionChunk.Item(Clarion.Framework.GoalStructure.RecognizedActions,Clarion.Framework.GoalChunk)"></member>
    <member name="M:Clarion.Framework.GoalStructureUpdateActionChunk.Remove(Clarion.Framework.GoalStructure.RecognizedActions,Clarion.Framework.GoalChunk[])"></member>
    <member name="M:Clarion.Framework.GoalStructureUpdateActionChunk.SetActionAsNOTActivated(Clarion.Framework.GoalStructure.RecognizedActions)">
      <summary>
            Specifies that the action <b>MUST</b> contain <b>NO</b> activated values
            </summary>
      <param name="action">The action to be set</param>
    </member>
    <member name="M:Clarion.Framework.GoalStructureUpdateActionChunk.SetActionWeight(Clarion.Framework.GoalStructure.RecognizedActions,System.Double)"></member>
    <member name="T:Clarion.Framework.HonorDrive">
      <summary>
            This class implements an honor drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.HonorDrive.#ctor(System.Guid,Clarion.Framework.HonorDrive.HonorDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes an honor drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.HonorDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>HonorDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.HonorDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>HonorDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.HonorDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.HonorDrive.HonorDriveFactory">
      <summary>
            The factory class for generating an honor drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.HonorDrive.HonorDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.HonorDrive.HonorDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.HonorDrive.HonorDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.HonorDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A honor drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.HonorDrive.HonorDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.HonorDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.HonorDrive.HonorDriveParameters.#ctor(Clarion.Framework.HonorDrive.HonorDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.HonorDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.HonorDrive.HonorDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.HonorDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.HonorDrive.HonorDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.HonorDrive.HonorDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.HonorDrive.HonorDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.HonorDrive.HonorDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.HopfieldNetwork"></member>
    <member name="M:Clarion.Framework.HopfieldNetwork.#ctor(Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for a Hopfield Network
            </summary>
      <param name="pars">The parameters class containing the local parameters for the Hopfield network</param>
      <param name="elChecker">(optional) Used for specifying a user-defined method for checking the eligibility of a trainable implicit component</param>
    </member>
    <member name="M:Clarion.Framework.HopfieldNetwork.Commit">
      <summary>
            Commits the Hopfield network
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.DesiredOutput">
      <summary>
            Sets the "desired pattern" that is to be "encoded" into the Hopfield network
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.Factory">
      <summary>
            Gets the factory for the <see cref="T:Clarion.Framework.HopfieldNetwork" /> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>HopfieldNetwork</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.Input">
      <summary>
            Simply gets the nodes of the Hopfield network (since conceptually Hopfield networks do not have an input layer)
            </summary>
    </member>
    <member name="M:Clarion.Framework.HopfieldNetwork.Learn">
      <summary>
            Performs one round of learning for the Hopfield network (using the NDRAM variation of Hebbian learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.Nodes">
      <summary>
            Gets the nodes of the Hopfield network
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.Output">
      <summary>
            Simply gets the nodes of the Hopfield network (since conceptually Hopfield networks do not have an output layer)
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.Parameters">
      <summary>
            Gets the local parameters for this Hopfield network
            </summary>
    </member>
    <member name="M:Clarion.Framework.HopfieldNetwork.PropagateActivation">
      <summary>
            Calculates the settled activations of the Hopfield network given an initial activation
            </summary>
    </member>
    <member name="M:Clarion.Framework.HopfieldNetwork.Retract">
      <summary>
            Retracts the Hopfield network
            </summary>
    </member>
    <member name="T:Clarion.Framework.HopfieldNetwork.HopfieldNetworkFactory"></member>
    <member name="M:Clarion.Framework.HopfieldNetwork.HopfieldNetworkFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.HopfieldNetwork.HopfieldNetworkFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.HopfieldNetwork.HopfieldNetworkFactory.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.HopfieldNetwork" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.#ctor(Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.HopfieldNetwork" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.HopfieldNetwork" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.ETA">
      <summary>
            The eta value
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.ETA_PRECISION">
      <summary>
            The precision in which eta is to be calculated
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.MEMORY_EFFICIENCY_ZETA">
      <summary>
            The memory efficiency zeta
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.NUMBER_TRANSMISSION_SPINS">
      <summary>
            The number of transmission spins to use (when using the <see cref="F:Clarion.Framework.HopfieldNetwork.TransmissionOptions.N_SPINS">N_SPINS&gt;</see> transmission option)
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.TRANSMISSION_DELTA">
      <summary>
            The transmission delta
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.TRANSMISSION_EPSILON">
      <summary>
            The epsilon precision at which transmission is considered to have "settled" 
            (when using the <see cref="F:Clarion.Framework.HopfieldNetwork.TransmissionOptions.LET_SETTLE">LET_SETTLE&gt;</see> transmission option
            </summary>
    </member>
    <member name="P:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.TRANSMISSION_OPTION">
      <summary>
            The option to use for transmitting activation
            </summary>
    </member>
    <member name="T:Clarion.Framework.HopfieldNetwork.TransmissionOptions">
      <summary>
            The options available for transmitting activation through the network
            </summary>
    </member>
    <member name="F:Clarion.Framework.HopfieldNetwork.TransmissionOptions.LET_SETTLE">
      <summary>
            Specifies that the network should be allowed to settle during transmission
            </summary>
    </member>
    <member name="F:Clarion.Framework.HopfieldNetwork.TransmissionOptions.N_SPINS">
      <summary>
            Specifies that the network should perform N spins (as determined by <see cref="P:Clarion.Framework.HopfieldNetwork.HopfieldNetworkParameters.NUMBER_TRANSMISSION_SPINS" />) during transmission
            </summary>
    </member>
    <member name="T:Clarion.Framework.InputOutputLayer"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.Add(Clarion.Framework.Core.ActivationTuple,System.Object)"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.Add(Clarion.Framework.Core.IWorldObject,System.Object)"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.Add(System.Guid,System.Object)"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.AddRange(System.Collections.Generic.IEnumerable{Clarion.Framework.Core.ActivationTuple},System.Object)"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.AddRange(System.Collections.Generic.IEnumerable{Clarion.Framework.Core.IWorldObject},System.Object)"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.AddRange(System.Collections.Generic.IEnumerable{System.Guid},System.Object)"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.Clear"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.GetEnumerator"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.GetHashCode"></member>
    <member name="P:Clarion.Framework.InputOutputLayer.IsReadOnly"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.Remove(System.Guid)"></member>
    <member name="M:Clarion.Framework.InputOutputLayer.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:Clarion.Framework.IRLRule">
      <summary>
            This class implements an IRL rule in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.IRLRule.#ctor(Clarion.Framework.IRLRule.IRLRuleParameters,Clarion.Framework.Core.ActionChunk,Clarion.Framework.Templates.SupportCalculator,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.RuleGeneralizer{Clarion.Framework.IRLRule},Clarion.Framework.Templates.RuleSpecializer{Clarion.Framework.IRLRule},Clarion.Framework.Templates.DeletionChecker,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.IRLRule" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.IRLRule.CalculateSupport(Clarion.Framework.ActivationCollection)"></member>
    <member name="P:Clarion.Framework.IRLRule.Factory"></member>
    <member name="P:Clarion.Framework.IRLRule.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>IRLRule</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.Parameters">
      <summary>
            Gets the local parameters for this IRL rule
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.Variations"></member>
    <member name="T:Clarion.Framework.IRLRule.IRLRuleFactory">
      <summary>
            The factory class for generating IRL rules
            </summary>
    </member>
    <member name="M:Clarion.Framework.IRLRule.IRLRuleFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.IRLRule.IRLRuleFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.IRLRule.IRLRuleFactory.Generate(System.Object[])">
      <summary>
            Generates IRL rules
            </summary>
    </member>
    <member name="T:Clarion.Framework.IRLRule.IRLRuleParameters">
      <summary>
            This is the parameters class the <see cref="T:Clarion.Framework.IRLRule" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.IRLRule.IRLRuleParameters.#ctor(Clarion.Framework.IRLRule.IRLRuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.RefineableActionRule" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.IRLRule.IRLRuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.IRLRule" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.BENEFIT_CONSTANT">
      <summary>
            The constant to use for benefit when using the constant option for utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.C">
      <summary>
            Constant c (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.C1">
      <summary>
            Constant C1 for Information Gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.C2">
      <summary>
            Constant C2 for Information Gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.C7">
      <summary>
            Benefit equation constant C7
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.C8">
      <summary>
            Benefit equation constant C8
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.COST_CONSTANT">
      <summary>
            The constant to use for cost when using the constant option for utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.D">
      <summary>
            Constant d (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.DEFAULT_PARTIAL_MATCH_OFF_THRESHOLD">
      <summary>
            The threshold value when partial match is turned OFF
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.DEFAULT_PARTIAL_MATCH_ON_THRESHOLD">
      <summary>
            The threshold value when partial match is turned ON
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.DELETION_DENSITY">
      <summary>
            The density (the minimum frequency in which a rule must be eligible in order for it to be kept)
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.GENERALIZATION_THRESHOLD_1">
      <summary>
            The threshold IG(C,All) must pass for a rule to be generalized
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.GENERALIZATION_THRESHOLD_2">
      <summary>
            The threshold IG(C',C) must pass for a rule to be generalized
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.INFORMATION_GAIN_OPTION">
      <summary>
            The option to use when calculation information gain for IG(C,ALL)
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.INITIAL_BLA">
      <summary>
            The initial BLA
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.PARTIAL_MATCH_ON">
      <summary>
            Turns partial match on/off for calculating a rule's support
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.PARTIAL_MATCH_THRESHOLD">
      <summary>
            The threshold the support calculation must pass for the condition of a rule to be matched
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.SELECTION_TYPE">
      <summary>
            The selection type to use for the selection measure of the rule
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.SPECIALIZATION_THRESHOLD_1">
      <summary>
            The threshold IG(C,All) must be below for a rule to be specialized
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.SPECIALIZATION_THRESHOLD_2">
      <summary>
            The threshold IG(C',C) must be below for a rule to be specialized
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.UTILITY_OPTION">
      <summary>
            Specifies the method to use for calculating utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.V">
      <summary>
            The cost scaling factor (used to calculate utility)
            </summary>
    </member>
    <member name="P:Clarion.Framework.IRLRule.IRLRuleParameters.WEIGHT">
      <summary>
            The weight (for calculating support)
            </summary>
    </member>
    <member name="T:Clarion.Framework.MetaCognitiveSubsystem">
      <summary>
            This class implements the Meta Cognitive Subsystem (MCS) in the Clarion Library
            </summary>
    </member>
    <member name="T:Clarion.Framework.MotivationalSubsystem">
      <summary>
            This class implements the Motivational Subsystem (MS) in the Clarion Library
            </summary>
    </member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.Clarion#Framework#Templates#IPublishes#SubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.Clarion#Framework#Templates#IPublishes#UnsubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.Clarion#Framework#Templates#ISubscribes#PublicationTimingsSpecifiedEventHandler"></member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.Clarion#Framework#Templates#ISubscribes#PublisherAvailableEventHandler"></member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.Clarion#Framework#Templates#ISubscribes#PublisherRemovedEventHandler"></member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>MotivationalSubsystem</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.MotivationalSubsystem.InvokeEvent(Clarion.Framework.Core.DriveStrengthsUpdatedEventArgs)"></member>
    <member name="M:Clarion.Framework.MotivationalSubsystem.InvokeEvent(Clarion.Framework.Core.GoalStructureUpdatedEventArgs)"></member>
    <member name="M:Clarion.Framework.MotivationalSubsystem.InvokeEvent(Clarion.Framework.Core.PerceivedSensoryInformationModifiedEventArgs)"></member>
    <member name="M:Clarion.Framework.MotivationalSubsystem.InvokeEvent(Clarion.Framework.Core.TimingHoldRequestedEventArgs)">
      <summary>
            Invokes an event using the <see cref="T:Clarion.Framework.Core.TimingHoldRequestedEventArgs" /></summary>
      <param name="e">The event args for the event that is being invoked</param>
    </member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.Parameters"></member>
    <member name="T:Clarion.Framework.MotivationalSubsystem.CurrentGoalActivationOptions">
      <summary>
            The activation options for the current goal
            </summary>
    </member>
    <member name="F:Clarion.Framework.MotivationalSubsystem.CurrentGoalActivationOptions.FULL">
      <summary>
            Specifies that a goal should be activated to its fullest extent when it is the current goal
            </summary>
    </member>
    <member name="F:Clarion.Framework.MotivationalSubsystem.CurrentGoalActivationOptions.ACTUAL">
      <summary>
            Specifies that a goal should be activated to the actual activation level (as specified when the goal was added to the goal structure)
            </summary>
    </member>
    <member name="T:Clarion.Framework.MotivationalSubsystem.DriveSystemSpecifications">
      <summary>
            The types of groups in which a drive may belong
            </summary>
    </member>
    <member name="F:Clarion.Framework.MotivationalSubsystem.DriveSystemSpecifications.APPROACH">
      <summary>
            Specifies that the drive belongs to the approach system (i.e., the BAS)
            </summary>
    </member>
    <member name="F:Clarion.Framework.MotivationalSubsystem.DriveSystemSpecifications.AVOIDANCE">
      <summary>
            Specifies that the drive belongs to the avoidance system (i.e., the BIS)
            </summary>
    </member>
    <member name="F:Clarion.Framework.MotivationalSubsystem.DriveSystemSpecifications.BOTH">
      <summary>
            Specifies that the drive belongs to both the approach and avoidance systems
            </summary>
    </member>
    <member name="F:Clarion.Framework.MotivationalSubsystem.DriveSystemSpecifications.UNSPECIFIED">
      <summary>
            Specifies that the drive does not belong to a system or that the system was not specified
            </summary>
    </member>
    <member name="T:Clarion.Framework.MotivationalSubsystem.GoalStructureBehaviorOptions">
      <summary>
            The options under which the goal structure can be made to behave
            </summary>
    </member>
    <member name="F:Clarion.Framework.MotivationalSubsystem.GoalStructureBehaviorOptions.LIST">
      <summary>
            Specifies that the goal structure should behave like a goal list
            </summary>
    </member>
    <member name="F:Clarion.Framework.MotivationalSubsystem.GoalStructureBehaviorOptions.STACK">
      <summary>
            Specifies that the goal structure should behave like a goal stack
            </summary>
    </member>
    <member name="T:Clarion.Framework.MotivationalSubsystem.MotivationalSubsystemParameters">
      <summary>
            This is parameters class for the <see cref="T:Clarion.Framework.MotivationalSubsystem" /> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.MotivationalSubsystemParameters.APPROACH_SYSTEM_GAIN">
      <summary>
            The gain for the approach drives
            </summary>
    </member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.MotivationalSubsystemParameters.AVOIDANCE_SYSTEM_GAIN">
      <summary>
            The gain for the avoidance drives
            </summary>
    </member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.MotivationalSubsystemParameters.CURRENT_GOAL_ACTIVATION_OPTION">
      <summary>
            The type of activation to use for the current goal
            </summary>
    </member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.MotivationalSubsystemParameters.GOAL_STRUCTURE_BEHAVIOR_OPTION">
      <summary>
            The type of behavior that will be exhibited by the goal structure
            </summary>
    </member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.MotivationalSubsystemParameters.GOAL_STRUCTURE_CAPACITY">
      <summary>
            The maximum number of slots for the goal structure (i.e., the maximum number of goals that can be in the goals structure)
            </summary>
    </member>
    <member name="P:Clarion.Framework.MotivationalSubsystem.MotivationalSubsystemParameters.UNSPECIFIED_SYSTEM_GAIN">
      <summary>
            The gain for drives whose behavioral system has not been specified
            </summary>
    </member>
    <member name="T:Clarion.Framework.NonActionCenteredSubsystem">
      <summary>
            This class implements the Non Action Centered Subsystem (NACS) in the Clarion Library
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#IPublishes#SubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#IPublishes#UnsubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes#PublicationTimingsSpecifiedEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes#PublisherAvailableEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes#PublisherRemovedEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>NonActionCenteredSubsystem</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.NonActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.Emotion.GoalChunksConcludedEventArgs)"></member>
    <member name="M:Clarion.Framework.NonActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.Emotion.GoalChunksRetrievedEventArgs)"></member>
    <member name="M:Clarion.Framework.NonActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.LearningRequestedEventArgs)"></member>
    <member name="M:Clarion.Framework.NonActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.ReasoningCompletedEventArgs)"></member>
    <member name="M:Clarion.Framework.NonActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.RetrieveCompletedEventArgs)"></member>
    <member name="M:Clarion.Framework.NonActionCenteredSubsystem.InvokeEvent(Clarion.Framework.Core.TimingHoldRequestedEventArgs)"></member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.Parameters"></member>
    <member name="M:Clarion.Framework.NonActionCenteredSubsystem.PerformReasoning(Clarion.Framework.ActivationCollection)">
      <summary>
            Performs a round of reasoning given the specified input
            </summary>
      <param name="input">The input to use for reasoning</param>
      <returns>The conclusions from reasoning (along with their activations)</returns>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.PositiveMatchMethod">
      <summary>
            Sets the (optional) positive match determiner that can be used in-lieu of the default method for
            updating the match statistics for the top and bottom levels as a whole
            </summary>
    </member>
    <member name="T:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters">
      <summary>
            This is parameters class for the <see cref="T:Clarion.Framework.NonActionCenteredSubsystem" /> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.APPRAISAL_ITERATION_COUNT">
      <summary>
            Specifies the number of reasoning iterations to perform when doing appraisals
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.BOTTOM_LEVEL_WEIGHT">
      <summary>
            The weight by which bottom level activations are applied following a reasoning iteration
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.CONCLUSION_THRESHOLD">
      <summary>
            The threshold conclusions must pass to be inferred
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.DEFAULT_PARTIAL_MATCH_OFF_THRESHOLD">
      <summary>
            The threshold value when partial match is turned OFF (used for knowledge retrieval)
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.DEFAULT_PARTIAL_MATCH_ON_THRESHOLD">
      <summary>
            The threshold value when partial match is turned ON (used for knowledge retrieval)
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.K">
      <summary>
            The number of conclusions to be returned (when KWTA is used)
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.KWTA_SELECTION_TEMPERATURE">
      <summary>
            The temperature to use for stochastically selecting conclusions (when KWTA is used) 
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.OFFLINE_LEARNING_FREQUENCY">
      <summary>
            The frequency in which a check is made to see whether "offline" learning should occur
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.PARTIAL_MATCH_ON">
      <summary>
            Turns partial match on/off (used for knowledge retrieval)
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.PARTIAL_MATCH_THRESHOLD">
      <summary>
            The threshold a chunk strength must pass for the chunk to be matched
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.PERFORM_APPRAISAL">
      <summary>
            Specifies whether the NACS should perform appraisals
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.REASONING_ITERATION_COUNT">
      <summary>
            The number of reasoning iterations to perform
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.REASONING_ITERATION_TIME">
      <summary>
            The time (in milliseconds) that it takes to perform a reasoning iteration
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.RESET_BEFORE_REASONING_ROUND">
      <summary>
            Indicates whether the current state of the NACS's reasoning mechanism (as set by the previous round of reasoning) should be go before a new round of reasoning is started
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.RETURN_INPUTS_AS_CONCLUSIONS">
      <summary>
            Specifies whether chunks, included as part of the input into the NACS's reasoning mechanism, should be returned as part of the conclusions from reasoning
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.RULE_DELETION_FREQUENCY">
      <summary>
            The frequency in which associative rule deletion should occur
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.TOP_LEVEL_WEIGHT">
      <summary>
            The weight by which top level activations are applied following a reasoning iteration
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.USE_BOTTOM_LEVEL">
      <summary>
            Specifies whether or not the bottom level of the NACS's reasoning mechanism should be used
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.USE_KWTA">
      <summary>
            Specifies whether the "K Winner Take All" selection method should be used before conclusions are returned from reasoning
            </summary>
    </member>
    <member name="P:Clarion.Framework.NonActionCenteredSubsystem.NonActionCenteredSubsystemParameters.USE_TOP_LEVEL">
      <summary>
            Specifies whether or not the top level of the NACS's reasoning mechanism should be used
            </summary>
    </member>
    <member name="T:Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions"></member>
    <member name="F:Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions.NEW"></member>
    <member name="F:Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions.CONTINUE"></member>
    <member name="F:Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions.PEEK"></member>
    <member name="F:Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions.INTERRUPT"></member>
    <member name="T:Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions"></member>
    <member name="F:Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions.GET_KNOWLEDGE"></member>
    <member name="F:Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions.GET_EPISODE"></member>
    <member name="T:Clarion.Framework.NurturanceDrive">
      <summary>
            This class implements a nurturance drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.NurturanceDrive.#ctor(System.Guid,Clarion.Framework.NurturanceDrive.NurturanceDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a nurturance drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.NurturanceDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>NurturanceDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.NurturanceDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>NurturanceDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.NurturanceDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.NurturanceDrive.NurturanceDriveFactory">
      <summary>
            The factory class for generating a nurturance drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.NurturanceDrive.NurturanceDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.NurturanceDrive.NurturanceDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.NurturanceDrive.NurturanceDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.NurturanceDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A nurturance drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.NurturanceDrive.NurturanceDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.NurturanceDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.NurturanceDrive.NurturanceDriveParameters.#ctor(Clarion.Framework.NurturanceDrive.NurturanceDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.NurturanceDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.NurturanceDrive.NurturanceDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.NurturanceDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.NurturanceDrive.NurturanceDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.NurturanceDrive.NurturanceDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.NurturanceDrive.NurturanceDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.NurturanceDrive.NurturanceDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.ParameterChangeActionChunk"></member>
    <member name="T:Clarion.Framework.QBPNetwork">
      <summary>
            This class implements a Q-learning with backpropagation neural network in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.QBPNetwork.#ctor(Clarion.Framework.QBPNetwork.QBPNetworkParameters,Clarion.Framework.Templates.ExtractionChecker,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for a Q-learning backpropagation network
            </summary>
      <param name="pars">The parameters class containing the local parameters for the Q-learning network</param>
      <param name="extractionMethod">(optional) Used for specifying a user-defined method for determining whether a rule should be extracted</param>
      <param name="matchMethod">(optional) User defined method for determining whether the chosen output was a positive match</param>
      <param name="elChecker">(optional) Used for specifying a user-defined method for checking the eligibility of a Q-learning</param>
    </member>
    <member name="M:Clarion.Framework.QBPNetwork.CheckExtraction">
      <summary>
            Indicates whether or not a rule should be extracted from the Q-learning backpropagation network
            </summary>
      <returns>
        <c>True</c> if a rule should be extracted, otherwise <c>False</c></returns>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.Factory">
      <summary>
            Gets the factory used for generating <c>QBPNetwork</c> components
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>QBPNetwork</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.QBPNetwork.Learn">
      <summary>
            Updates the network using Q-learning with standard backpropagation
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.MaxQ">
      <summary>
            Gets the MaxQ value based on the new input
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.NewInput">
      <summary>
            Sets the next sensory information input (used to perform Q-learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.Parameters">
      <summary>
            Gets the local parameters for this Q-learning backpropagation network
            </summary>
    </member>
    <member name="T:Clarion.Framework.QBPNetwork.QBPNetworkFactory">
      <summary>
            The factory class for generating Q-learning backpropagation neural networks
            </summary>
    </member>
    <member name="M:Clarion.Framework.QBPNetwork.QBPNetworkFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.QBPNetwork.QBPNetworkFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.QBPNetwork.QBPNetworkFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.QBPNetwork" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the Q-learning backpropagation network</param>
      <returns>A Q-learning backpropagation network initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.QBPNetwork.QBPNetworkParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.QBPNetwork" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.QBPNetwork.QBPNetworkParameters.#ctor(Clarion.Framework.QBPNetwork.QBPNetworkParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.QBPNetwork" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.QBPNetwork.QBPNetworkParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.QBPNetwork" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.DISCOUNT">
      <summary>
            The discount factor
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.EXTRACTION_PROBABILITY">
      <summary>
            The extraction probability (i.e., the probability a rule will be extracted)
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.INITIAL_THRESHOLDS_LOWER_BOUND">
      <summary>
            The low bound for the initial threshold
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.INITIAL_THRESHOLDS_UPPER_BOUND">
      <summary>
            The upper bound for the initial threshold
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.INITIAL_WEIGHTS_LOWER_BOUND">
      <summary>
            The low bound for the initial dWeights
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.INITIAL_WEIGHTS_UPPER_BOUND">
      <summary>
            The upper bound for the initial dWeights
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.LEARNING_RATE">
      <summary>
            The learning rate (used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.MOMENTUM">
      <summary>
            The momentum (used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.QBPNetwork.QBPNetworkParameters.R_ZERO">
      <summary>
            The error tolerance (used for learning)
            </summary>
    </member>
    <member name="T:Clarion.Framework.ReasoningRequestActionChunk"></member>
    <member name="M:Clarion.Framework.ReasoningRequestActionChunk.Add(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions,System.Int32,System.Boolean)"></member>
    <member name="M:Clarion.Framework.ReasoningRequestActionChunk.Contains(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions,System.Int32)"></member>
    <member name="M:Clarion.Framework.ReasoningRequestActionChunk.ContainsAction(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions)"></member>
    <member name="M:Clarion.Framework.ReasoningRequestActionChunk.ContainsAction(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions,System.Double)"></member>
    <member name="M:Clarion.Framework.ReasoningRequestActionChunk.ContainsActionAsNOTActivated(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions)"></member>
    <member name="M:Clarion.Framework.ReasoningRequestActionChunk.GetActionWeight(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions)"></member>
    <member name="P:Clarion.Framework.ReasoningRequestActionChunk.Item(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions,System.Int32)"></member>
    <member name="M:Clarion.Framework.ReasoningRequestActionChunk.Remove(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions,System.Int32)"></member>
    <member name="M:Clarion.Framework.ReasoningRequestActionChunk.SetActionAsNOTActivated(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions)">
      <summary>
            Specifies that the action <b>MUST</b> contain <b>NO</b> activated values
            </summary>
      <param name="action">The action to be set</param>
    </member>
    <member name="M:Clarion.Framework.ReasoningRequestActionChunk.SetActionWeight(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions,System.Double)"></member>
    <member name="T:Clarion.Framework.RecognitionAchievementDrive">
      <summary>
            This class implements a recognition and achievement drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.RecognitionAchievementDrive.#ctor(System.Guid,Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a recognition and achievement drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.RecognitionAchievementDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>RecognitionAchievementDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.RecognitionAchievementDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>RecognitionAchievementDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.RecognitionAchievementDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveFactory">
      <summary>
            The factory class for generating a recognition and achievement drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.RecognitionAchievementDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A recognition and achievement drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.RecognitionAchievementDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveParameters.#ctor(Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.RecognitionAchievementDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.RecognitionAchievementDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.RecognitionAchievementDrive.RecognitionAchievementDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.RefineableActionRule">
      <summary>
            This class implements a refineable action rule in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.RefineableActionRule.#ctor(Clarion.Framework.Templates.RefineableActionRule{Clarion.Framework.RefineableActionRule}.RefineableActionRuleParameters,Clarion.Framework.Core.ActionChunk,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.RuleGeneralizer{Clarion.Framework.RefineableActionRule},Clarion.Framework.Templates.RuleSpecializer{Clarion.Framework.RefineableActionRule},Clarion.Framework.Templates.DeletionChecker,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.RefineableActionRule" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.RefineableActionRule.Factory"></member>
    <member name="T:Clarion.Framework.RefineableActionRule.RefineableActionRuleFactory">
      <summary>
            The factory class for generating refineable action rules
            </summary>
    </member>
    <member name="M:Clarion.Framework.RefineableActionRule.RefineableActionRuleFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.RefineableActionRule.RefineableActionRuleFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.RefineableActionRule.RefineableActionRuleFactory.Generate(System.Object[])">
      <summary>
            Generates refineable action rules
            </summary>
    </member>
    <member name="T:Clarion.Framework.RefineableAssociativeRule">
      <summary>
            This class implements a refineable associative rule in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.RefineableAssociativeRule.#ctor(Clarion.Framework.Templates.RefineableAssociativeRule{Clarion.Framework.RefineableAssociativeRule}.RefineableAssociativeRuleParameters,Clarion.Framework.Core.Chunk,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.RuleGeneralizer{Clarion.Framework.RefineableAssociativeRule},Clarion.Framework.Templates.RuleSpecializer{Clarion.Framework.RefineableAssociativeRule},Clarion.Framework.Templates.DeletionChecker,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.RefineableAssociativeRule" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.RefineableAssociativeRule.Factory"></member>
    <member name="T:Clarion.Framework.RefineableAssociativeRule.RefineableAssociativeRuleFactory">
      <summary>
            The factory for generating refineable associative rules
            </summary>
    </member>
    <member name="M:Clarion.Framework.RefineableAssociativeRule.RefineableAssociativeRuleFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.RefineableAssociativeRule.RefineableAssociativeRuleFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.RefineableAssociativeRule.RefineableAssociativeRuleFactory.Generate(System.Object[])">
      <summary>
            Generates refineable associative rules
            </summary>
    </member>
    <member name="T:Clarion.Framework.ReproductionDrive">
      <summary>
            This class implements a reproduction drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.ReproductionDrive.#ctor(System.Guid,Clarion.Framework.ReproductionDrive.ReproductionDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a reproduction drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.ReproductionDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>ReproductionDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.ReproductionDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>ReproductionDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.ReproductionDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.ReproductionDrive.ReproductionDriveFactory">
      <summary>
            The factory class for generating a reproduction drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.ReproductionDrive.ReproductionDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.ReproductionDrive.ReproductionDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.ReproductionDrive.ReproductionDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.ReproductionDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A reproduction drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.ReproductionDrive.ReproductionDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.ReproductionDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.ReproductionDrive.ReproductionDriveParameters.#ctor(Clarion.Framework.ReproductionDrive.ReproductionDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.ReproductionDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.ReproductionDrive.ReproductionDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.ReproductionDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.ReproductionDrive.ReproductionDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.ReproductionDrive.ReproductionDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.ReproductionDrive.ReproductionDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.ReproductionDrive.ReproductionDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.RestDrive">
      <summary>
            This class implements a rest drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.RestDrive.#ctor(System.Guid,Clarion.Framework.RestDrive.RestDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a rest drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.RestDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>RestDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.RestDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>RestDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.RestDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.RestDrive.RestDriveFactory">
      <summary>
            The factory class for generating a rest drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.RestDrive.RestDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.RestDrive.RestDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.RestDrive.RestDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.RestDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A rest drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.RestDrive.RestDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.RestDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.RestDrive.RestDriveParameters.#ctor(Clarion.Framework.RestDrive.RestDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.RestDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.RestDrive.RestDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.RestDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.RestDrive.RestDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.RestDrive.RestDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.RestDrive.RestDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.RestDrive.RestDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.RetrieveRequestActionChunk"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.Add(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions,Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.Add(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions,System.Collections.Generic.IEnumerable{Clarion.Framework.Core.IWorldObject})"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.Add(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions,System.Int64)"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.Contains(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions)"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.ContainsAction(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions)"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.ContainsAction(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions,System.Double)"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.ContainsActionAsNOTActivated(Clarion.Framework.NonActionCenteredSubsystem.RecognizedReasoningActions)"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.GetActionWeight(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions)"></member>
    <member name="P:Clarion.Framework.RetrieveRequestActionChunk.Item(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions)"></member>
    <member name="P:Clarion.Framework.RetrieveRequestActionChunk.Item(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions,Clarion.Framework.Core.IWorldObject)"></member>
    <member name="P:Clarion.Framework.RetrieveRequestActionChunk.Item(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions,System.Int64)"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.Remove(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions,Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.Remove(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions,System.Collections.Generic.IEnumerable{Clarion.Framework.Core.IWorldObject})"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.Remove(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions,System.Int64)"></member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.SetActionAsNOTActivated(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions)">
      <summary>
            Specifies that the action <b>MUST</b> contain <b>NO</b> activated values
            </summary>
      <param name="action">The action to be set</param>
    </member>
    <member name="M:Clarion.Framework.RetrieveRequestActionChunk.SetActionWeight(Clarion.Framework.NonActionCenteredSubsystem.RecognizedRetrieveActions,System.Double)"></member>
    <member name="T:Clarion.Framework.SensoryInformation"></member>
    <member name="M:Clarion.Framework.SensoryInformation.#ctor(Clarion.Framework.SensoryInformation)">
      <summary>
            Creates an exact duplicate copy of the specified sensory information
            </summary>
      <param name="i">the sensory information to be copied</param>
    </member>
    <member name="M:Clarion.Framework.SensoryInformation.Activate(Clarion.Framework.Core.IWorldObject,System.Double)"></member>
    <member name="M:Clarion.Framework.SensoryInformation.Activate(System.Guid,System.Double)"></member>
    <member name="M:Clarion.Framework.SensoryInformation.Add(Clarion.Framework.Core.ActivationTuple)"></member>
    <member name="M:Clarion.Framework.SensoryInformation.Add(Clarion.Framework.Core.IWorldObject,System.Double)"></member>
    <member name="M:Clarion.Framework.SensoryInformation.Add(System.Guid,System.Double)"></member>
    <member name="M:Clarion.Framework.SensoryInformation.AddRange(System.Collections.Generic.IEnumerable{Clarion.Framework.Core.ActivationTuple})"></member>
    <member name="M:Clarion.Framework.SensoryInformation.AddRange(System.Collections.Generic.IEnumerable{Clarion.Framework.Core.IWorldObject},System.Double)"></member>
    <member name="M:Clarion.Framework.SensoryInformation.AddRange(System.Collections.Generic.IEnumerable{System.Guid},System.Double)"></member>
    <member name="P:Clarion.Framework.SensoryInformation.AffiliatedAgent"></member>
    <member name="P:Clarion.Framework.SensoryInformation.AffiliatedAgentID"></member>
    <member name="M:Clarion.Framework.SensoryInformation.Deactivate(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.SensoryInformation.Deactivate(System.Guid)"></member>
    <member name="P:Clarion.Framework.SensoryInformation.Item(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="P:Clarion.Framework.SensoryInformation.Item(System.Guid)"></member>
    <member name="P:Clarion.Framework.SensoryInformation.Item(System.Object,System.IComparable)"></member>
    <member name="M:Clarion.Framework.SensoryInformation.op_Implicit(Clarion.Framework.SensoryInformation)~Clarion.Framework.InputOutputLayer"></member>
    <member name="P:Clarion.Framework.SensoryInformation.PropagateChanges">
      <summary>
            If this sensory information object is a copy, this specifies whether changes to the copy should propagate back to the original
            </summary>
    </member>
    <member name="M:Clarion.Framework.SensoryInformation.Remove(Clarion.Framework.Core.ActivationTuple)"></member>
    <member name="M:Clarion.Framework.SensoryInformation.Remove(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.SensoryInformation.Remove(System.Guid)"></member>
    <member name="P:Clarion.Framework.SensoryInformation.TimeStamp"></member>
    <member name="M:Clarion.Framework.SensoryInformation.ToString(System.String)"></member>
    <member name="T:Clarion.Framework.SimilanceDrive">
      <summary>
            This class implements a similance drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.SimilanceDrive.#ctor(System.Guid,Clarion.Framework.SimilanceDrive.SimilanceDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a similance drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.SimilanceDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>SimilanceDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimilanceDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>SimilanceDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimilanceDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.SimilanceDrive.SimilanceDriveFactory">
      <summary>
            The factory class for generating a similance drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.SimilanceDrive.SimilanceDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.SimilanceDrive.SimilanceDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.SimilanceDrive.SimilanceDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.SimilanceDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A similance drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.SimilanceDrive.SimilanceDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.SimilanceDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.SimilanceDrive.SimilanceDriveParameters.#ctor(Clarion.Framework.SimilanceDrive.SimilanceDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.SimilanceDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.SimilanceDrive.SimilanceDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.SimilanceDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.SimilanceDrive.SimilanceDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimilanceDrive.SimilanceDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimilanceDrive.SimilanceDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimilanceDrive.SimilanceDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.SimplifiedQBPNetwork">
      <summary>
            This class implements a simplified Q-learning with backpropagation neural network in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.SimplifiedQBPNetwork.#ctor(Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters,Clarion.Framework.Templates.ExtractionChecker,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for a simplified Q-learning backpropagation network
            </summary>
      <param name="pars">The parameters class containing the local parameters for the simplified Q-learning network</param>
      <param name="extractionMethod">(optional) Used for specifying a user-defined method for determining whether a rule should be extracted</param>
      <param name="matchMethod">(optional) User defined method for determining whether the chosen output was a positive match</param>
      <param name="elChecker">(optional) Used for specifying a user-defined method for checking the eligibility of a simplified Q-learning</param>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.Factory">
      <summary>
            Gets the factory used for generating <c>SimplifiedQBPNetwork</c> components
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>SimplifiedQBPNetwork</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.SimplifiedQBPNetwork.Learn">
      <summary>
            Updates the network using simplified Q-learning with standard backpropagation
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.Parameters">
      <summary>
            Gets the local parameters for this simplified Q-learning backpropagation network
            </summary>
    </member>
    <member name="T:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkFactory">
      <summary>
            The factory class for generating simplified Q-learning backpropagation neural networks
            </summary>
    </member>
    <member name="M:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.SimplifiedQBPNetwork" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the simplified Q-learning backpropagation network</param>
      <returns>A simplified Q-learning backpropagation network initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.SimplifiedQBPNetwork" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.#ctor(Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.SimplifiedQBPNetwork" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.SimplifiedQBPNetwork" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.EXTRACTION_PROBABILITY">
      <summary>
            The extraction probability (i.e., the probability a rule will be extracted)
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.INITIAL_THRESHOLDS_LOWER_BOUND">
      <summary>
            The low bound for the initial threshold
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.INITIAL_THRESHOLDS_UPPER_BOUND">
      <summary>
            The upper bound for the initial threshold
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.INITIAL_WEIGHTS_LOWER_BOUND">
      <summary>
            The low bound for the initial dWeights
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.INITIAL_WEIGHTS_UPPER_BOUND">
      <summary>
            The upper bound for the initial dWeights
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.LEARNING_RATE">
      <summary>
            The learning rate (used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.MOMENTUM">
      <summary>
            The momentum (used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.SimplifiedQBPNetwork.SimplifiedQBPNetworkParameters.R_ZERO">
      <summary>
            The error tolerance (used for learning)
            </summary>
    </member>
    <member name="T:Clarion.Framework.WaterDrive">
      <summary>
            This class implements a water drive in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.WaterDrive.#ctor(System.Guid,Clarion.Framework.WaterDrive.WaterDriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>
            Initializes a water drive
            </summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="pars">The parameters class containing the local parameters for the drive</param>
      <param name="initialDeficit">The initial deficit for the drive</param>
      <param name="deficitChangeMethod">(optional) Used for specifying a user-defined method for changing the deficit</param>
    </member>
    <member name="P:Clarion.Framework.WaterDrive.Factory">
      <summary>
            Gets the factory used for generating instances of the <c>WaterDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.WaterDrive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>WaterDrive</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.WaterDrive.Parameters">
      <summary>
            Gets the local parameters for this drive
            </summary>
    </member>
    <member name="T:Clarion.Framework.WaterDrive.WaterDriveFactory">
      <summary>
            The factory class for generating a water drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.WaterDrive.WaterDriveFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.WaterDrive.WaterDriveFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.WaterDrive.WaterDriveFactory.Generate(System.Object[])">
      <summary>
            Generates a <see cref="T:Clarion.Framework.WaterDrive" /></summary>
      <param name="parameters">The optional list of parameters to be used for initializing the drive</param>
      <returns>A water drive initialized with the specified parameters</returns>
    </member>
    <member name="T:Clarion.Framework.WaterDrive.WaterDriveParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.WaterDrive" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.WaterDrive.WaterDriveParameters.#ctor(Clarion.Framework.WaterDrive.WaterDriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.WaterDrive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.WaterDrive.WaterDriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.WaterDrive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.WaterDrive.WaterDriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.WaterDrive.WaterDriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.WaterDrive.WaterDriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.WaterDrive.WaterDriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="T:Clarion.Framework.WorkingMemory"></member>
    <member name="M:Clarion.Framework.WorkingMemory.Add(Clarion.Framework.Core.Chunk,System.Double,System.Int64)"></member>
    <member name="M:Clarion.Framework.WorkingMemory.Add(Clarion.Framework.Core.ChunkTuple)"></member>
    <member name="M:Clarion.Framework.WorkingMemory.Clear"></member>
    <member name="M:Clarion.Framework.WorkingMemory.Contains(Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.WorkingMemory.Contains(Clarion.Framework.Core.ChunkTuple)"></member>
    <member name="M:Clarion.Framework.WorkingMemory.Contains(System.Guid)"></member>
    <member name="M:Clarion.Framework.WorkingMemory.CopyTo(Clarion.Framework.Core.ChunkTuple[],System.Int32)"></member>
    <member name="P:Clarion.Framework.WorkingMemory.Count"></member>
    <member name="M:Clarion.Framework.WorkingMemory.GetEnumerator"></member>
    <member name="P:Clarion.Framework.WorkingMemory.IsReadOnly"></member>
    <member name="P:Clarion.Framework.WorkingMemory.Item(Clarion.Framework.Core.Chunk)"></member>
    <member name="P:Clarion.Framework.WorkingMemory.Item(System.Guid)"></member>
    <member name="P:Clarion.Framework.WorkingMemory.Item(System.Int64)"></member>
    <member name="M:Clarion.Framework.WorkingMemory.Remove(Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.WorkingMemory.Remove(Clarion.Framework.Core.ChunkTuple)"></member>
    <member name="M:Clarion.Framework.WorkingMemory.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:Clarion.Framework.WorkingMemory.RecognizedActions"></member>
    <member name="F:Clarion.Framework.WorkingMemory.RecognizedActions.RESET_ALL"></member>
    <member name="F:Clarion.Framework.WorkingMemory.RecognizedActions.SET_RESET"></member>
    <member name="F:Clarion.Framework.WorkingMemory.RecognizedActions.RESET"></member>
    <member name="F:Clarion.Framework.WorkingMemory.RecognizedActions.SET"></member>
    <member name="T:Clarion.Framework.WorkingMemoryUpdateActionChunk"></member>
    <member name="M:Clarion.Framework.WorkingMemoryUpdateActionChunk.Add(Clarion.Framework.WorkingMemory.RecognizedActions,Clarion.Framework.Core.Chunk[])"></member>
    <member name="M:Clarion.Framework.WorkingMemoryUpdateActionChunk.Contains(Clarion.Framework.WorkingMemory.RecognizedActions,Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.WorkingMemoryUpdateActionChunk.ContainsAction(Clarion.Framework.WorkingMemory.RecognizedActions)"></member>
    <member name="M:Clarion.Framework.WorkingMemoryUpdateActionChunk.ContainsAction(Clarion.Framework.WorkingMemory.RecognizedActions,System.Double)"></member>
    <member name="M:Clarion.Framework.WorkingMemoryUpdateActionChunk.ContainsActionAsNOTActivated(Clarion.Framework.WorkingMemory.RecognizedActions)"></member>
    <member name="M:Clarion.Framework.WorkingMemoryUpdateActionChunk.GetActionWeight(Clarion.Framework.WorkingMemory.RecognizedActions)"></member>
    <member name="P:Clarion.Framework.WorkingMemoryUpdateActionChunk.Item(Clarion.Framework.WorkingMemory.RecognizedActions,Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.WorkingMemoryUpdateActionChunk.Remove(Clarion.Framework.WorkingMemory.RecognizedActions,Clarion.Framework.Core.Chunk[])"></member>
    <member name="M:Clarion.Framework.WorkingMemoryUpdateActionChunk.SetActionAsNOTActivated(Clarion.Framework.WorkingMemory.RecognizedActions)">
      <summary>
            Specifies that the action <b>MUST</b> contain <b>NO</b> activated values
            </summary>
      <param name="action">The action to be set</param>
    </member>
    <member name="M:Clarion.Framework.WorkingMemoryUpdateActionChunk.SetActionWeight(Clarion.Framework.WorkingMemory.RecognizedActions,System.Double)"></member>
    <member name="T:Clarion.Framework.Core.ActionChunk"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk.Add(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs},System.String,System.IComparable,Clarion.Framework.Core.TimedEventArgs.Timings)"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk.Contains(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs},System.String)"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk.ContainsTarget(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs})"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk.ContainsTarget(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs},System.Double)"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk.ContainsTargetAsNOTActivated(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs})"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk.GetTargetWeight(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs})"></member>
    <member name="P:Clarion.Framework.Core.ActionChunk.Item(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs},System.String)"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk.Remove(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs},System.String)"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk.SetTargetAsNOTActivated(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs})">
      <summary>
            Specifies that the target <b>MUST</b> contain <b>NO</b> activated parameter changes
            </summary>
      <param name="target">The target to be set</param>
    </member>
    <member name="M:Clarion.Framework.Core.ActionChunk.SetTargetWeight(Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs},System.Double)"></member>
    <member name="T:Clarion.Framework.Core.ActionChunk`1"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk`1.Equals(System.Object)"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk`1.Equals(`0)"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk`1.GetHashCode"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk`1.op_Addition(Clarion.Framework.Core.ActionChunk{`0},Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk`1.op_Equality(Clarion.Framework.Core.ActionChunk{`0},Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk`1.op_Inequality(Clarion.Framework.Core.ActionChunk{`0},Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.Core.ActionChunk`1.op_Subtraction(Clarion.Framework.Core.ActionChunk{`0},Clarion.Framework.Core.IWorldObject)"></member>
    <member name="T:Clarion.Framework.Core.ActionChunkCollection"></member>
    <member name="M:Clarion.Framework.Core.ActionChunkCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.ActionChunkCollection" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Core.ActionChunkCollection.Item(System.IComparable)"></member>
    <member name="T:Clarion.Framework.Core.ActivationTuple"></member>
    <member name="P:Clarion.Framework.Core.ActivationTuple.ACTIVATION"></member>
    <member name="P:Clarion.Framework.Core.ActivationTuple.WORLD_OBJECT"></member>
    <member name="T:Clarion.Framework.Core.Chunk"></member>
    <member name="M:Clarion.Framework.Core.Chunk.Add(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="P:Clarion.Framework.Core.Chunk.AsDimensionValuePair"></member>
    <member name="M:Clarion.Framework.Core.Chunk.CalculateDimensionWeight(System.Object)">
      <summary>
            Calculates the weight for the specified dimension
            </summary>
      <param name="dimID">The ID of the dimension whose weight is to be calculated</param>
    </member>
    <member name="M:Clarion.Framework.Core.Chunk.ComputeStrength(Clarion.Framework.ActivationCollection)">
      <summary>
            Computes the strength of the chunk given the current input
            </summary>
      <param name="currentInput">The current sensory input</param>
      <returns>The strength of the chunk</returns>
    </member>
    <member name="M:Clarion.Framework.Core.Chunk.Contains(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.Contains(System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.Contains(System.Object,System.IComparable)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.ContainsDimension(System.Object)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.ContainsDimension(System.Object,System.Double)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.ContainsDimensionAsNOTActivated(System.Object)"></member>
    <member name="P:Clarion.Framework.Core.Chunk.Count"></member>
    <member name="P:Clarion.Framework.Core.Chunk.DimensionCount"></member>
    <member name="M:Clarion.Framework.Core.Chunk.Equals(System.Object)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.GetDimensionWeight(System.Object)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.GetEnumerator"></member>
    <member name="M:Clarion.Framework.Core.Chunk.GetHashCode"></member>
    <member name="P:Clarion.Framework.Core.Chunk.IsRepresentation"></member>
    <member name="P:Clarion.Framework.Core.Chunk.Item(System.Guid)"></member>
    <member name="P:Clarion.Framework.Core.Chunk.Item(System.Object)"></member>
    <member name="P:Clarion.Framework.Core.Chunk.Item(System.Object,System.IComparable)"></member>
    <member name="P:Clarion.Framework.Core.Chunk.LabelAsIComparable"></member>
    <member name="M:Clarion.Framework.Core.Chunk.op_Addition(Clarion.Framework.Core.Chunk,Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.op_Equality(Clarion.Framework.Core.Chunk,Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.op_Inequality(Clarion.Framework.Core.Chunk,Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.op_Subtraction(Clarion.Framework.Core.Chunk,Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.Remove(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.Remove(System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.SetDimensionAsNOTActivated(System.Object)">
      <summary>
            Specifies that the dimension (with the specified ID) <b>MUST</b> contain <b>NO</b> activated values
            </summary>
      <param name="dimensionID">The ID of the dimension to be set</param>
    </member>
    <member name="M:Clarion.Framework.Core.Chunk.SetDimensionWeight(System.Object,System.Double)">
      <summary>
            Sets the weight of the dimension with the specified ID
            </summary>
      <param name="dimensionID">The ID of the dimension whose weight is to be set</param>
      <param name="weight">The dimension weight</param>
    </member>
    <member name="P:Clarion.Framework.Core.Chunk.StrengthCalculatorDelegate"></member>
    <member name="M:Clarion.Framework.Core.Chunk.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:Clarion.Framework.Core.Chunk.ToString"></member>
    <member name="M:Clarion.Framework.Core.Chunk.ToString(System.Boolean)"></member>
    <member name="M:Clarion.Framework.Core.Chunk.ToString(System.String,System.Boolean)"></member>
    <member name="P:Clarion.Framework.Core.Chunk.WeightCalculatorDelegate"></member>
    <member name="P:Clarion.Framework.Core.Chunk.WorldID"></member>
    <member name="T:Clarion.Framework.Core.Chunk`1"></member>
    <member name="M:Clarion.Framework.Core.Chunk`1.Equals(System.Object)"></member>
    <member name="M:Clarion.Framework.Core.Chunk`1.Equals(`0)"></member>
    <member name="M:Clarion.Framework.Core.Chunk`1.GetHashCode"></member>
    <member name="M:Clarion.Framework.Core.Chunk`1.op_Addition(Clarion.Framework.Core.Chunk{`0},Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.Core.Chunk`1.op_Equality(Clarion.Framework.Core.Chunk{`0},Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.Core.Chunk`1.op_Inequality(Clarion.Framework.Core.Chunk{`0},Clarion.Framework.Core.Chunk)"></member>
    <member name="M:Clarion.Framework.Core.Chunk`1.op_Subtraction(Clarion.Framework.Core.Chunk{`0},Clarion.Framework.Core.IWorldObject)"></member>
    <member name="T:Clarion.Framework.Core.ChunkCollection`1"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.ChunkCollection`1" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.Add(`0)"></member>
    <member name="F:Clarion.Framework.Core.ChunkCollection`1.chDictionary"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.Clear"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.Contains(System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.Contains(System.IComparable)"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.Contains(`0)"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.CopyTo(`0[],System.Int32)"></member>
    <member name="P:Clarion.Framework.Core.ChunkCollection`1.Count"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.GetEnumerator"></member>
    <member name="P:Clarion.Framework.Core.ChunkCollection`1.IsReadOnly"></member>
    <member name="P:Clarion.Framework.Core.ChunkCollection`1.Item(System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.Remove(`0)"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.ToString"></member>
    <member name="M:Clarion.Framework.Core.ChunkCollection`1.ToString(System.String)"></member>
    <member name="T:Clarion.Framework.Core.ChunkTuple"></member>
    <member name="P:Clarion.Framework.Core.ChunkTuple.ACTIVATION"></member>
    <member name="P:Clarion.Framework.Core.ChunkTuple.CHUNK"></member>
    <member name="P:Clarion.Framework.Core.ChunkTuple.Empty"></member>
    <member name="P:Clarion.Framework.Core.ChunkTuple.TimeStamp"></member>
    <member name="T:Clarion.Framework.Core.ClarionComponent">
      <summary>
            This class serves as the base template class for the internal (i.e., functional) components (e.g., implicit-decision networks, action rules, associative rules, etc.) 
            in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.ClarionComponent.#ctor(Clarion.Framework.Core.ClarionComponent.ClarionComponentParameters,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for Clarion components
            </summary>
      <param name="pars">The parameters class containing the local parameters for the component</param>
      <param name="elChecker">(optional) Used for specifying a user-defined method for checking the eligibility of a component</param>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.Clarion#Framework#Templates#ISubscribes#PublicationTimingsSpecifiedEventHandler"></member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.Clarion#Framework#Templates#ISubscribes#PublisherAvailableEventHandler"></member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.Clarion#Framework#Templates#ISubscribes#PublisherRemovedEventHandler"></member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="M:Clarion.Framework.Core.ClarionComponent.Commit">
      <summary>
            Commits the component
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.CommitLock">
      <summary>
            Gets the thread locker that should be used during committing process of a component
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.EligibilityCheckerDelegate">
      <summary>
            Gets the eligibility checker delegate (if one was specified during initialization, otherwise this will return <c>null</c>)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.FactoryParameters">
      <summary>
            Gets or sets the parameters that were used by the factory in order to generate the component
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>ClarionComponent</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.InitializeOnCommit">
      <summary>
            Specifies whether initialization operations should be performed when the component in committed
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.ClarionComponent.IsEligible(Clarion.Framework.ActivationCollection)">
      <summary>
            Indicates whether or not the component is eligible to be used
            </summary>
      <param name="currentInput">(optional) The current activation collection used for checking a component's eligibility</param>
      <returns>
        <c>True</c> if the component is eligible, otherwise <c>False</c></returns>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.IsReadOnly">
      <summary>
            Specifies whether the component is in a read-only (i.e., immutable) state
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.LastEligibleTimeStamp">
      <summary>
            Gets or sets the time stamp for the last time the component was eligible
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.Parameters">
      <summary>
            Gets the local parameters for the component
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.ClarionComponent.Retract">
      <summary>
            Retracts the component
            </summary>
    </member>
    <member name="T:Clarion.Framework.Core.ClarionComponent.ClarionComponentParameters">
      <summary>
            This is the base parameters class for component classes that derive from <see cref="T:Clarion.Framework.Core.ClarionComponent" /></summary>
    </member>
    <member name="M:Clarion.Framework.Core.ClarionComponent.ClarionComponentParameters.#ctor(Clarion.Framework.Core.ClarionComponent.ClarionComponentParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Core.ClarionComponent" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Core.ClarionComponent.ClarionComponentParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Core.ClarionComponent" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.ClarionComponentParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.ClarionComponent.ClarionComponentParameters.Global_OnParameterChanged(System.Object,Clarion.Framework.Core.ParameterChangeRequestedEventArgs)">
      <summary>
            The event method used for performing global parameter changes
            </summary>
      <param name="sender">The particular parameters class instance that initiated the global parameter change</param>
      <param name="e">The event args (i.e., the parameter that is to be set and the new value for that parameter)</param>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.ClarionComponentParameters.IsGlobal">
      <summary>
            Used to specify whether the particular instance of the parameters class is being used for global or local parameters
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ClarionComponent.ClarionComponentParameters.ParameterChange_EventInvoked">
      <summary>
            Used to specify that a global parameter change event in in progress
            </summary>
    </member>
    <member name="T:Clarion.Framework.Core.ClarionComponentCollection"></member>
    <member name="P:Clarion.Framework.Core.ClarionComponentCollection.NegativeMatch"></member>
    <member name="P:Clarion.Framework.Core.ClarionComponentCollection.PositiveMatch"></member>
    <member name="M:Clarion.Framework.Core.ClarionComponentCollection.ResetStatistics"></member>
    <member name="M:Clarion.Framework.Core.ClarionComponentCollection.UpdateMatchStatistics(System.Double,Clarion.Framework.SensoryInformation,System.Guid,System.Double,System.Double)">
      <summary>
            Updates the positive or negative match statistics based on the information specified.
            </summary>
      <param name="feedback">The feedback</param>
      <param name="currentInput">The current input</param>
      <param name="chosenOutputChunkID">The ID of the chosen output chunk</param>
      <param name="pmThresh">The partial match threshold</param>
      <param name="increment">The amount by which to increment the match statistic</param>
    </member>
    <member name="T:Clarion.Framework.Core.ConditionChunk"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.Add(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.Add(Clarion.Framework.Core.IWorldObject,System.Boolean,System.Object)"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.Add(Clarion.Framework.Core.IWorldObject,System.Object)"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.ComputeStrength(Clarion.Framework.ActivationCollection)">
      <summary>
            Computes the strength of the chunk given the current input
            </summary>
      <param name="currentInput">The current sensory input</param>
      <returns>The strength of the chunk</returns>
    </member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.Contains(Clarion.Framework.Core.IWorldObject,System.Boolean)"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.Contains(System.Guid,System.Boolean)"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.Contains(System.Object,System.IComparable,System.Boolean)"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.Equals(Clarion.Framework.Core.ConditionChunk)"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.GetEnumerator"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.GetHashCode">
      <summary>
            Gets the hash code for the condition chunk
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ConditionChunk.IsMatchAll">
      <summary>
            Specifies whether the condition chunk is in a "match-all" state (i.e., all of the <see cref="T:Clarion.Framework.Core.IWorldObject">world objects</see>
            in the condition chunk are set to <c>True</c>)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ConditionChunk.IsReadOnly">
      <summary>
            Specifies whether the condition chunk is in a read-only (i.e., immutable or locked) state
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ConditionChunk.Item(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="P:Clarion.Framework.Core.ConditionChunk.Item(Clarion.Framework.Core.IWorldObject,System.Object)"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.Remove(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:Clarion.Framework.Core.ConditionChunk.ToString(System.String,System.Boolean)"></member>
    <member name="T:Clarion.Framework.Core.DeclarativeChunkCollection"></member>
    <member name="M:Clarion.Framework.Core.DeclarativeChunkCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.DeclarativeChunkCollection" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Core.DeclarativeChunkCollection.Item(System.IComparable)"></member>
    <member name="T:Clarion.Framework.Core.DimensionValueCollection"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.DimensionValueCollection" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.Add(Clarion.Framework.DimensionValuePair)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.Clear"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.Contains(Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.Contains(Clarion.Framework.DimensionValuePair)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.Contains(System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.Contains(System.Object,System.IComparable)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.ContainsDimension(System.Object)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.CopyTo(Clarion.Framework.DimensionValuePair[],System.Int32)"></member>
    <member name="P:Clarion.Framework.Core.DimensionValueCollection.Count"></member>
    <member name="P:Clarion.Framework.Core.DimensionValueCollection.DimensionCount"></member>
    <member name="P:Clarion.Framework.Core.DimensionValueCollection.DimensionIDs"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.Equals(Clarion.Framework.Core.DimensionValueCollection)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.Equals(System.Object)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.GetEnumerator"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.GetHashCode"></member>
    <member name="P:Clarion.Framework.Core.DimensionValueCollection.IsReadOnly"></member>
    <member name="P:Clarion.Framework.Core.DimensionValueCollection.Item(System.Guid)"></member>
    <member name="P:Clarion.Framework.Core.DimensionValueCollection.Item(System.Object)"></member>
    <member name="P:Clarion.Framework.Core.DimensionValueCollection.Item(System.Object,System.IComparable)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.op_Addition(Clarion.Framework.Core.DimensionValueCollection,Clarion.Framework.DimensionValuePair)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.op_Equality(Clarion.Framework.Core.DimensionValueCollection,Clarion.Framework.Core.DimensionValueCollection)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.op_Inequality(Clarion.Framework.Core.DimensionValueCollection,Clarion.Framework.Core.DimensionValueCollection)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.op_Subtraction(Clarion.Framework.Core.DimensionValueCollection,Clarion.Framework.DimensionValuePair)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.Remove(Clarion.Framework.DimensionValuePair)"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.ToString"></member>
    <member name="M:Clarion.Framework.Core.DimensionValueCollection.ToString(System.String)"></member>
    <member name="T:Clarion.Framework.Core.DriveCollection"></member>
    <member name="M:Clarion.Framework.Core.DriveCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.DriveCollection" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.DriveCollection.Add(Clarion.Framework.Templates.Drive)"></member>
    <member name="M:Clarion.Framework.Core.DriveCollection.Clear"></member>
    <member name="M:Clarion.Framework.Core.DriveCollection.Contains(Clarion.Framework.Templates.Drive)"></member>
    <member name="M:Clarion.Framework.Core.DriveCollection.CopyTo(Clarion.Framework.Templates.Drive[],System.Int32)"></member>
    <member name="P:Clarion.Framework.Core.DriveCollection.Count"></member>
    <member name="M:Clarion.Framework.Core.DriveCollection.GetEnumerator"></member>
    <member name="P:Clarion.Framework.Core.DriveCollection.IsReadOnly"></member>
    <member name="P:Clarion.Framework.Core.DriveCollection.Item(Clarion.Framework.MotivationalSubsystem.DriveSystemSpecifications)"></member>
    <member name="M:Clarion.Framework.Core.DriveCollection.Remove(Clarion.Framework.Templates.Drive)"></member>
    <member name="M:Clarion.Framework.Core.DriveCollection.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:Clarion.Framework.Core.DriveStrengthsUpdatedEventArgs"></member>
    <member name="P:Clarion.Framework.Core.DriveStrengthsUpdatedEventArgs.DriveStrengthUpdates"></member>
    <member name="M:Clarion.Framework.Core.DriveStrengthsUpdatedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="T:Clarion.Framework.Core.EncodeEpisodeRequestedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.EncodeEpisodeRequestedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="T:Clarion.Framework.Core.EpisodicMemory"></member>
    <member name="M:Clarion.Framework.Core.EpisodicMemory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.EpisodicMemory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.EpisodicMemory.Add(Clarion.Framework.Episode)"></member>
    <member name="M:Clarion.Framework.Core.EpisodicMemory.Add(Clarion.Framework.Templates.ImplicitComponent)"></member>
    <member name="M:Clarion.Framework.Core.EpisodicMemory.Remove(Clarion.Framework.Episode)"></member>
    <member name="M:Clarion.Framework.Core.EpisodicMemory.Remove(Clarion.Framework.Templates.ImplicitComponent)"></member>
    <member name="T:Clarion.Framework.Core.EpisodicMemory.RecognizedActions"></member>
    <member name="F:Clarion.Framework.Core.EpisodicMemory.RecognizedActions.ENCODE"></member>
    <member name="F:Clarion.Framework.Core.EpisodicMemory.RecognizedActions.GET"></member>
    <member name="T:Clarion.Framework.Core.ExternalActionRecommendedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.ExternalActionRecommendedEventArgs.#ctor(System.Int64,System.Guid,Clarion.Framework.SensoryInformation,System.Collections.Generic.Dictionary{Clarion.Framework.Core.ActionChunk,System.Double},System.Boolean)">
      <summary>
            Initializes the chosen action update requested event args.
            </summary>
      <param name="timeStamp">The time stamp for the event</param>
      <param name="worldID">The world ID of the external action chunk</param>
      <param name="relatedInput">The input that was the bases for the chosen external action</param>
      <param name="expectsNewInput">Indicates if learning from new input is expected after performing the chosen action</param>
    </member>
    <member name="M:Clarion.Framework.Core.ExternalActionRecommendedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="T:Clarion.Framework.Core.GenerativeContentDefinition"></member>
    <member name="M:Clarion.Framework.Core.GenerativeContentDefinition.#ctor(System.IComparable)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.GenerativeContentDefinition" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.GenerativeContentDefinition.GenerateContent(Clarion.Framework.Agent,Clarion.Framework.Core.ActionChunk,System.Double)"></member>
    <member name="P:Clarion.Framework.Core.GenerativeContentDefinition.Value"></member>
    <member name="T:Clarion.Framework.Core.GenerativeContentDefinition`2"></member>
    <member name="M:Clarion.Framework.Core.GenerativeContentDefinition`2.#ctor(`0,`1,System.IComparable)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.GenerativeContentDefinition`2" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.GenerativeContentDefinition`2.GenerateContent(Clarion.Framework.Agent,Clarion.Framework.Core.ActionChunk,System.Double)"></member>
    <member name="P:Clarion.Framework.Core.GenerativeContentDefinition`2.LeftOption"></member>
    <member name="P:Clarion.Framework.Core.GenerativeContentDefinition`2.RightOption"></member>
    <member name="M:Clarion.Framework.Core.GenerativeContentDefinition`2.ToString"></member>
    <member name="T:Clarion.Framework.Core.GenerativeContentDefinition`3"></member>
    <member name="M:Clarion.Framework.Core.GenerativeContentDefinition`3.#ctor(`0,`1,`2,System.IComparable)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.GenerativeContentDefinition`3" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.GenerativeContentDefinition`3.GenerateContent(Clarion.Framework.Agent,Clarion.Framework.Core.ActionChunk,System.Double)"></member>
    <member name="P:Clarion.Framework.Core.GenerativeContentDefinition`3.MiddleOption"></member>
    <member name="M:Clarion.Framework.Core.GenerativeContentDefinition`3.ToString"></member>
    <member name="T:Clarion.Framework.Core.GenerativeContentDefinition.ValueOptions"></member>
    <member name="F:Clarion.Framework.Core.GenerativeContentDefinition.ValueOptions.VARIABLE"></member>
    <member name="F:Clarion.Framework.Core.GenerativeContentDefinition.ValueOptions.FIXED"></member>
    <member name="T:Clarion.Framework.Core.GoalChunkCollection"></member>
    <member name="M:Clarion.Framework.Core.GoalChunkCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.GoalChunkCollection" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Core.GoalChunkCollection.Item(System.IComparable)"></member>
    <member name="T:Clarion.Framework.Core.GoalChunkTuple"></member>
    <member name="P:Clarion.Framework.Core.GoalChunkTuple.CHUNK"></member>
    <member name="P:Clarion.Framework.Core.GoalChunkTuple.Empty"></member>
    <member name="T:Clarion.Framework.Core.GoalStructureUpdatedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.GoalStructureUpdatedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="P:Clarion.Framework.Core.GoalStructureUpdatedEventArgs.GoalStructureActivations"></member>
    <member name="P:Clarion.Framework.Core.GoalStructureUpdatedEventArgs.RemovedGoalIDs"></member>
    <member name="T:Clarion.Framework.Core.GoalStructureUpdateRequestedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.GoalStructureUpdateRequestedEventArgs.#ctor(System.Int64,System.Collections.Generic.IEnumerable{System.Tuple{Clarion.Framework.GoalStructure.RecognizedActions,System.Guid,System.Double}},System.IComparable[])">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.GoalStructureUpdateRequestedEventArgs" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.GoalStructureUpdateRequestedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="T:Clarion.Framework.Core.ICommitable">
      <summary>
            This interface acts as the foundation for all of the "functional" objects in the Clarion Library, initialized using the <see cref="T:Clarion.AgentInitializer" /></summary>
    </member>
    <member name="M:Clarion.Framework.Core.ICommitable.Commit">
      <summary>
            Commits (i.e., makes immutable) the functional object
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.ICommitable.InitializeOnCommit">
      <summary>
            Specifies whether the functional object should perform initialization operations upon being committed
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.ICommitable.Retract">
      <summary>
            Retracts (i.e., makes editable) the functional object
            </summary>
    </member>
    <member name="T:Clarion.Framework.Core.IKillable"></member>
    <member name="M:Clarion.Framework.Core.IKillable.Die"></member>
    <member name="T:Clarion.Framework.Core.ImplicitComponentCollection"></member>
    <member name="M:Clarion.Framework.Core.ImplicitComponentCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.ImplicitComponentCollection" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.ImplicitComponentCollection.Add(Clarion.Framework.Templates.ImplicitComponent)"></member>
    <member name="M:Clarion.Framework.Core.ImplicitComponentCollection.Clear"></member>
    <member name="M:Clarion.Framework.Core.ImplicitComponentCollection.Contains(Clarion.Framework.Templates.ImplicitComponent)"></member>
    <member name="M:Clarion.Framework.Core.ImplicitComponentCollection.CopyTo(Clarion.Framework.Templates.ImplicitComponent[],System.Int32)"></member>
    <member name="P:Clarion.Framework.Core.ImplicitComponentCollection.Count"></member>
    <member name="M:Clarion.Framework.Core.ImplicitComponentCollection.GetEnumerator"></member>
    <member name="P:Clarion.Framework.Core.ImplicitComponentCollection.IsReadOnly"></member>
    <member name="M:Clarion.Framework.Core.ImplicitComponentCollection.Remove(Clarion.Framework.Templates.ImplicitComponent)"></member>
    <member name="M:Clarion.Framework.Core.ImplicitComponentCollection.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="T:Clarion.Framework.Core.IWorldObject">
      <summary>
            This interface acts as the foundation for all of the "descriptive" objects in the Clarion Library, stored
            in the <see cref="T:Clarion.World" /> singleton object
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.IWorldObject.AsDimensionValuePair">
      <summary>
            Gets the dimension-value pair representation of the world object
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.IWorldObject.WorldID">
      <summary>
            Gets the unique world ID for the world object
            </summary>
    </member>
    <member name="T:Clarion.Framework.Core.LearningRequestedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.LearningRequestedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="P:Clarion.Framework.Core.LearningRequestedEventArgs.LearningInfo"></member>
    <member name="P:Clarion.Framework.Core.LearningRequestedEventArgs.LocalEpisodicMemory"></member>
    <member name="P:Clarion.Framework.Core.LearningRequestedEventArgs.Target"></member>
    <member name="T:Clarion.Framework.Core.LearningTuple"></member>
    <member name="M:Clarion.Framework.Core.LearningTuple.#ctor(System.Int64,System.Double,Clarion.Framework.SensoryInformation,System.Int64,Clarion.Framework.Agent)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.LearningTuple" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Core.LearningTuple.AffiliatedAgent"></member>
    <member name="P:Clarion.Framework.Core.LearningTuple.Feedback"></member>
    <member name="P:Clarion.Framework.Core.LearningTuple.NewSI"></member>
    <member name="P:Clarion.Framework.Core.LearningTuple.ReceivedAt"></member>
    <member name="P:Clarion.Framework.Core.LearningTuple.TimeStamp"></member>
    <member name="T:Clarion.Framework.Core.LocalEpisodicMemoryTuple"></member>
    <member name="P:Clarion.Framework.Core.LocalEpisodicMemoryTuple.ActionCandidates"></member>
    <member name="P:Clarion.Framework.Core.LocalEpisodicMemoryTuple.ChosenAction"></member>
    <member name="P:Clarion.Framework.Core.LocalEpisodicMemoryTuple.ChosenActionID"></member>
    <member name="P:Clarion.Framework.Core.LocalEpisodicMemoryTuple.ComponentsUsed"></member>
    <member name="P:Clarion.Framework.Core.LocalEpisodicMemoryTuple.ExpectsNewSensoryInformation"></member>
    <member name="P:Clarion.Framework.Core.LocalEpisodicMemoryTuple.IsNewEpisodicMemory"></member>
    <member name="P:Clarion.Framework.Core.LocalEpisodicMemoryTuple.RelatedSI"></member>
    <member name="P:Clarion.Framework.Core.LocalEpisodicMemoryTuple.UnboxedActionCandidates"></member>
    <member name="T:Clarion.Framework.Core.ParameterChangeRequestedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.ParameterChangeRequestedEventArgs.#ctor(System.Int64,Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs},Clarion.Framework.Core.ParameterTuple[])">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.ParameterChangeRequestedEventArgs" /> class</summary>
    </member>
    <member name="T:Clarion.Framework.Core.ParameterTuple"></member>
    <member name="M:Clarion.Framework.Core.ParameterTuple.#ctor(System.String,System.IComparable,Clarion.Framework.Core.TimedEventArgs.Timings,System.Int64,Clarion.Framework.Templates.ISubscribes{Clarion.Framework.Core.ParameterChangeRequestedEventArgs}[])">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.ParameterTuple" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.ParameterTuple.CompareTo(Clarion.Framework.Core.ParameterTuple)"></member>
    <member name="M:Clarion.Framework.Core.ParameterTuple.CompareTo(System.Object)"></member>
    <member name="P:Clarion.Framework.Core.ParameterTuple.IsVariable"></member>
    <member name="P:Clarion.Framework.Core.ParameterTuple.NAME"></member>
    <member name="P:Clarion.Framework.Core.ParameterTuple.TARGETS"></member>
    <member name="P:Clarion.Framework.Core.ParameterTuple.TIME_STAMP"></member>
    <member name="P:Clarion.Framework.Core.ParameterTuple.TIMING"></member>
    <member name="M:Clarion.Framework.Core.ParameterTuple.ToString"></member>
    <member name="P:Clarion.Framework.Core.ParameterTuple.VALUE"></member>
    <member name="T:Clarion.Framework.Core.PerceivedSensoryInformationModifiedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.PerceivedSensoryInformationModifiedEventArgs.#ctor(System.Int64,Clarion.Framework.ActivationCollection,System.IComparable[])">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.PerceivedSensoryInformationModifiedEventArgs" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.PerceivedSensoryInformationModifiedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="P:Clarion.Framework.Core.PerceivedSensoryInformationModifiedEventArgs.SensoryInformationModifications"></member>
    <member name="T:Clarion.Framework.Core.ReasoningCompletedEventArgs"></member>
    <member name="P:Clarion.Framework.Core.ReasoningCompletedEventArgs.Conclusions"></member>
    <member name="M:Clarion.Framework.Core.ReasoningCompletedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="T:Clarion.Framework.Core.ReasoningRequestedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.ReasoningRequestedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="T:Clarion.Framework.Core.RetrieveCompletedEventArgs"></member>
    <member name="P:Clarion.Framework.Core.RetrieveCompletedEventArgs.Episode"></member>
    <member name="M:Clarion.Framework.Core.RetrieveCompletedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="P:Clarion.Framework.Core.RetrieveCompletedEventArgs.Knowledge"></member>
    <member name="T:Clarion.Framework.Core.RetrieveRequestedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.RetrieveRequestedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="T:Clarion.Framework.Core.Rule">
      <summary>
            This class serves as the base template class for all rule types (e.g., <see cref="T:Clarion.Framework.Templates.ActionRule">action rules</see>, <see cref="T:Clarion.Framework.Templates.AssociativeRule">associative rules</see>, etc.)
            in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.#ctor(Clarion.Framework.Core.Rule.RuleParameters,Clarion.Framework.Core.Chunk,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for rules
            </summary>
      <param name="pars">The parameters class containing the local parameters for the rule</param>
      <param name="outChunk">The rule's output chunk</param>
      <param name="matchMethod">(optional) User defined method for determining whether the rule was a positive match</param>
      <param name="elMethod">(optional) User defined method for determining whether the rule is eligible</param>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.CalculateInformationGain(Clarion.Framework.Core.Rule)">
      <summary>
            Calculates the information gain using the match statistics of the specified rule. 
            </summary>
      <param name="aR">The rule to use for calculating information gain against the "perfect" rule</param>
      <returns>The information gain measure</returns>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.CalculateInformationGain(Clarion.Framework.Core.Rule,Clarion.Framework.Core.Rule)">
      <summary>
            Calculates the information gain using the match statistics of two specified rules.
            </summary>
      <param name="aR">The first rule</param>
      <param name="bR">The second rule</param>
      <returns>The information gain measure</returns>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.CalculateSupport(Clarion.Framework.ActivationCollection)">
      <summary>
            Calculates the rule support given the current input
            </summary>
      <param name="currentInput">The current sensory input</param>
      <returns>The support for the rule</returns>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.Commit">
      <summary>
            Commits the rule
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.Covers(Clarion.Framework.Core.Rule)">
      <summary>
            Checks to see if the condition of the specified rule is covered by this rule and 
            that the two rules have the same output chunk
            </summary>
      <param name="r">The rule to check against this rule</param>
      <returns>
        <c>True</c> if this rule covers the specified rule, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.Equals(Clarion.Framework.Core.Rule)">
      <summary>
            Determines whether the specified rule is equal to this rule
            </summary>
      <param name="r">The rule against which equality it to be checked</param>
      <returns>
        <c>True</c> if the two rules are equal, otherwise <c>False</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.Equals(System.Object)">
      <summary>
            Determines whether the specified object is a Rule and if it is equal to this rule
            </summary>
      <param name="r">The object against which equality it to be checked</param>
      <returns>
        <c>True</c> if the object is a Rule and if the two rules are equal, otherwise <c>False</c></returns>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.GeneralizedCondition">
      <summary>
            Gets the generalized condition chunk of the rule
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.GetHashCode">
      <summary>
            Gets the hash code for this rule
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>Rule</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.IsEligible(Clarion.Framework.ActivationCollection)">
      <summary>
            Indicates whether or not the rule is eligible to be used
            </summary>
      <param name="currentInput">(optional) The current activation collection used for checking a component's eligibility</param>
      <returns>
        <c>True</c> if the component is eligible, otherwise <c>False</c></returns>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.MatchMethod">
      <summary>
            Gets the positive match determiner delegate (if one was specified during initialization, otherwise this will return <c>null</c>)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.NegativeMatch">
      <summary>
            Gets or sets the negative match statistic
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.OutputChunk">
      <summary>
            Gets the output chunk for the rule
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.Parameters">
      <summary>
            Gets the local parameters for this rule
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.PositiveMatch">
      <summary>
            Gets or sets the positive match statistic
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.ResetStatistics">
      <summary>
            Resets the match statistics
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.Retract">
      <summary>
            Retracts the rule
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.UpdateMatchStatistics(System.Double,Clarion.Framework.SensoryInformation,System.Guid,System.Double)">
      <summary>
            Updates the match statistics for the rule
            </summary>
      <param name="feedback">The feedback that was received given the current input and the chosen output chunk</param>
      <param name="currentInput">The current sensory information</param>
      <param name="chosenOutputChunkID">The world ID of the chosen output chunk</param>
      <param name="increment">(optional) The amount in which the match statistics are to be updated</param>
    </member>
    <member name="T:Clarion.Framework.Core.Rule.IGOptions">
      <summary>
            The options that can be used when calculating information gain for IG(C,ALL).
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.Rule.IGOptions.MATCH_ALL">
      <summary>
            The standard method for calculating the information gain against a "match all"
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.Rule.IGOptions.PERFECT">
      <summary>
            A method for calculating the information gain by assuming that a rule has "perfect" match statistics (i.e., all positive)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Core.Rule.RuleParameters">
      <summary>
            This is the base parameters class for rule classes that derive from <see cref="T:Clarion.Framework.Core.Rule" /></summary>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.RuleParameters.#ctor(Clarion.Framework.Core.Rule.RuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Core.Rule" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Core.Rule.RuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Core.Rule" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.C">
      <summary>
            Constant c (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.C1">
      <summary>
            Constant C1 for Information Gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.C2">
      <summary>
            Constant C2 for Information Gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.D">
      <summary>
            Constant d (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.DEFAULT_PARTIAL_MATCH_OFF_THRESHOLD">
      <summary>
            The threshold value when partial match is turned OFF
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.DEFAULT_PARTIAL_MATCH_ON_THRESHOLD">
      <summary>
            The threshold value when partial match is turned ON
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.INFORMATION_GAIN_OPTION">
      <summary>
            The option to use when calculation information gain for IG(C,ALL)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.INITIAL_BLA">
      <summary>
            The initial BLA
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.PARTIAL_MATCH_ON">
      <summary>
            Turns partial match on/off for calculating a rule's support
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.PARTIAL_MATCH_THRESHOLD">
      <summary>
            The threshold the support calculation must pass for the condition of a rule to be matched
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.Rule.RuleParameters.WEIGHT">
      <summary>
            The weight (for calculating support)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Core.RuleCollection`1"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.Add(`0)"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.Clear"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.Contains(`0)"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.CopyTo(`0[],System.Int32)"></member>
    <member name="P:Clarion.Framework.Core.RuleCollection`1.Count"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.GetCandidateEnumerator(Clarion.Framework.SensoryInformation,System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.GetCandidates(Clarion.Framework.SensoryInformation,System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.GetEnumerator"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.GetEnumerator(System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.GetOuputChunkIDEnumerator"></member>
    <member name="P:Clarion.Framework.Core.RuleCollection`1.IsReadOnly"></member>
    <member name="P:Clarion.Framework.Core.RuleCollection`1.Item(Clarion.Framework.Core.ConditionChunk,Clarion.Framework.Core.Chunk)"></member>
    <member name="P:Clarion.Framework.Core.RuleCollection`1.Item(Clarion.Framework.Core.ConditionChunk,System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.Remove(`0)"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.ToString"></member>
    <member name="M:Clarion.Framework.Core.RuleCollection`1.TryGetValue(Clarion.Framework.Core.ConditionChunk,System.Guid,`0@)"></member>
    <member name="T:Clarion.Framework.Core.SemanticLabel">
      <summary>
            Implements a semantic label in Clarion.
            </summary>
    </member>
    <member name="T:Clarion.Framework.Core.SensoryInformationPerceivedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.SensoryInformationPerceivedEventArgs.#ctor(Clarion.Framework.SensoryInformation)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.SensoryInformationPerceivedEventArgs" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.SensoryInformationPerceivedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="P:Clarion.Framework.Core.SensoryInformationPerceivedEventArgs.SI"></member>
    <member name="T:Clarion.Framework.Core.TimedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.TimedEventArgs.#ctor(System.Int64,Clarion.Framework.Core.TimedEventArgs.Timings,Clarion.Framework.Core.TimedEventArgs.Timings[])">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.TimedEventArgs" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.TimedEventArgs.IsBefore(Clarion.Framework.Core.TimedEventArgs.Timings)"></member>
    <member name="P:Clarion.Framework.Core.TimedEventArgs.Precedes"></member>
    <member name="P:Clarion.Framework.Core.TimedEventArgs.TimeStamp"></member>
    <member name="T:Clarion.Framework.Core.TimedEventArgs.Timings"></member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.NOW">
      <summary>
            Specifies that an event should be processed immediately
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.PERCEPTION">
      <summary>
            Specifies that an event should be processed before the next sensory information object is perceived
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.EXTERNAL_ACTION_DELIVERY">
      <summary>
            Specifies that an event should be processed before an external action is delivered to the world
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.CHOOSE_ACTION">
      <summary>
            Specifies that an event should be processed before an action is chosen in either the ACS or a module in the MCS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.WM_UPDATE">
      <summary>
            Specifies that an event should be processed before the working memory is updated
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.LEARNING">
      <summary>
            Specifies that an event should be processed before learning is performed in either the ACS, NACS, or a module in the MCS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.RULE_DELETION">
      <summary>
            Specifies that an event should be processed before a rule is deleted in either the ACS, NACS, or a module in the MCS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.REASONING">
      <summary>
            Specifies that an event should be processed before reasoning is performed in the NACS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.RETRIEVAL">
      <summary>
            Specifies that an event should be processed before knowledge retrieval is performed in the NACS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.EPISODE_ENCODING">
      <summary>
            Specifies that an event should be processed before an episode is encoded in the NACS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.DS_UPDATE">
      <summary>
            Specifies that an event should be processed before drive strengths are updated in the MS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.GS_UPDATE">
      <summary>
            Specifies that an event should be processed before the goal structure is updated in the MS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.ACTION_POTENTIAL">
      <summary>
            Specifies that an event should be processed before action potential is calculated in the ACS
            </summary>
    </member>
    <member name="F:Clarion.Framework.Core.TimedEventArgs.Timings.APPRAISAL">
      <summary>
            Specifies that an event should be processed before appraisal is performed in the NACS
            </summary>
    </member>
    <member name="T:Clarion.Framework.Core.TimeStamp">
      <summary>
            Implements a time stamp in Clarion.
            </summary>
    </member>
    <member name="T:Clarion.Framework.Core.TimeStampCollection"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.Add(Clarion.Framework.Core.TimeStamp)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.Add(System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.Add(System.Int64)"></member>
    <member name="P:Clarion.Framework.Core.TimeStampCollection.CAPACITY"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.Clear"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.Contains(Clarion.Framework.Core.TimeStamp)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.Contains(System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.Contains(System.Int64)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.CopyTo(System.Int64[],System.Int32)"></member>
    <member name="P:Clarion.Framework.Core.TimeStampCollection.Count"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.GetEnumerator"></member>
    <member name="P:Clarion.Framework.Core.TimeStampCollection.IsReadOnly"></member>
    <member name="P:Clarion.Framework.Core.TimeStampCollection.Item(System.Guid)"></member>
    <member name="P:Clarion.Framework.Core.TimeStampCollection.Max"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.op_Addition(Clarion.Framework.Core.TimeStampCollection,Clarion.Framework.Core.TimeStamp)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.op_Addition(Clarion.Framework.Core.TimeStampCollection,System.Int64)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.op_Subtraction(Clarion.Framework.Core.TimeStampCollection,Clarion.Framework.Core.TimeStamp)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.op_Subtraction(Clarion.Framework.Core.TimeStampCollection,System.Int64)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.Remove(Clarion.Framework.Core.TimeStamp)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.Remove(System.Guid)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.Remove(System.Int64)"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.ToString"></member>
    <member name="M:Clarion.Framework.Core.TimeStampCollection.ToString(System.String)"></member>
    <member name="T:Clarion.Framework.Core.TimingHoldRequestedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.TimingHoldRequestedEventArgs.#ctor(System.Int64,Clarion.Framework.Core.TimedEventArgs.Timings[])">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.TimingHoldRequestedEventArgs" /> class</summary>
    </member>
    <member name="T:Clarion.Framework.Core.V">
      <summary>
            Acts as a wrapper for <see cref="T:System.IComparable" /> values
            </summary>
    </member>
    <member name="P:Clarion.Framework.Core.V.AsIComparable">
      <summary>
            Gets the (inner) <see cref="T:System.IComparable" /> value
            </summary>
    </member>
    <member name="M:Clarion.Framework.Core.V.CompareTo(Clarion.Framework.Core.V)">
      <summary>
            Compares this value to the specified value
            </summary>
      <param name="val">The value to be compared</param>
      <returns>Greater than 0 = This value is greater than the specified value; 0 = The values are equal; 
            Less than 0 = This value is less than the specified value</returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.CompareTo(System.IComparable)">
      <summary>
            Compares this value to the specified <see cref="T:System.IComparable" /> value
            </summary>
      <param name="val">The value to be compared</param>
      <returns>Greater than 0 = This value is greater than the specified value; 0 = The values are equal; 
            Less than 0 = This value is less than the specified value</returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.Equals(System.IComparable)">
      <summary>
            Checks to see if the specified <see cref="T:System.IComparable" /> value is equal to this value
            </summary>
      <param name="val">The <see cref="T:System.IComparable" /> value to be checked for equality</param>
      <returns>
        <c>True</c> if the values are equal, otherwise <c>False</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.Equals(System.Object)">
      <summary>
            Checks to see if the specified object is equal to this value
            </summary>
      <param name="obj">The object to be checked for equality</param>
      <returns>
        <c>True</c> if the values are equal, otherwise <c>False</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.GetHashCode">
      <summary>
            Gets the hash code for this value
            </summary>
      <returns>The hash code</returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_Equality(Clarion.Framework.Core.V,System.IComparable)">
      <summary>
            Overloads the "equals" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "equals" operator</param>
      <param name="v2">The value on the right-hand side of the "equals" operator</param>
      <returns>
        <c>True</c> if the values are equal, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_Equality(System.IComparable,Clarion.Framework.Core.V)">
      <summary>
            Overloads the "equals" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "equals" operator</param>
      <param name="v2">The value on the right-hand side of the "equals" operator</param>
      <returns>
        <c>True</c> if the values are equal, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_GreaterThan(Clarion.Framework.Core.V,System.IComparable)">
      <summary>
            Overloads the "greater than" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "greater than" operator</param>
      <param name="v2">The value on the right-hand side of the "greater than" operator</param>
      <returns>
        <c>True</c> if the left-hand value is greater-than the right-hand value, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_GreaterThan(System.IComparable,Clarion.Framework.Core.V)">
      <summary>
            Overloads the "greater than" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "greater than" operator</param>
      <param name="v2">The value on the right-hand side of the "greater than" operator</param>
      <returns>
        <c>True</c> if the left-hand value is greater-than the right-hand value, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_GreaterThanOrEqual(Clarion.Framework.Core.V,System.IComparable)">
      <summary>
            Overloads the "greater than or equal" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "greater than or equal" operator</param>
      <param name="v2">The value on the right-hand side of the "greater than or equal" operator</param>
      <returns>
        <c>True</c> if the left-hand value is greater-than or equal to the right-hand value, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_GreaterThanOrEqual(System.IComparable,Clarion.Framework.Core.V)">
      <summary>
            Overloads the "greater than or equal" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "greater than or equal" operator</param>
      <param name="v2">The value on the right-hand side of the "greater than or equal" operator</param>
      <returns>
        <c>True</c> if the left-hand value is greater-than or equal to the right-hand value, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_Inequality(Clarion.Framework.Core.V,System.IComparable)">
      <summary>
            Overloads the "not equals" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "equals" operator</param>
      <param name="v2">The value on the right-hand side of the "equals" operator</param>
      <returns>
        <c>True</c> if the values are equal, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_Inequality(System.IComparable,Clarion.Framework.Core.V)">
      <summary>
            Overloads the "not equals" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "equals" operator</param>
      <param name="v2">The value on the right-hand side of the "equals" operator</param>
      <returns>
        <c>True</c> if the values are equal, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_LessThan(Clarion.Framework.Core.V,System.IComparable)">
      <summary>
            Overloads the "less than" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "less than" operator</param>
      <param name="v2">The value on the right-hand side of the "less than" operator</param>
      <returns>
        <c>True</c> if the left-hand value is less-than the right-hand value, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_LessThan(System.IComparable,Clarion.Framework.Core.V)">
      <summary>
            Overloads the "less than" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "less than" operator</param>
      <param name="v2">The value on the right-hand side of the "less than" operator</param>
      <returns>
        <c>True</c> if the left-hand value is less-than the right-hand value, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_LessThanOrEqual(Clarion.Framework.Core.V,System.IComparable)">
      <summary>
            Overloads the "less than or equal" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "less than or equal" operator</param>
      <param name="v2">The value on the right-hand side of the "less than or equal" operator</param>
      <returns>
        <c>True</c> if the left-hand value is less-than or equal to the right-hand value, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.op_LessThanOrEqual(System.IComparable,Clarion.Framework.Core.V)">
      <summary>
            Overloads the "less than or equal" operator for values
            </summary>
      <param name="v1">The value on the left-hand side of the "less than or equal" operator</param>
      <param name="v2">The value on the right-hand side of the "less than or equal" operator</param>
      <returns>
        <c>True</c> if the left-hand value is less-than or equal to the right-hand value, otherwise <c>false</c></returns>
    </member>
    <member name="M:Clarion.Framework.Core.V.ToString"></member>
    <member name="T:Clarion.Framework.Core.WorkingMemoryUpdatedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.WorkingMemoryUpdatedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="P:Clarion.Framework.Core.WorkingMemoryUpdatedEventArgs.RemovedWMChunkIDs"></member>
    <member name="P:Clarion.Framework.Core.WorkingMemoryUpdatedEventArgs.WorkingMemoryChunkActivations"></member>
    <member name="T:Clarion.Framework.Core.WorkingMemoryUpdateRequestedEventArgs"></member>
    <member name="M:Clarion.Framework.Core.WorkingMemoryUpdateRequestedEventArgs.#ctor(System.Int64,System.Collections.Generic.IEnumerable{System.Tuple{Clarion.Framework.WorkingMemory.RecognizedActions,System.Guid,System.Double}},System.IComparable[])">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Core.WorkingMemoryUpdateRequestedEventArgs" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Core.WorkingMemoryUpdateRequestedEventArgs.GeneratePublicationTimingSpec(System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="T:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation"></member>
    <member name="M:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.#ctor(Clarion.Framework.Agent,Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.Factory"></member>
    <member name="P:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>ACSLevelProbabilitySettingEquation</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.LevelProbabilityEquation(Clarion.Framework.ActivationCollection,Clarion.Framework.ActivationCollection)"></member>
    <member name="P:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.Parameters">
      <summary>
            Gets the local parameters for this equation
            </summary>
    </member>
    <member name="T:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationFactory"></member>
    <member name="M:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationFactory.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.#ctor(Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="F:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.a">
      <summary>
            The constant A used in the level probability setting equation
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.A">
      <summary>
            The constant A used in the level probability setting equation
            </summary>
    </member>
    <member name="F:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.b">
      <summary>
            The constant B used in the level probability setting equation
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.B">
      <summary>
            The constant B used in the level probability setting equation
            </summary>
    </member>
    <member name="F:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.c">
      <summary>
            The constant C used in the level probability setting equation
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.C">
      <summary>
            The constant C used in the level probability setting equation
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.MAX_ACTIVATION">
      <summary>
            The maximum value for the activations in the input and output layers
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ACSLevelProbabilitySettingEquation.ACSLevelProbabilitySettingEquationParameters.MIN_ACTIVATION">
      <summary>
            The minimum value for the activations in the input and output layers
            </summary>
    </member>
    <member name="T:Clarion.Framework.Extensions.DriveEquation"></member>
    <member name="M:Clarion.Framework.Extensions.DriveEquation.#ctor(Clarion.Framework.Extensions.DriveEquation.DriveEquationParameters,Clarion.Framework.Templates.Drive,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.DriveEquation" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.DriveEquation.CalculateDriveStrength(Clarion.Framework.ActivationCollection,Clarion.Framework.ActivationCollection)"></member>
    <member name="P:Clarion.Framework.Extensions.DriveEquation.Factory"></member>
    <member name="P:Clarion.Framework.Extensions.DriveEquation.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>DriveEquation</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.DriveEquation.Parameters">
      <summary>
            Gets the local parameters for this equation
            </summary>
    </member>
    <member name="T:Clarion.Framework.Extensions.DriveEquation.DriveEquationFactory"></member>
    <member name="M:Clarion.Framework.Extensions.DriveEquation.DriveEquationFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.DriveEquation.DriveEquationFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.DriveEquation.DriveEquationFactory.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Extensions.DriveEquation.DriveEquationParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.Extensions.DriveEquation" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.DriveEquation.DriveEquationParameters.#ctor(Clarion.Framework.Extensions.DriveEquation.DriveEquationParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.DriveEquation" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Extensions.DriveEquation.DriveEquationParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.DriveEquation" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Extensions.DriveEquation.DriveEquationParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.DriveEquation.DriveEquationParameters.MAX_ACTIVATION">
      <summary>
            The maximum value for the activations in the input and output layers
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.DriveEquation.DriveEquationParameters.MIN_ACTIVATION">
      <summary>
            The minimum value for the activations in the input and output layers
            </summary>
    </member>
    <member name="T:Clarion.Framework.Extensions.GenericEquation"></member>
    <member name="M:Clarion.Framework.Extensions.GenericEquation.#ctor(Clarion.Framework.Extensions.GenericEquation.GenericEquationParameters,Clarion.Framework.Extensions.Templates.Equation,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.GenericEquation" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GenericEquation.Equation"></member>
    <member name="P:Clarion.Framework.Extensions.GenericEquation.Factory"></member>
    <member name="P:Clarion.Framework.Extensions.GenericEquation.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>GenericEquation</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GenericEquation.Parameters">
      <summary>
            Gets the local parameters for this equation
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.GenericEquation.PropagateActivation"></member>
    <member name="T:Clarion.Framework.Extensions.GenericEquation.GenericEquationFactory"></member>
    <member name="M:Clarion.Framework.Extensions.GenericEquation.GenericEquationFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.GenericEquation.GenericEquationFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.GenericEquation.GenericEquationFactory.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Extensions.GenericEquation.GenericEquationParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.Extensions.GenericEquation" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.GenericEquation.GenericEquationParameters.#ctor(Clarion.Framework.Extensions.GenericEquation.GenericEquationParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.GenericEquation" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Extensions.GenericEquation.GenericEquationParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.GenericEquation" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Extensions.GenericEquation.GenericEquationParameters.CONSTRAIN_OUTPUT">
      <summary>
            Specifies whether the outputs should be constrained between 0 and 1
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GenericEquation.GenericEquationParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GenericEquation.GenericEquationParameters.MAX_ACTIVATION">
      <summary>
            The maximum value for the activations in the input and output layers
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GenericEquation.GenericEquationParameters.MIN_ACTIVATION">
      <summary>
            The minimum value for the activations in the input and output layers
            </summary>
    </member>
    <member name="T:Clarion.Framework.Extensions.GoalSelectionEquation"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionEquation.#ctor(Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationParameters,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.GoalSelectionEquation" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionEquation.Factory"></member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionEquation.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>GoalSelectionEquation</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelection(Clarion.Framework.ActivationCollection,Clarion.Framework.ActivationCollection)"></member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionEquation.Parameters">
      <summary>
            Gets the local parameters for this equation
            </summary>
    </member>
    <member name="T:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationFactory"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationFactory.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.Extensions.GoalSelectionEquation" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationParameters.#ctor(Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.GoalSelectionEquation" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.GoalSelectionEquation" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationParameters.MAX_ACTIVATION">
      <summary>
            The maximum value for the activations in the input and output layers
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionEquation.GoalSelectionEquationParameters.MIN_ACTIVATION">
      <summary>
            The minimum value for the activations in the input and output layers
            </summary>
    </member>
    <member name="T:Clarion.Framework.Extensions.GoalSelectionModule"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.Commit(Clarion.Framework.Core.ICommitable)"></member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.Factory"></member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>GoalSelectionModule</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.InterpretMetaCognition(Clarion.Framework.Core.LocalEpisodicMemoryTuple)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.InvokeEvent(Clarion.Framework.Core.GoalStructureUpdateRequestedEventArgs)"></member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.MetaInfo"></member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.OnEventHandler"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.OnPublicationTimingSpecified(System.Object,Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.OnPublisherAvailable(System.Object,Clarion.Framework.Templates.PublisherAvailableEventArgs)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.OnPublisherRemoved(System.Object,Clarion.Framework.Templates.PublisherRemovedEventArgs)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.OnSubscribeRequested(System.Object,Clarion.Framework.Templates.SubscribeRequestedEventArgs)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.OnUnsubscribeRequested(System.Object,Clarion.Framework.Templates.UnsubscribeRequestedEventArgs)"></member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.Parameters"></member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.Relevances"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.RemoveRelevance(Clarion.Framework.Core.IWorldObject,Clarion.Framework.Core.IWorldObject)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.RemoveRelevance(Clarion.Framework.Core.IWorldObject,Clarion.Framework.Templates.Drive)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.RemoveRelevance(System.Guid,System.Guid)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.SetRelevance(Clarion.Framework.Core.IWorldObject,Clarion.Framework.Core.IWorldObject,System.Double)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.SetRelevance(Clarion.Framework.Core.IWorldObject,Clarion.Framework.Templates.Drive,System.Double)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.SetRelevance(System.Guid,System.Guid,System.Double)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.UpdateMetaInfo(Clarion.Framework.SensoryInformation,Clarion.Framework.Core.TimedEventArgs.Timings)"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.UpdateSensoryInformationFromEventArgs(System.EventArgs,Clarion.Framework.SensoryInformation)"></member>
    <member name="T:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleFactory"></member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleFactory.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters">
      <summary>
            This is parameters class for the <see cref="T:Clarion.Framework.Extensions.GoalSelectionModule" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.#ctor(Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.GoalSelectionModule" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.GoalSelectionModule" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.DELETION_FREQUENCY">
      <summary>
            The frequency (in terms of # of learning steps) in which deletions by density are to be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.DISCOUNT">
      <summary>
            The match discount factor to be applied at the end of an episode
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.FIXED_BL_LEVEL_SELECTION_MEASURE">
      <summary>
            The fixed selection measure for the bottom level
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.FIXED_RER_LEVEL_SELECTION_MEASURE">
      <summary>
            The fixed selection measure for the RER rules
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.OPERATION_OPTION">
      <summary>
            Specifies how the goal selection module should set goals (i.e., use the chosen goal update action chunk or all goal update action chunks)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.OUTCOME_ACTIVATION_OPTION">
      <summary>
            Specifies how goal strengths should be set (i.e, using the action strength or the maximum Q-value for each "goal update" dimension-value pair 
            within a goal update action chunk
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.PERFORM_BL_LEARNING">
      <summary>
            Specifies whether or not bottom level learning should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.PERFORM_REFINEMENT">
      <summary>
            Specifies whether or not rule refinement should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.PERFORM_RULE_EXTRACTION">
      <summary>
            Specifies whether or not rule extraction should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.PERFORM_TOP_DOWN_LEARNING">
      <summary>
            Specifies whether or not top-down learning should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.PERSISTENCE">
      <summary>
            The persistence factor for the previous selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion of the top and bottom level component collections
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.SELECTION_TEMPERATURE">
      <summary>
            The temperature for stochastic selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.GoalSelectionModule.GoalSelectionModuleParameters.SELECTION_THRESHOLD">
      <summary>
            The threshold for stochastic selection
            </summary>
    </member>
    <member name="T:Clarion.Framework.Extensions.GoalSelectionModule.MetaInfoReservations"></member>
    <member name="F:Clarion.Framework.Extensions.GoalSelectionModule.MetaInfoReservations.GOAL_RELEVANCES"></member>
    <member name="T:Clarion.Framework.Extensions.ParameterSettingModule"></member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.#ctor(System.Guid,Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.ParameterSettingModule" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.Factory"></member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>ParameterSettingModule</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.InterpretMetaCognition(Clarion.Framework.Core.LocalEpisodicMemoryTuple)"></member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.InvokeEvent(Clarion.Framework.Core.ParameterChangeRequestedEventArgs)"></member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.OnEventHandler"></member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.OnPublicationTimingSpecified(System.Object,Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs)"></member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.OnPublisherAvailable(System.Object,Clarion.Framework.Templates.PublisherAvailableEventArgs)"></member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.OnPublisherRemoved(System.Object,Clarion.Framework.Templates.PublisherRemovedEventArgs)"></member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.OnSubscribeRequested(System.Object,Clarion.Framework.Templates.SubscribeRequestedEventArgs)"></member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.OnUnsubscribeRequested(System.Object,Clarion.Framework.Templates.UnsubscribeRequestedEventArgs)"></member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.Parameters"></member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.UpdateSensoryInformationFromEventArgs(System.EventArgs,Clarion.Framework.SensoryInformation)"></member>
    <member name="T:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleFactory"></member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleFactory.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters">
      <summary>
            This is parameters class for the <see cref="T:Clarion.Framework.Extensions.ParameterSettingModule" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.#ctor(Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.ParameterSettingModule" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.ParameterSettingModule" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.DELETION_FREQUENCY">
      <summary>
            The frequency (in terms of # of learning steps) in which deletions by density are to be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.DISCOUNT">
      <summary>
            The match discount factor to be applied at the end of an episode
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.FIXED_BL_LEVEL_SELECTION_MEASURE">
      <summary>
            The fixed selection measure for the bottom level
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.FIXED_RER_LEVEL_SELECTION_MEASURE">
      <summary>
            The fixed selection measure for the RER rules
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.OPERATION_OPTION">
      <summary>
            Specifies how the parameter setting module should set parameters (i.e., use the chosen parameter change action chunk or all parameter change action chunks)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.OUTCOME_ACTIVATION_OPTION">
      <summary>
            Specifies how VARIABLE parameter changes should be set (i.e, using the action strength or the maximum Q-value for each "parameter change" dimension-value pair 
            within a parameter change action chunk
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.PERFORM_BL_LEARNING">
      <summary>
            Specifies whether or not bottom level learning should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.PERFORM_REFINEMENT">
      <summary>
            Specifies whether or not rule refinement should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.PERFORM_RULE_EXTRACTION">
      <summary>
            Specifies whether or not rule extraction should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.PERFORM_TOP_DOWN_LEARNING">
      <summary>
            Specifies whether or not top-down learning should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.PERSISTENCE">
      <summary>
            The persistence factor for the previous selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion of the top and bottom level component collections
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.SELECTION_TEMPERATURE">
      <summary>
            The temperature for stochastic selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.Extensions.ParameterSettingModule.ParameterSettingModuleParameters.SELECTION_THRESHOLD">
      <summary>
            The threshold for stochastic selection
            </summary>
    </member>
    <member name="T:Clarion.Framework.Extensions.TableLookup"></member>
    <member name="M:Clarion.Framework.Extensions.TableLookup.#ctor(Clarion.Framework.Extensions.TableLookup.TableLookupParameters,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.TableLookup" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.TableLookup.Add(Clarion.Framework.ActivationCollection,Clarion.Framework.ActivationCollection)"></member>
    <member name="P:Clarion.Framework.Extensions.TableLookup.DesiredOutput"></member>
    <member name="P:Clarion.Framework.Extensions.TableLookup.Factory"></member>
    <member name="P:Clarion.Framework.Extensions.TableLookup.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>TableLookup</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.TableLookup.Learn"></member>
    <member name="P:Clarion.Framework.Extensions.TableLookup.Parameters">
      <summary>
            Gets the local parameters for this table
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.TableLookup.PropagateActivation"></member>
    <member name="M:Clarion.Framework.Extensions.TableLookup.Remove(Clarion.Framework.ActivationCollection)"></member>
    <member name="T:Clarion.Framework.Extensions.TableLookup.TableLookupFactory"></member>
    <member name="M:Clarion.Framework.Extensions.TableLookup.TableLookupFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Extensions.TableLookup.TableLookupFactory" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.TableLookup.TableLookupFactory.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Extensions.TableLookup.TableLookupParameters">
      <summary>
            This is the parameters class for the <see cref="T:Clarion.Framework.Extensions.TableLookup" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Extensions.TableLookup.TableLookupParameters.#ctor(Clarion.Framework.Extensions.TableLookup.TableLookupParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.TableLookup" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Extensions.TableLookup.TableLookupParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Extensions.TableLookup" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Extensions.TableLookup.TableLookupParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Extensions.Templates.Equation">
      <summary>
            Calculates the output activations given the specified input using an equation
            </summary>
      <param name="input">The input to the equation</param>
      <param name="output">The output from the equation</param>
    </member>
    <member name="T:Clarion.Framework.Templates.ActionRule">
      <summary>
            This class serves as the base template class for all action rules (e.g., <see cref="T:Clarion.Framework.RefineableActionRule" />, <see cref="T:Clarion.Framework.IRLRule" />, <see cref="T:Clarion.Framework.FixedRule" />) in
            the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ActionRule.#ctor(Clarion.Framework.Templates.ActionRule.ActionRuleParameters,Clarion.Framework.Core.ActionChunk,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for action rules
            </summary>
      <param name="pars">The parameters class containing the local parameters for the action rule</param>
      <param name="actionChunk">The rule's action chunk</param>
      <param name="matchMethod">(optional) User defined method for determining whether the action rule was a positive match</param>
      <param name="elMethod">(optional) User defined method for determining whether the rule is eligible</param>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.Action">
      <summary>
            Gets the action chunk associated with this action rule
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ActionRule.CalculateUtility(System.Double,System.Double)">
      <summary>
            Calculates the utility.
            </summary>
      <param name="rt">The response time for making decisions using this action rule</param>
      <param name="averageRT">The average response time for making decisions using action rules</param>
      <returns>The utility</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>ActionRule</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.Parameters">
      <summary>
            Gets the local parameters for this action rule
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.ActionRule.ActionRuleParameters">
      <summary>
            This is the base parameters class for action rule classes that derive from <see cref="T:Clarion.Framework.Templates.ActionRule" /></summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.#ctor(Clarion.Framework.Templates.ActionRule.ActionRuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.Templates.ActionRule" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.Templates.ActionRule" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.BENEFIT_CONSTANT">
      <summary>
            The constant to use for benefit when using the constant option for utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.C">
      <summary>
            Constant c (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.C1">
      <summary>
            Constant C1 for Information Gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.C2">
      <summary>
            Constant C2 for Information Gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.C7">
      <summary>
            Benefit equation constant C7
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.C8">
      <summary>
            Benefit equation constant C8
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.COST_CONSTANT">
      <summary>
            The constant to use for cost when using the constant option for utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.D">
      <summary>
            Constant d (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.DEFAULT_PARTIAL_MATCH_OFF_THRESHOLD">
      <summary>
            The threshold value when partial match is turned OFF
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.DEFAULT_PARTIAL_MATCH_ON_THRESHOLD">
      <summary>
            The threshold value when partial match is turned ON
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.INFORMATION_GAIN_OPTION">
      <summary>
            The option to use when calculation information gain for IG(C,ALL)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.INITIAL_BLA">
      <summary>
            The initial BLA
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.PARTIAL_MATCH_ON">
      <summary>
            Turns partial match on/off for calculating a rule's support
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.PARTIAL_MATCH_THRESHOLD">
      <summary>
            The threshold the support calculation must pass for the condition of a rule to be matched
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.SELECTION_TYPE">
      <summary>
            The selection type to use for the selection measure of the rule
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.UTILITY_OPTION">
      <summary>
            Specifies the method to use for calculating utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.V">
      <summary>
            The cost scaling factor (used to calculate utility)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ActionRule.ActionRuleParameters.WEIGHT">
      <summary>
            The weight (for calculating support)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.ActionRule.SelectionTypes">
      <summary>
            The types of measures that can be used for rule selection when performing action decision making
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.ActionRule.SelectionTypes.SUPPORT">
      <summary>
            Specifies that the rule support calculation should be used for selecting the rule
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.ActionRule.SelectionTypes.UTILITY">
      <summary>
            Specifies that the rule utility calculation should be used for selecting the rule
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.ActionRule.UtilityOptions">
      <summary>
            The options for calculating the utility of a rule
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.ActionRule.UtilityOptions.CONSTANT">
      <summary>
            Specifies to use constants for the cost and benefit when calculating the rule utility
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.ActionRule.UtilityOptions.EQUATION">
      <summary>
            Specifies to use the cost and benefit equations for the cost and benefit when calculating the rule utility
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.AssociativeRule">
      <summary>
            This class serves as the base template class for all associative rules (e.g., <see cref="T:Clarion.Framework.RefineableAssociativeRule" />) in
            the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.AssociativeRule.#ctor(Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters,Clarion.Framework.Core.Chunk,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for associative rules
            </summary>
      <param name="pars">The parameters class containing the local parameters for the associative rule</param>
      <param name="conclusion">The rule's conclusion chunk</param>
      <param name="matchMethod">(optional) User defined method for determining whether the associative rule was a positive match</param>
      <param name="elMethod">(optional) User defined method for determining whether the rule is eligible</param>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.Conclusion">
      <summary>
            Gets the conclusion associated with this associative rule
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>AssociativeRule</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.Parameters">
      <summary>
            Gets the local parameters for this associative rule
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters">
      <summary>
            This is the base parameters class for associative rule classes that derive from <see cref="T:Clarion.Framework.Templates.AssociativeRule" /></summary>
    </member>
    <member name="M:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.#ctor(Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.Templates.AssociativeRule" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.Templates.AssociativeRule" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.C">
      <summary>
            Constant c (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.C1">
      <summary>
            Constant C1 for Information Gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.C2">
      <summary>
            Constant C2 for Information Gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.D">
      <summary>
            Constant d (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.DEFAULT_PARTIAL_MATCH_OFF_THRESHOLD">
      <summary>
            The threshold value when partial match is turned OFF
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.DEFAULT_PARTIAL_MATCH_ON_THRESHOLD">
      <summary>
            The threshold value when partial match is turned ON
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.INFORMATION_GAIN_OPTION">
      <summary>
            The option to use when calculation information gain for IG(C,ALL)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.INITIAL_BLA">
      <summary>
            The initial BLA
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.PARTIAL_MATCH_ON">
      <summary>
            Turns partial match on/off for calculating a rule's support
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.PARTIAL_MATCH_THRESHOLD">
      <summary>
            The threshold the support calculation must pass for the condition of a rule to be matched
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.AssociativeRule.AssociativeRuleParameters.WEIGHT">
      <summary>
            The weight (for calculating support)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.ChunkStrengthCalculator">
      <summary>
            Calculates the strength of a chunk given the current input
            </summary>
      <param name="currentInput">The current input</param>
      <param name="target">(optional) The chunk whose strength is to be calculated</param>
      <returns>The strength of the chunk</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.ChunkWeightCalculator">
      <summary>
            Calculates the weight for the specified dimension within the chunk
            </summary>
      <param name="dimID">The dimension ID</param>
      <param name="target">The chunk for which this weight is being calculated</param>
      <returns>The weight of the dimension</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.CoversDeterminer">
      <summary>
            Determines if a rule covers another rule
            </summary>
      <param name="sender">The rule that initiated call to the covers determiner</param>
      <param name="r">The rule to be checked against the rule that called the covers determiner</param>
      <returns>
        <c>True</c> if the sender rule covers the other rule</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.CustomMetaCognitiveActionChunk`1"></member>
    <member name="M:Clarion.Framework.Templates.CustomMetaCognitiveActionChunk`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Templates.CustomMetaCognitiveActionChunk`1" /> class</summary>
    </member>
    <member name="T:Clarion.Framework.Templates.DeficitChangeProcessor">
      <summary>
            Changes the deficit of the specified drive based on the current input
            </summary>
      <param name="currentInput">The current input</param>
      <param name="target">(optional) The drive whose deficit is being updated</param>
      <returns>The new deficit after the deficit change has been processed</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.DeletionChecker">
      <summary>
            Checks if the target <see cref="T:Clarion.Framework.Templates.IDeletable" /> object should be deleted
            </summary>
      <param name="timeStamp">The current time stamp</param>
      <param name="target">(optional) The target whose criteria for deletion is being checked</param>
      <returns>
        <c>True</c> if the target should be deleted, otherwise <c>false</c></returns>
    </member>
    <member name="T:Clarion.Framework.Templates.Drive">
      <summary>
            This class serves as the base template class for the drives in the in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.Drive.#ctor(System.Guid,Clarion.Framework.Templates.Drive.DriveParameters,System.Double,Clarion.Framework.Templates.DeficitChangeProcessor)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Templates.Drive" /> class</summary>
      <param name="agentID">The world ID of the agent to which this drive is being attached</param>
      <param name="p"></param>
      <param name="initialDeficit"></param>
      <param name="dcp"></param>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.Clarion#Framework#Templates#ISubscribes#PublicationTimingsSpecifiedEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.Drive.Clarion#Framework#Templates#ISubscribes#PublisherAvailableEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.Drive.Clarion#Framework#Templates#ISubscribes#PublisherRemovedEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.Drive.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="M:Clarion.Framework.Templates.Drive.Commit"></member>
    <member name="M:Clarion.Framework.Templates.Drive.Commit(Clarion.Framework.Templates.ImplicitComponent)"></member>
    <member name="P:Clarion.Framework.Templates.Drive.CommitLocker"></member>
    <member name="P:Clarion.Framework.Templates.Drive.Deficit"></member>
    <member name="P:Clarion.Framework.Templates.Drive.DriveComponent"></member>
    <member name="M:Clarion.Framework.Templates.Drive.GenerateTypicalInputs``1(``0)"></member>
    <member name="M:Clarion.Framework.Templates.Drive.GenerateTypicalOutput``1(``0)"></member>
    <member name="M:Clarion.Framework.Templates.Drive.GetDriveStrength"></member>
    <member name="M:Clarion.Framework.Templates.Drive.GetStimulus"></member>
    <member name="P:Clarion.Framework.Templates.Drive.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>DriveParameters</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.InitialDeficit"></member>
    <member name="P:Clarion.Framework.Templates.Drive.InitializeOnCommit">
      <summary>
            Specifies whether initialization operations should be performed when the drive in committed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.Input"></member>
    <member name="P:Clarion.Framework.Templates.Drive.IsReadOnly">
      <summary>
            Specifies whether the drive is in a read-only (i.e., immutable) state
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.MetaInfo"></member>
    <member name="P:Clarion.Framework.Templates.Drive.Output"></member>
    <member name="P:Clarion.Framework.Templates.Drive.Parameters">
      <summary>
            Gets the local parameters for the drive
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.Drive.Retract"></member>
    <member name="M:Clarion.Framework.Templates.Drive.Retract(Clarion.Framework.Templates.ImplicitComponent)"></member>
    <member name="M:Clarion.Framework.Templates.Drive.UpdateDeficit(Clarion.Framework.SensoryInformation)"></member>
    <member name="M:Clarion.Framework.Templates.Drive.UpdateMetaInfo(Clarion.Framework.SensoryInformation,Clarion.Framework.Core.TimedEventArgs.Timings)"></member>
    <member name="T:Clarion.Framework.Templates.Drive.DriveParameters">
      <summary>
            This is the base parameters class for drive classes that derive from <see cref="T:Clarion.Framework.Templates.Drive" /></summary>
    </member>
    <member name="M:Clarion.Framework.Templates.Drive.DriveParameters.#ctor(Clarion.Framework.Templates.Drive.DriveParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.Drive" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.Drive.DriveParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.Drive" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.DriveParameters.BASELINE">
      <summary>
            The baseline
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.DriveParameters.DEFICIT_CHANGE_RATE">
      <summary>
            The deficit change rate
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.DriveParameters.DRIVE_GAIN">
      <summary>
            The drive gain
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.DriveParameters.DRIVE_SYSTEM">
      <summary>
            Gets the drive system to which the drive belongs
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.Drive.DriveParameters.Global_OnParameterChanged(System.Object,Clarion.Framework.Core.ParameterChangeRequestedEventArgs)">
      <summary>
            The event method used for performing global parameter changes
            </summary>
      <param name="sender">The particular parameters class instance that initiated the global parameter change</param>
      <param name="e">The event args (i.e., the parameter that is to be set and the new value for that parameter)</param>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.DriveParameters.IsGlobal">
      <summary>
            Used to specify whether the particular instance of the parameters class is being used for global or local parameters
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.DriveParameters.ParameterChange_EventInvoked">
      <summary>
            Used to specify that a global parameter change event in in progress
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.Drive.DriveParameters.UNIVERSAL_GAIN">
      <summary>
            The universal gain for drives
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.Drive.MetaInfoReservations"></member>
    <member name="F:Clarion.Framework.Templates.Drive.MetaInfoReservations.DRIVE_GAIN"></member>
    <member name="F:Clarion.Framework.Templates.Drive.MetaInfoReservations.UNIVERSAL_GAIN"></member>
    <member name="F:Clarion.Framework.Templates.Drive.MetaInfoReservations.STIMULUS"></member>
    <member name="F:Clarion.Framework.Templates.Drive.MetaInfoReservations.DEFICIT"></member>
    <member name="F:Clarion.Framework.Templates.Drive.MetaInfoReservations.BASELINE"></member>
    <member name="F:Clarion.Framework.Templates.Drive.MetaInfoReservations.DRIVE_STRENGTH"></member>
    <member name="T:Clarion.Framework.Templates.EligibilityChecker">
      <summary>
            Checks to see if a <see cref="T:Clarion.Framework.Core.ClarionComponent" /> object is eligible to be used
            </summary>
      <param name="currentInput">(optional) The current input</param>
      <param name="target">(optional) The target whose eligibility is being considered</param>
      <returns>
        <c>True</c> if the target is eligible, otherwise <c>false</c></returns>
    </member>
    <member name="T:Clarion.Framework.Templates.EqualityDeterminer">
      <summary>
            Determines if two rules are equal to each other
            </summary>
      <param name="sender">The rule that initiated call to the equality determiner</param>
      <param name="r">The rule to be checked against the rule that called the equality determiner</param>
      <returns>
        <c>True</c> if the two rules are equal, otherwise <c>false</c></returns>
    </member>
    <member name="T:Clarion.Framework.Templates.ExtractionChecker">
      <summary>
            Checks to see if the <see cref="T:Clarion.Framework.Templates.IExtractsRules" /> object should extract a rule based on the information specified
            </summary>
      <param name="feedback">The feedback that was received by the <see cref="T:Clarion.Framework.Templates.IExtractsRules" /> target</param>
      <param name="positiveMatchThreshold">The threshold that is to be considered when trying to determine if a rule should be extracted</param>
      <param name="extractionProbability">The probability of extracting a rule (to be considered as part of checking whether extraction should be performed)</param>
      <param name="eY">(optional) The discounted maximum activation for the output layer of the target at the <c>t + 1</c> time step. This value can be used to
            determine if extraction should occur in the case that the target also implements the <see cref="T:Clarion.Framework.Templates.IHandlesNewInput" /> interface</param>
      <param name="target">(optional) The target from whence a rule may be extracted</param>
      <returns>
        <c>True</c> if a rule should be extracted, otherwise <c>false</c></returns>
    </member>
    <member name="T:Clarion.Framework.Templates.IActionRuleFactory`1"></member>
    <member name="T:Clarion.Framework.Templates.IAssociativeRuleFactory`1"></member>
    <member name="T:Clarion.Framework.Templates.IAutoEncoder">
      <summary>
            This interface specifies that an object can be used as an "auto encoder"
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.IAutoEncoder.Nodes">
      <summary>
            Gets and sets the nodes of the auto encoder
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.IDefinesAgentMetaInfo"></member>
    <member name="P:Clarion.Framework.Templates.IDefinesAgentMetaInfo.MetaInfo">
      <summary>
            Gets an array of dimension-value pairs that represent the meta info (as defined by the implementing class)
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.IDefinesAgentMetaInfo.UpdateMetaInfo(Clarion.Framework.SensoryInformation,Clarion.Framework.Core.TimedEventArgs.Timings)">
      <summary>
            Updates the appropriate meta info (as defined by the implementing class) in the specified sensory information
            </summary>
      <param name="i">The sensory information object in which meta info is to be updated</param>
      <param name="timing">(optional) The timing at which this method is being called (used for "timing-based" meta info updating)</param>
    </member>
    <member name="T:Clarion.Framework.Templates.IDeletable">
      <summary>
            This interface specifies that an object can be deleted
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.IDeletable.CheckDeletion(System.Int64)">
      <summary>
            Checks to see if the object should be deleted
            </summary>
      <param name="timeStamp">The time stamp to use to check for deletion (say by density)</param>
      <returns>
        <c>True</c> if the object should be deleted, otherwise <c>false</c></returns>
    </member>
    <member name="T:Clarion.Framework.Templates.IDriveFactory`1"></member>
    <member name="M:Clarion.Framework.Templates.IDriveFactory`1.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Templates.IExtractsRules">
      <summary>
            This interface specifies that an object can be used from which to extract rule
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.IExtractsRules.CheckExtraction">
      <summary>
            Checks to see if a rule should be extracted
            </summary>
      <returns>
        <c>True</c> if a rule should be extracted, otherwise <c>false</c></returns>
    </member>
    <member name="T:Clarion.Framework.Templates.IHandlesNewInput">
      <summary>
            This interface specifies that an object handles new input
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.IHandlesNewInput.NewInput">
      <summary>
            Sets the new input
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.IimplicitComponentFactory`1"></member>
    <member name="M:Clarion.Framework.Templates.IimplicitComponentFactory`1.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Templates.IMetaCognitiveModuleFactory`1"></member>
    <member name="M:Clarion.Framework.Templates.IMetaCognitiveModuleFactory`1.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Templates.ImplicitComponent">
      <summary>
            This class serves as the base template class for all implicit components (e.g., <see cref="T:Clarion.Framework.BPNetwork" />, <see cref="T:Clarion.Framework.SimplifiedQBPNetwork" />, <see cref="T:Clarion.Framework.QBPNetwork" />, etc.) in
            the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ImplicitComponent.#ctor(Clarion.Framework.Templates.ImplicitComponent.ImplicitComponentParameters,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for implicit components
            </summary>
      <param name="pars">The parameters class containing the local parameters for the implicit component</param>
      <param name="elChecker">(optional) Used for specifying a user-defined method for checking the eligibility of an implicit component</param>
    </member>
    <member name="M:Clarion.Framework.Templates.ImplicitComponent.Commit">
      <summary>
            Commits the implicit component
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ImplicitComponent.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>ImplicitComponent</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ImplicitComponent.Input">
      <summary>
            Gets or sets the input layer of the implicit component
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ImplicitComponent.Output">
      <summary>
            Gets the output layer of the implicit component
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ImplicitComponent.Parameters">
      <summary>
            Gets the local parameters for this implicit component
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ImplicitComponent.PropagateActivation">
      <summary>
            Calculates the output activations based on the current input
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ImplicitComponent.Retract">
      <summary>
            Retracts the implicit component
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.ImplicitComponent.ImplicitComponentParameters">
      <summary>
            This is the base parameters class for implicit component classes that derive from <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /></summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ImplicitComponent.ImplicitComponentParameters.#ctor(Clarion.Framework.Templates.ImplicitComponent.ImplicitComponentParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.ImplicitComponent.ImplicitComponentParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.ImplicitComponent" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.ImplicitComponent.ImplicitComponentParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.InputFilterer">
      <summary>
            Filters the specified input
            </summary>
      <param name="input">The activation collection that is to be filtered</param>
      <returns>An activation collection representing the filtered subset of the input</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.IPublishes"></member>
    <member name="P:Clarion.Framework.Templates.IPublishes.SubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.IPublishes.UnsubscribeRequestedEventHandler"></member>
    <member name="T:Clarion.Framework.Templates.IPublishes`1"></member>
    <member name="M:Clarion.Framework.Templates.IPublishes`1.InvokeEvent(`0)"></member>
    <member name="T:Clarion.Framework.Templates.IRefineable`1">
      <summary>
            This interface specifies that a rule can be refined
            </summary>
      <typeparam name="T">The type of rule that is being made refineable by implementing this interface</typeparam>
    </member>
    <member name="M:Clarion.Framework.Templates.IRefineable`1.Generalize(Clarion.Framework.Core.Rule)">
      <summary>
            Performs generalization (if possible)
            </summary>
      <param name="matchAll">The match-all rule to compare to the refineable rule during generalization</param>
      <returns>The rule itself if it does not meet the criteria for generalization (or if the rule is not generalizable), 
            or a generalized rule if the rule meets the criteria for generalization</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.IRefineable`1.HasVariations">
      <summary>
            Gets or sets the specification that the rule's variations list (from <see cref="P:Clarion.Framework.Templates.IRefineable`1.Variations" /> has been populated with rule variations
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.IRefineable`1.Specialize(Clarion.Framework.Core.Rule)">
      <summary>
            Performs specialization (if possible)
            </summary>
      <param name="matchAll">The match-all rule to compare to the refineable rule during specialization</param>
      <returns>Null if the rule cannot be specialized, the rule itself if it does not meet the criteria for 
            specialization, or a specialized rule if the rule meets the criteria for specialization</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.IRefineable`1.Variations">
      <summary>
            Gets the minor variations of the refineable rule
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.IRefineable`1.VariationsLock">
      <summary>
            Gets the thread locker for manipulating/updating the rule variations from <see cref="P:Clarion.Framework.Templates.IRefineable`1.Variations" /></summary>
    </member>
    <member name="T:Clarion.Framework.Templates.IReinforcementTrainable">
      <summary>
            This interface specifies that an object is trainable using reinforcement learning
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.IReinforcementTrainable.ChosenOutput">
      <summary>
            Sets the chosen output
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.IReinforcementTrainable.Feedback">
      <summary>
            Sets the feedback for the chosen output
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.IRuleFactory`1"></member>
    <member name="M:Clarion.Framework.Templates.IRuleFactory`1.Generate(System.Object[])"></member>
    <member name="T:Clarion.Framework.Templates.ISubscribes"></member>
    <member name="P:Clarion.Framework.Templates.ISubscribes.PublicationTimingsSpecifiedEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.ISubscribes.PublisherAvailableEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.ISubscribes.PublisherRemovedEventHandler"></member>
    <member name="T:Clarion.Framework.Templates.ISubscribes`1"></member>
    <member name="P:Clarion.Framework.Templates.ISubscribes`1.OnEventHandler"></member>
    <member name="T:Clarion.Framework.Templates.ITracksMatchStatistics">
      <summary>
            This interface specifies that an object tracks positive and negative match statistics
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ITracksMatchStatistics.NegativeMatch">
      <summary>
            Gets or sets the negative match statistic
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ITracksMatchStatistics.PositiveMatch">
      <summary>
            Gets or sets the positive match statistic
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ITracksMatchStatistics.ResetStatistics">
      <summary>
            Resets the match statistics
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ITracksMatchStatistics.UpdateMatchStatistics(System.Double,Clarion.Framework.SensoryInformation,System.Guid,System.Double)">
      <summary>
            Updates the match statistics
            </summary>
      <param name="feedback">The feedback that was received given the current input and the chosen output chunk</param>
      <param name="currentInput">The current sensory information</param>
      <param name="chosenOutputChunkID">The world ID of the chosen output chunk</param>
      <param name="increment">(optional) The amount in which the match statistics are to be updated</param>
    </member>
    <member name="T:Clarion.Framework.Templates.ITrainable">
      <summary>
            This interface specifies that an object is trainable
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ITrainable.DesiredOutput">
      <summary>
            Sets the desired output to be used for learning
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ITrainable.Learn">
      <summary>
            Performs a round of learning
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.IUsesQLearning">
      <summary>
            This interface specifies that an object is trainable using Q-learning
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.IUsesQLearning.MaxQ">
      <summary>
            Gets the max Q value based on the new input
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.KnowledgeFilterer">
      <summary>
            Filters the specified collection of <see cref="T:Clarion.Framework.Core.ChunkTuple" /> objects 
            (typically returned by the NACS when reasoning or knowledge retrieval is performed)
            </summary>
      <param name="input">The collection that is to be filtered</param>
      <returns>A collection representing the filtered subset of <see cref="T:Clarion.Framework.Core.ChunkTuple" /> objects</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.MetaCognitiveModule">
      <summary>
            This class serves as the base template class for all meta-cognitive modules (e.g., <see cref="T:Clarion.Framework.Extensions.GoalSelectionModule" />, 
            <see cref="T:Clarion.Framework.Extensions.ParameterSettingModule" />) in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.#ctor(System.Guid,Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Templates.MetaCognitiveModule" /> class</summary>
    </member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule._lqlocker"></member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule._mcqlocker"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.AddWaitPublisher(Clarion.Framework.Templates.IPublishes,Clarion.Framework.Core.TimedEventArgs.Timings,System.Boolean,System.Boolean)"></member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.aID"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.Clarion#Framework#Templates#IPublishes#SubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.Clarion#Framework#Templates#IPublishes#UnsubscribeRequestedEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.Clarion#Framework#Templates#ISubscribes#PublicationTimingsSpecifiedEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.Clarion#Framework#Templates#ISubscribes#PublisherAvailableEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.Clarion#Framework#Templates#ISubscribes#PublisherRemovedEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.Clarion#Framework#Templates#ISubscribes{E}#OnEventHandler"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.Commit"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.Commit(Clarion.Framework.Core.ICommitable)"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.GetFeedbackFromLearningEventArgs(System.EventArgs)"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>MetaCognitiveModule</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.InitializeOnCommit">
      <summary>
            Specifies whether initialization operations should be performed when the module in committed
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.InterpretMetaCognition(Clarion.Framework.Core.LocalEpisodicMemoryTuple)"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.IsReadOnly">
      <summary>
            Specifies whether the module is in a read-only (i.e., immutable) state
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.lQueue"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MCARS_Locker"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MCN_Locker"></member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.mcQueue"></member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.mcQueueHandle"></member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.mcReadyHandle"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitionActionRules"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitionDecisionNetworks"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.OnPublicationTimingSpecified(System.Object,Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs)"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.OnPublisherAvailable(System.Object,Clarion.Framework.Templates.PublisherAvailableEventArgs)"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.OnPublisherRemoved(System.Object,Clarion.Framework.Templates.PublisherRemovedEventArgs)"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.OnSubscribeRequested(System.Object,Clarion.Framework.Templates.SubscribeRequestedEventArgs)"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.OnTimedEvent(System.Object,Clarion.Framework.Core.TimedEventArgs)"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.OnTimingHoldRequest(System.Object,Clarion.Framework.Core.TimingHoldRequestedEventArgs)">
      <summary>
            Handles timing hold request events
            </summary>
      <param name="sender">The internal mechanism that initiated the event</param>
      <param name="e">The event args for the event</param>
    </member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.OnUnsubscribeRequested(System.Object,Clarion.Framework.Templates.UnsubscribeRequestedEventArgs)"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.Parameters"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.PositiveMatchMethod">
      <summary>
            Sets the (optional) positive match determiner that can be used in-lieu of the default method for
            updating the match statistics for the top and bottom levels as a whole
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.ProcessParameterChanges(Clarion.Framework.Core.TimedEventArgs.Timings,System.Int64)"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.RemoveWaitPublisher(Clarion.Framework.Templates.IPublishes,Clarion.Framework.Core.TimedEventArgs.Timings)"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.Retract"></member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.Retract(Clarion.Framework.Core.ICommitable)"></member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.RuleExtractionFactory">
      <summary>
            Sets the factory that is to be used for extracting rules from the bottom level of the meta-cognitive module
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.RuleExtractionFactoryParameters">
      <summary>
            Sets the parameters associated with the factory used for extracting rules from the bottom level of the meta-cognitive module
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.RuleExtractionMethod">
      <summary>
            Sets the (optional) rule extraction method that can be used in-lieu of the default method for
            extracting rule from the bottom level of the meta-cognitive module
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.UpdateSensoryInformationFromEventArgs(System.EventArgs,Clarion.Framework.SensoryInformation)"></member>
    <member name="T:Clarion.Framework.Templates.MetaCognitiveModule.Internals">
      <summary>
            Indicates the "internals containers" that are available for a meta-cognitive module
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.Internals.META_COGNITIVE_DECISION_NETWORKS">
      <summary>
            Identifies the container which contains implicit meta-cognitive decision networks
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.Internals.META_COGNITION_ACTION_RULES">
      <summary>
            Identifies the container which contains explicit meta-cognitive action rules
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters">
      <summary>
            This is parameters class for the <see cref="T:Clarion.Framework.Templates.MetaCognitiveModule" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.#ctor(Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.MetaCognitiveModule" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.MetaCognitiveModule" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.DELETION_FREQUENCY">
      <summary>
            The frequency (in terms of # of learning steps) in which deletions by density are to be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.DISCOUNT">
      <summary>
            The match discount factor to be applied at the end of an episode
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.FIXED_BL_LEVEL_SELECTION_MEASURE">
      <summary>
            The fixed selection measure for the bottom level
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.FIXED_RER_LEVEL_SELECTION_MEASURE">
      <summary>
            The fixed selection measure for the RER rules
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.Global_OnParameterChanged(System.Object,Clarion.Framework.Core.ParameterChangeRequestedEventArgs)">
      <summary>
            The event method used for performing global parameter changes
            </summary>
      <param name="sender">The particular parameters class instance that initiated the global parameter change</param>
      <param name="e">The event args (i.e., the parameter that is to be set and the new value for that parameter)</param>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.IsGlobal">
      <summary>
            Used to specify whether the particular instance of the parameters class is being used for global or local parameters
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.OPERATION_OPTION">
      <summary>
            Specifies the type of operation that is being performed by the module (for use in <see cref="M:Clarion.Framework.Templates.MetaCognitiveModule.InterpretMetaCognition(Clarion.Framework.Core.LocalEpisodicMemoryTuple)" />)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.OUTCOME_ACTIVATION_OPTION">
      <summary>
            Specifies how the activation(s) for the module's outcome should be set (for use in 
            <see cref="M:Clarion.Framework.Templates.MetaCognitiveModule.InterpretMetaCognition(Clarion.Framework.Core.LocalEpisodicMemoryTuple)" />)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.ParameterChange_EventInvoked">
      <summary>
            Used to specify that a global parameter change event in in progress
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.PERFORM_BL_LEARNING">
      <summary>
            Specifies whether or not bottom level learning should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.PERFORM_DELETION_BY_DENSITY">
      <summary>
            Specifies whether or not intermittent rule deletion by density should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.PERFORM_LEARNING">
      <summary>
            Specifies whether or not learning in general (including extraction, refinement, bottom-level learning, deletion by density, etc.) 
            should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.PERFORM_REFINEMENT">
      <summary>
            Specifies whether or not rule refinement should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.PERFORM_RULE_EXTRACTION">
      <summary>
            Specifies whether or not rule extraction should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.PERFORM_TOP_DOWN_LEARNING">
      <summary>
            Specifies whether or not top-down learning should be performed
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.PERSISTENCE">
      <summary>
            The persistence factor for the previous selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion of the top and bottom level component collections
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.SELECTION_TEMPERATURE">
      <summary>
            The temperature for stochastic selection
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.MetaCognitiveModule.MetaCognitiveModuleParameters.SELECTION_THRESHOLD">
      <summary>
            The threshold for stochastic selection
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.MetaCognitiveModule.OperationOptions"></member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.OperationOptions.CHOOSES_ACTIONS">
      <summary>
            Specifies that the module is meant to choose actions
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.OperationOptions.UPDATES_ACTIVATIONS">
      <summary>
            Specifies that the module is meant to update activations only (not choose actions)
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.OperationOptions.MONITORS">
      <summary>
            Specifies that the module is only intended to monitor (i.e., does not do updates or choose actions)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.MetaCognitiveModule.OutcomeActivationOptions"></member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.OutcomeActivationOptions.ACTION_STRENGTH">
      <summary>
            Specifies that outcomes should be based on the strength (i.e., final selection measure) of the actions
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.OutcomeActivationOptions.FULLY_ACTIVATED">
      <summary>
            Specifies that outcomes should be set to the agent's full activation value (i.e., <see cref="P:Clarion.Framework.Agent.AgentParameters.MAX_ACTIVATION" />)
            </summary>
    </member>
    <member name="F:Clarion.Framework.Templates.MetaCognitiveModule.OutcomeActivationOptions.MAX_Q">
      <summary>
            Specifies that outcomes should be set to the maximum Q-values (usually used with <see cref="F:Clarion.Framework.Templates.MetaCognitiveModule.OperationOptions.UPDATES_ACTIVATIONS" />)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.NeuralNetwork">
      <summary>
            This class serves as the base template class for a 3-layer neural network (e.g., <see cref="T:Clarion.Framework.BPNetwork" />, <see cref="T:Clarion.Framework.SimplifiedQBPNetwork" />, <see cref="T:Clarion.Framework.QBPNetwork" />, etc.) 
            in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.NeuralNetwork.#ctor(Clarion.Framework.Templates.NeuralNetwork.NeuralNetworkParameters,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for a 3-layer neural network
            </summary>
      <param name="pars">The parameters class containing the local parameters for the neural network</param>
      <param name="elChecker">(optional) Used for specifying a user-defined method for checking the eligibility of a neural network</param>
    </member>
    <member name="M:Clarion.Framework.Templates.NeuralNetwork.Commit">
      <summary>
            Commits the neural network
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.NeuralNetwork.ComputeHiddenActivation">
      <summary>
            Calculates the hidden activation
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.NeuralNetwork.ComputeOutputActivation">
      <summary>
            Calculates the output activation
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>NeuralNetwork</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.Hidden">
      <summary>
            Gets the activations for the hidden layer
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.HiddenCount">
      <summary>
            Used to specify the number of nodes for the hidden layer
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.HiddenThresholds">
      <summary>
            Gets the thresholds for the hidden layer
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.HiddenToOutputWeights">
      <summary>
            Gets the hidden to output layer weight matrix
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.InputToHiddenWeights">
      <summary>
            Gets the input to hidden layer weight matrix
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.OutputThresholds">
      <summary>
            Gets the thresholds for the output layer
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.Parameters">
      <summary>
            Gets the local parameters for this neural network
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.NeuralNetwork.PropagateActivation">
      <summary>
            Calculates the output activations based on the current input
            </summary>
      <exception cref="T:System.InvalidOperationException">If the neural network has not been committed before this method is called</exception>
    </member>
    <member name="T:Clarion.Framework.Templates.NeuralNetwork.NeuralNetworkParameters">
      <summary>
            This is the base parameters class for neural network classes that derive from <see cref="T:Clarion.Framework.Templates.NeuralNetwork" /></summary>
    </member>
    <member name="M:Clarion.Framework.Templates.NeuralNetwork.NeuralNetworkParameters.#ctor(Clarion.Framework.Templates.NeuralNetwork.NeuralNetworkParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.NeuralNetwork" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.NeuralNetwork.NeuralNetworkParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.NeuralNetwork" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.NeuralNetworkParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.NeuralNetworkParameters.INITIAL_THRESHOLDS_LOWER_BOUND">
      <summary>
            The low bound for the initial threshold
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.NeuralNetworkParameters.INITIAL_THRESHOLDS_UPPER_BOUND">
      <summary>
            The upper bound for the initial threshold
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.NeuralNetworkParameters.INITIAL_WEIGHTS_LOWER_BOUND">
      <summary>
            The low bound for the initial dWeights
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.NeuralNetwork.NeuralNetworkParameters.INITIAL_WEIGHTS_UPPER_BOUND">
      <summary>
            The upper bound for the initial dWeights
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.NewExternalActionChosenEventArgs"></member>
    <member name="P:Clarion.Framework.Templates.NewExternalActionChosenEventArgs.ActionPerformedAt"></member>
    <member name="P:Clarion.Framework.Templates.NewExternalActionChosenEventArgs.ChosenAction"></member>
    <member name="P:Clarion.Framework.Templates.NewExternalActionChosenEventArgs.FinalActionActivations"></member>
    <member name="P:Clarion.Framework.Templates.NewExternalActionChosenEventArgs.RelatedSI"></member>
    <member name="P:Clarion.Framework.Templates.NewExternalActionChosenEventArgs.RelatedSITimeStamp"></member>
    <member name="P:Clarion.Framework.Templates.NewExternalActionChosenEventArgs.ResponseTime"></member>
    <member name="T:Clarion.Framework.Templates.PositiveMatchDeterminer">
      <summary>
            Determines whether to increment the positive match statistics based on the information specified
            </summary>
      <param name="feedback">The feedback that was received by the <see cref="T:Clarion.Framework.Templates.ITracksMatchStatistics" /> target</param>
      <param name="increment">The amount that the positive match statistic is to be increment. Note that this parameter can be (optionally) set by the 
            positive match determiner, and the <see cref="T:Clarion.Framework.Templates.ITracksMatchStatistics" /> target will increment the appropriate match statistic based on the value returned</param>
      <param name="threshold">(optional) The threshold that is to be considered when trying to determine if the positive match statistic should be incremented</param>
      <param name="target">(optional) The target that made the request to determine whether the positive match statistic should be incremented</param>
      <returns>
        <c>True</c> if the positive match statistic should be incremented, or <c>false</c> if the negative match statistic should be incremented</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs"></member>
    <member name="M:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.#ctor(Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.TimingSpecificationTuple[])">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.Specifications"></member>
    <member name="T:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.TimingSpecificationTuple"></member>
    <member name="M:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.TimingSpecificationTuple.Equals(System.Object)"></member>
    <member name="P:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.TimingSpecificationTuple.EventType"></member>
    <member name="M:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.TimingSpecificationTuple.GetHashCode"></member>
    <member name="P:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.TimingSpecificationTuple.IsContinuous"></member>
    <member name="P:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.TimingSpecificationTuple.IsRegistered"></member>
    <member name="P:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.TimingSpecificationTuple.Timing"></member>
    <member name="P:Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs.TimingSpecificationTuple.WaitAtStart"></member>
    <member name="T:Clarion.Framework.Templates.PublisherAvailableEventArgs"></member>
    <member name="M:Clarion.Framework.Templates.PublisherAvailableEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Templates.PublisherAvailableEventArgs" /> class</summary>
    </member>
    <member name="T:Clarion.Framework.Templates.PublisherRemovedEventArgs"></member>
    <member name="M:Clarion.Framework.Templates.PublisherRemovedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Templates.PublisherRemovedEventArgs" /> class</summary>
    </member>
    <member name="T:Clarion.Framework.Templates.RefineableActionRule`1">
      <summary>
            This class serves as the base template class for all refineable action rules (e.g., <see cref="T:Clarion.Framework.RefineableActionRule" />, <see cref="T:Clarion.Framework.IRLRule" />) in
            the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableActionRule`1.#ctor(Clarion.Framework.Templates.RefineableActionRule{`0}.RefineableActionRuleParameters,Clarion.Framework.Core.ActionChunk,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.RuleGeneralizer{`0},Clarion.Framework.Templates.RuleSpecializer{`0},Clarion.Framework.Templates.DeletionChecker,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Templates.RefineableActionRule`1" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableActionRule`1.CheckDeletion(System.Int64)"></member>
    <member name="M:Clarion.Framework.Templates.RefineableActionRule`1.Generalize(Clarion.Framework.Core.Rule)">
      <summary>
            Generalizes this rule (if possible)
            </summary>
      <param name="matchAll">The match all rule related to this rule</param>
      <returns>This rule if it does not meet the criteria for generalization (or if the rule is not generalizable), 
            or a generalized rule if this rule meets the criteria for generalization</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>RefineableActionRule</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.HasVariations"></member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.MaxVariationMinusOne">
      <summary>
            Gets the rule variation (containing 1 less activated dimension-value pair) with the 
            maximum information gain compared to this rule.
            </summary>
      <returns>The rule variation with the maximum information gain</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.MaxVariationPlusOne">
      <summary>
            Gets the rule variation (containing 1 additional activated dimension-value pair) with the 
            maximum information gain compared to this rule.
            </summary>
      <returns>The rule variation with the maximum information gain</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.Parameters">
      <summary>
            Gets the local parameters for this refineable action rule
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableActionRule`1.Specialize(Clarion.Framework.Core.Rule)">
      <summary>
            Specializes this rule (if possible)
            </summary>
      <param name="matchAll">The match all rule related to this rule</param>
      <returns>Null if this rule cannot be specialized, this rule if it does not meet the criteria for 
            specialization, or a specialized rule if this rule meets the criteria for specialization</returns>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableActionRule`1.ToString">
      <summary>
            Returns a String that represents this refineable action rule.
            </summary>
      <returns>A String representation of this refineable action rule.</returns>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableActionRule`1.ToString(System.String)">
      <summary>
            Returns a String that represents this refineable action rule.
            </summary>
      <param name="indent">The indentation level to append to the string representation</param>
      <returns>A String representation of this refineable action rule.</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.Variations"></member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.VariationsLock"></member>
    <member name="T:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters">
      <summary>
            This is the parameters class the <see cref="T:Clarion.Framework.RefineableActionRule" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.#ctor(Clarion.Framework.Templates.RefineableActionRule{`0}.RefineableActionRuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.Templates.RefineableActionRule`1" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.Templates.RefineableActionRule`1" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.BENEFIT_CONSTANT">
      <summary>
            The constant to use for benefit when using the constant option for utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.C">
      <summary>
            Constant c (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.C7">
      <summary>
            Benefit equation constant C7
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.C8">
      <summary>
            Benefit equation constant C8
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.COST_CONSTANT">
      <summary>
            The constant to use for cost when using the constant option for utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.D">
      <summary>
            Constant d (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.DEFAULT_PARTIAL_MATCH_OFF_THRESHOLD">
      <summary>
            The threshold value when partial match is turned OFF
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.DEFAULT_PARTIAL_MATCH_ON_THRESHOLD">
      <summary>
            The threshold value when partial match is turned ON
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.DELETION_DENSITY">
      <summary>
            The density (the minimum frequency in which a rule must be eligible in order for it to be kept)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.GENERALIZATION_THRESHOLD_1">
      <summary>
            The threshold IG(C,All) must pass for a rule to be generalized
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.GENERALIZATION_THRESHOLD_2">
      <summary>
            The threshold IG(C',C) must pass for a rule to be generalized
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.INITIAL_BLA">
      <summary>
            The initial BLA
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.PARTIAL_MATCH_ON">
      <summary>
            Turns partial match on/off for calculating a rule's support
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.PARTIAL_MATCH_THRESHOLD">
      <summary>
            The threshold the support calculation must pass for the condition of a rule to be matched
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.SELECTION_TYPE">
      <summary>
            The selection type to use for the selection measure of the rule
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.SPECIALIZATION_THRESHOLD_1">
      <summary>
            The threshold IG(C,All) must be below for a rule to be specialized
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.SPECIALIZATION_THRESHOLD_2">
      <summary>
            The threshold IG(C',C) must be below for a rule to be specialized
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.UTILITY_OPTION">
      <summary>
            Specifies the method to use for calculating utility
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.V">
      <summary>
            The cost scaling factor (used to calculate utility)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableActionRule`1.RefineableActionRuleParameters.WEIGHT">
      <summary>
            The weight (for calculating support)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.RefineableAssociativeRule`1">
      <summary>
            This class serves as the base template class for all refineable associative rules (e.g., <see cref="T:Clarion.Framework.RefineableAssociativeRule" />) in
            the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableAssociativeRule`1.#ctor(Clarion.Framework.Templates.RefineableAssociativeRule{`0}.RefineableAssociativeRuleParameters,Clarion.Framework.Core.Chunk,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.RuleGeneralizer{`0},Clarion.Framework.Templates.RuleSpecializer{`0},Clarion.Framework.Templates.DeletionChecker,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Templates.RefineableAssociativeRule`1" /> class</summary>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableAssociativeRule`1.CheckDeletion(System.Int64)"></member>
    <member name="M:Clarion.Framework.Templates.RefineableAssociativeRule`1.Generalize(Clarion.Framework.Core.Rule)">
      <summary>
            Generalizes this rule (if possible)
            </summary>
      <param name="matchAll">The match all rule related to this rule</param>
      <returns>This rule if it does not meet the criteria for generalization (or if the rule is not generalizable), 
            or a generalized rule if this rule meets the criteria for generalization</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>RefineableAssociativeRule</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.HasVariations"></member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.MaxVariationMinusOne">
      <summary>
            Gets the rule variation (containing 1 less activated dimension-value pair) with the 
            maximum information gain compared to this rule.
            </summary>
      <returns>The rule variation with the maximum information gain</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.MaxVariationPlusOne">
      <summary>
            Gets the rule variation (containing 1 additional activated dimension-value pair) with the 
            maximum information gain compared to this rule.
            </summary>
      <returns>The rule variation with the maximum information gain</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.Parameters">
      <summary>
            Gets the local parameters for this refineable associative rule
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableAssociativeRule`1.Specialize(Clarion.Framework.Core.Rule)">
      <summary>
            Specializes this rule (if possible)
            </summary>
      <param name="matchAll">The match all rule related to this rule</param>
      <returns>Null if this rule cannot be specialized, this rule if it does not meet the criteria for 
            specialization, or a specialized rule if this rule meets the criteria for specialization</returns>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableAssociativeRule`1.ToString">
      <summary>
            Returns a String that represents this refineable associative rule.
            </summary>
      <returns>A String representation of this refineable associative rule.</returns>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableAssociativeRule`1.ToString(System.String)">
      <summary>
            Returns a String that represents this refineable associative rule.
            </summary>
      <param name="indent">The indentation level to append to the string representation</param>
      <returns>A String representation of this refineable associative rule.</returns>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.Variations"></member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.VariationsLock"></member>
    <member name="T:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters">
      <summary>
            This is the parameters class the <see cref="T:Clarion.Framework.RefineableAssociativeRule" /> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.#ctor(Clarion.Framework.Templates.RefineableAssociativeRule{`0}.RefineableAssociativeRuleParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.Templates.RefineableAssociativeRule`1" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for an <see cref="T:Clarion.Framework.Templates.RefineableAssociativeRule`1" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.C">
      <summary>
            Constant c (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.D">
      <summary>
            Constant d (for calculating BLA)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.DEFAULT_PARTIAL_MATCH_OFF_THRESHOLD">
      <summary>
            The threshold value when partial match is turned OFF
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.DEFAULT_PARTIAL_MATCH_ON_THRESHOLD">
      <summary>
            The threshold value when partial match is turned ON
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.DELETION_DENSITY">
      <summary>
            The density (the minimum frequency in which a rule must be eligible in order for it to be kept)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.GENERALIZATION_THRESHOLD_1">
      <summary>
            The threshold IG(C,All) must pass for a rule to be generalized
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.GENERALIZATION_THRESHOLD_2">
      <summary>
            The threshold IG(C',C) must pass for a rule to be generalized
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.INITIAL_BLA">
      <summary>
            The initial BLA
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.PARTIAL_MATCH_ON">
      <summary>
            Turns partial match on/off for calculating a rule's support
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.PARTIAL_MATCH_THRESHOLD">
      <summary>
            The threshold the support calculation must pass for the condition of a rule to be matched
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.SPECIALIZATION_THRESHOLD_1">
      <summary>
            The threshold IG(C,All) must be below for a rule to be specialized
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.SPECIALIZATION_THRESHOLD_2">
      <summary>
            The threshold IG(C',C) must be below for a rule to be specialized
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.RefineableAssociativeRule`1.RefineableAssociativeRuleParameters.WEIGHT">
      <summary>
            The weight (for calculating support)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork">
      <summary>
            This class serves as the base template class for a reinforcement-trainable backpropagation network (e.g., <see cref="T:Clarion.Framework.SimplifiedQBPNetwork" />, <see cref="T:Clarion.Framework.QBPNetwork" />) 
            in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.#ctor(Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters,Clarion.Framework.Templates.ExtractionChecker,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for a reinforcement-trainable backpropagation network
            </summary>
      <param name="pars">The parameters class containing the local parameters for the reinforcement-trainable backpropagation network</param>
      <param name="extractionMethod">(optional) Used for specifying a user-defined method for determining whether a rule should be extracted</param>
      <param name="matchMethod">(optional) User defined method for determining whether the chosen output was a positive match</param>
      <param name="elChecker">(optional) Used for specifying a user-defined method for checking the eligibility of a reinforcement-trainable backpropagation network</param>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.CheckExtraction">
      <summary>
            Indicates whether or not a rule should be extracted from the reinforcement-trainable backpropagation network
            </summary>
      <returns>
        <c>True</c> if a rule should be extracted, otherwise <c>False</c></returns>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ChosenOutput">
      <summary>
            Gets or sets the chosen output (to be used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ExtractionMethod">
      <summary>
            Gets the extraction checker delegate (if one was specified during initialization, otherwise this will return <c>null</c>)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.Feedback">
      <summary>
            Gets or sets the feedback relating to the chosen output (to be used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>ReinforcementTrainableBPNetwork</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.MatchMethod">
      <summary>
            Gets the positive match determiner delegate (if one was specified during initialization, otherwise this will return <c>null</c>)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.NegativeMatch">
      <summary>
            Gets or sets the positive match statistic
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.Parameters">
      <summary>
            Gets the local parameters for this reinforcement-trainable backpropagation network
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.PositiveMatch">
      <summary>
            Gets or sets the positive match statistic
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ResetStatistics">
      <summary>
            Resets the match statistics
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.UpdateMatchStatistics(System.Double,Clarion.Framework.SensoryInformation,System.Guid,System.Double)">
      <summary>
            Updates the match statistics for the reinforcement-trainable backpropagation network
            </summary>
      <param name="feedback">The feedback that was received given the current input and the chosen output chunk</param>
      <param name="currentInput">The current sensory input</param>
      <param name="chosenOutputChunkID">The world ID of the chosen output chunk</param>
      <param name="increment">(optional) The amount in which the match statistics are to be updated</param>
    </member>
    <member name="T:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters">
      <summary>
            This is the base parameters class for reinforcement-trainable backpropagation network classes that derive from <see cref="T:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork" /></summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.#ctor(Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.EXTRACTION_PROBABILITY">
      <summary>
            The extraction probability (i.e., the probability a rule will be extracted)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.INITIAL_THRESHOLDS_LOWER_BOUND">
      <summary>
            The low bound for the initial threshold
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.INITIAL_THRESHOLDS_UPPER_BOUND">
      <summary>
            The upper bound for the initial threshold
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.INITIAL_WEIGHTS_LOWER_BOUND">
      <summary>
            The low bound for the initial dWeights
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.INITIAL_WEIGHTS_UPPER_BOUND">
      <summary>
            The upper bound for the initial dWeights
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.LEARNING_RATE">
      <summary>
            The learning rate (used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.MOMENTUM">
      <summary>
            The momentum (used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableBPNetwork.ReinforcementTrainableBPNetworkParameters.R_ZERO">
      <summary>
            The error tolerance (used for learning)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent">
      <summary>
            This class serves as the base template class for all <see cref="T:Clarion.Framework.Templates.IReinforcementTrainable">reinforcement-trainable</see>implicit components in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.#ctor(Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ReinforcementTrainableImplicitComponentParameters,Clarion.Framework.Templates.ExtractionChecker,Clarion.Framework.Templates.PositiveMatchDeterminer,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for reinforcement-trainable implicit components
            </summary>
      <param name="pars">The parameters class containing the local parameters for the reinforcement trainable implicit component</param>
      <param name="extractionMethod">(optional) Used for specifying a user-defined method for determining whether a rule should be extracted</param>
      <param name="matchMethod">(optional) User defined method for determining whether the chosen output was a positive match</param>
      <param name="elChecker">(optional) Used for specifying a user-defined method for checking the eligibility of a reinforcement-trainable implicit component</param>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.CheckExtraction">
      <summary>
            Indicates whether or not a rule should be extracted from the reinforcement-trainable implicit component
            </summary>
      <returns>
        <c>True</c> if a rule should be extracted, otherwise <c>False</c></returns>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ChosenOutput">
      <summary>
            Gets or sets the chosen output (to be used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ExtractionMethod">
      <summary>
            Gets the extraction checker delegate (if one was specified during initialization, otherwise this will return <c>null</c>)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.Feedback">
      <summary>
            Gets or sets the feedback relating to the chosen output (to be used for learning)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>ReinforcementTrainableImplicitComponent</c> class
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.MatchMethod">
      <summary>
            Gets the positive match determiner delegate (if one was specified during initialization, otherwise this will return <c>null</c>)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.NegativeMatch">
      <summary>
            Gets or sets the positive match statistic
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.Parameters">
      <summary>
            Gets the local parameters for this reinforcement-trainable implicit component
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.PositiveMatch">
      <summary>
            Gets or sets the positive match statistic
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ResetStatistics">
      <summary>
            Resets the match statistics
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.UpdateMatchStatistics(System.Double,Clarion.Framework.SensoryInformation,System.Guid,System.Double)">
      <summary>
            Updates the match statistics for the reinforcement-trainable implicit component
            </summary>
      <param name="feedback">The feedback that was received given the current input and the chosen output chunk</param>
      <param name="currentInput">The current sensory input</param>
      <param name="chosenOutputChunkID">The world ID of the chosen output chunk</param>
      <param name="increment">(optional) The amount in which the match statistics are to be updated</param>
    </member>
    <member name="T:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ReinforcementTrainableImplicitComponentParameters">
      <summary>
            This is the base parameters class for reinforcement-trainable implicit component classes that derive from <see cref="T:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent" /></summary>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ReinforcementTrainableImplicitComponentParameters.#ctor(Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ReinforcementTrainableImplicitComponentParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ReinforcementTrainableImplicitComponentParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ReinforcementTrainableImplicitComponentParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ReinforcementTrainableImplicitComponentParameters.EXTRACTION_PROBABILITY">
      <summary>
            The extraction probability (i.e., the probability a rule will be extracted)
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.ReinforcementTrainableImplicitComponent.ReinforcementTrainableImplicitComponentParameters.POSITIVE_MATCH_THRESHOLD">
      <summary>
            The threshold for the positive match criterion
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.ResponseTimeVariabilityCalculator">
      <summary>
            Calculates (and applies) the variability for either the perception time or actuation time
            </summary>
      <param name="defaultTime">The default perception or actuation time</param>
      <param name="threshold">The threshold from which perception or actuation time can vary</param>
      <param name="isPerceptionTime">Specifies whether the time being calculated is for perception (<c>True</c>) or actuation (<c>False</c>)</param>
      <returns>The perception or actuation time with the variability applied</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.RuleExtractor`1">
      <summary>
            Performs rule extraction given the specified information
            </summary>
      <param name="compInput">The input layer of the component from which a rule is to be extracted</param>
      <param name="chosenOutput">The output that is to be used on the "right-hand" side of the rule</param>
      <param name="factory">The factory should be used to generate the rule</param>
      <param name="p">Any parameters that may be needed by the factory in order for it generate the rule</param>
      <typeparam name="T">Specifies the type of rule being extracted</typeparam>
      <returns>The rule that was generated by the rule extractor</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.RuleGeneralizer`1">
      <summary>
            Performs rule generalization given the specified information
            </summary>
      <param name="target">The target rule being considered for generalization</param>
      <param name="matchAll">The match-all rule to compare to the target</param>
      <param name="maxVariation">The maximally positive, "more general" rule variation (to be compared to the target)</param>
      <param name="threshold1">The generalization threshold 1</param>
      <param name="threshold2">The generalization threshold 2</param>
      <typeparam name="T">Specifies the type of rule being generalized</typeparam>
      <returns>The target if the rule should not be generalized, or the max variation if it should</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.RuleSpecializer`1">
      <summary>
            Performs rule specialization given the specified information
            </summary>
      <param name="target">The target rule being considered for specialization</param>
      <param name="matchAll">The match-all rule to compare to the target</param>
      <param name="maxVariation">The maximally positive, "more specialized" rule variation (to be compared to the target)</param>
      <param name="threshold1">The specialization threshold 1</param>
      <param name="threshold2">The specialization threshold 2</param>
      <typeparam name="T">Specifies the type of rule being specialized</typeparam>
      <returns>The target if the rule should not be specialized, or the max variation if it should</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.SubscribeRequestedEventArgs"></member>
    <member name="M:Clarion.Framework.Templates.SubscribeRequestedEventArgs.#ctor(System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Templates.SubscribeRequestedEventArgs" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Templates.SubscribeRequestedEventArgs.SubscribeRequests"></member>
    <member name="T:Clarion.Framework.Templates.SupportCalculator">
      <summary>
            Calculates the support for a rule given the current input
            </summary>
      <param name="currentInput">The current input</param>
      <param name="target">(optional) The rule whose support is to be calculated</param>
      <returns>The support for the rule</returns>
    </member>
    <member name="T:Clarion.Framework.Templates.TrainableImplicitComponent">
      <summary>
            This class serves as the base template class for all <see cref="T:Clarion.Framework.Templates.ITrainable">trainable</see>implicit components 
            (e.g., <see cref="T:Clarion.Framework.BPNetwork" />, <see cref="T:Clarion.Framework.SimplifiedQBPNetwork" />, <see cref="T:Clarion.Framework.QBPNetwork" />, etc.) in the Clarion Library
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.TrainableImplicitComponent.#ctor(Clarion.Framework.Templates.TrainableImplicitComponent.TrainableImplicitComponentParameters,Clarion.Framework.Templates.EligibilityChecker)">
      <summary>
            The base constructor for trainable implicit components
            </summary>
      <param name="pars">The parameters class containing the local parameters for the trainable implicit component</param>
      <param name="elChecker">(optional) Used for specifying a user-defined method for checking the eligibility of a trainable implicit component</param>
    </member>
    <member name="M:Clarion.Framework.Templates.TrainableImplicitComponent.Commit">
      <summary>
            Commits the trainable implicit component
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.TrainableImplicitComponent.DesiredOutput">
      <summary>
            Gets or sets the desired output for the trainable implicit component
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.TrainableImplicitComponent.GlobalParameters">
      <summary>
            Gets the global parameters for the <c>TrainableImplicitComponent</c> class
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.TrainableImplicitComponent.Learn">
      <summary>
            Initiates a round of learning based on the desired output
            </summary>
    </member>
    <member name="P:Clarion.Framework.Templates.TrainableImplicitComponent.Parameters">
      <summary>
            Gets the local parameters for this trainable implicit component
            </summary>
    </member>
    <member name="M:Clarion.Framework.Templates.TrainableImplicitComponent.Retract">
      <summary>
            Retracts the trainable implicit component
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.TrainableImplicitComponent.TrainableImplicitComponentParameters">
      <summary>
            This is the base parameters class for trainable implicit component classes that derive from <see cref="T:Clarion.Framework.Templates.TrainableImplicitComponent" /></summary>
    </member>
    <member name="M:Clarion.Framework.Templates.TrainableImplicitComponent.TrainableImplicitComponentParameters.#ctor(Clarion.Framework.Templates.TrainableImplicitComponent.TrainableImplicitComponentParameters,System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.TrainableImplicitComponent" /> and sets the values of the parameters to the values specified
            </summary>
      <param name="p">Indicates the parameter values to be set for the parameters class being initialized</param>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="M:Clarion.Framework.Templates.TrainableImplicitComponent.TrainableImplicitComponentParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a parameters class for a <see cref="T:Clarion.Framework.Templates.TrainableImplicitComponent" /></summary>
      <param name="isGlobal">(optional) Specifies whether the instance of the parameters class being initialized is to be used for
            global or local parameters</param>
    </member>
    <member name="P:Clarion.Framework.Templates.TrainableImplicitComponent.TrainableImplicitComponentParameters.ELIGIBILITY">
      <summary>
            A switch that can be used to specify eligibility (in the absence of a more sophisticated eligibility method)
            </summary>
    </member>
    <member name="T:Clarion.Framework.Templates.UnsubscribeRequestedEventArgs"></member>
    <member name="M:Clarion.Framework.Templates.UnsubscribeRequestedEventArgs.#ctor(System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Framework.Templates.UnsubscribeRequestedEventArgs" /> class</summary>
    </member>
    <member name="P:Clarion.Framework.Templates.UnsubscribeRequestedEventArgs.UnsubscribeRequests"></member>
    <member name="T:Clarion.Framework.Templates.UtilityCalculator">
      <summary>
            Calculates the utility for a rule
            </summary>
      <param name="rt">The response time for the rule (can be used to calculate the cost)</param>
      <param name="averageRT">The average response time for the rule (can be used to calculate the cost)</param>
      <param name="target">(optional) The rule whose utility is to be calculated</param>
      <returns>The utility of the rule</returns>
    </member>
    <member name="T:Clarion.Plugins.AsynchronousSimulatingEnvironment"></member>
    <member name="M:Clarion.Plugins.AsynchronousSimulatingEnvironment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Plugins.AsynchronousSimulatingEnvironment" /> class</summary>
    </member>
    <member name="P:Clarion.Plugins.AsynchronousSimulatingEnvironment.Clarion#Framework#Templates#ISubscribes#PublicationTimingsSpecifiedEventHandler"></member>
    <member name="P:Clarion.Plugins.AsynchronousSimulatingEnvironment.Clarion#Framework#Templates#ISubscribes#PublisherAvailableEventHandler"></member>
    <member name="P:Clarion.Plugins.AsynchronousSimulatingEnvironment.Clarion#Framework#Templates#ISubscribes#PublisherRemovedEventHandler"></member>
    <member name="P:Clarion.Plugins.AsynchronousSimulatingEnvironment.OnEventHandler">
      <summary>
            Required property for the <see cref="T:Clarion.Framework.Templates.ISubscribes`1" /> interface
            </summary>
    </member>
    <member name="M:Clarion.Plugins.AsynchronousSimulatingEnvironment.OnPublicationTimingSpecified(System.Object,Clarion.Framework.Templates.PublicationTimingsSpecifiedEventArgs)">
      <summary>
            Required method for the <see cref="T:Clarion.Framework.Templates.ISubscribes" /> interface
            </summary>
      <param name="sender">The internal mechanism that initiated the event</param>
      <param name="e">The event args for the event</param>
    </member>
    <member name="M:Clarion.Plugins.AsynchronousSimulatingEnvironment.OnPublisherAvailable(System.Object,Clarion.Framework.Templates.PublisherAvailableEventArgs)">
      <summary>
            Required method for the <see cref="T:Clarion.Framework.Templates.ISubscribes" /> interface
            </summary>
      <param name="sender">The internal mechanism that initiated the event</param>
      <param name="e">The event args for the event</param>
    </member>
    <member name="M:Clarion.Plugins.AsynchronousSimulatingEnvironment.OnPublisherRemoved(System.Object,Clarion.Framework.Templates.PublisherRemovedEventArgs)">
      <summary>
            Required method for the <see cref="T:Clarion.Framework.Templates.ISubscribes" /> interface
            </summary>
      <param name="sender">The internal mechanism that initiated the event</param>
      <param name="e">The event args for the event</param>
    </member>
    <member name="M:Clarion.Plugins.AsynchronousSimulatingEnvironment.ProcessChosenExternalAction(Clarion.Framework.Agent,Clarion.Framework.ExternalActionChunk,Clarion.Framework.SensoryInformation,System.Collections.Generic.Dictionary{Clarion.Framework.Core.ActionChunk,System.Double},System.Int64,System.Int64)">
      <summary>
            Required method for handling the specified external action that was chosen by the specified agent
            </summary>
      <param name="actor">The agent who chose the specified external action</param>
      <param name="chosenAction">The action that was chosen by the specified agent</param>
      <param name="relatedSI">The sensory information (perceived by the specified agent) that led to the specified action</param>
      <param name="finalActionActivations">The final selection activations for all of the actions that were considered during the given time stamp</param>
      <param name="performedAt">The time stamp at which the specified agent is performing the specified action</param>
      <param name="responseTime">The specified agent's response time for the specified action (i.e., how long it took the agent to perceive, decide, and act)</param>
    </member>
    <member name="T:Clarion.Plugins.IParsesRemoteCommunication"></member>
    <member name="M:Clarion.Plugins.IParsesRemoteCommunication.HasFeedback(System.Byte[])"></member>
    <member name="M:Clarion.Plugins.IParsesRemoteCommunication.HasParameterChanges(System.Byte[])"></member>
    <member name="M:Clarion.Plugins.IParsesRemoteCommunication.HasSensoryInformation(System.Byte[])"></member>
    <member name="P:Clarion.Plugins.IParsesRemoteCommunication.MessageTerminator"></member>
    <member name="M:Clarion.Plugins.IParsesRemoteCommunication.ParseAction(Clarion.Framework.Agent,Clarion.Framework.ExternalActionChunk,Clarion.Framework.SensoryInformation,System.Int64,System.Int64)"></member>
    <member name="M:Clarion.Plugins.IParsesRemoteCommunication.ParseFeedback(System.Byte[],System.Int32)"></member>
    <member name="M:Clarion.Plugins.IParsesRemoteCommunication.ParseParameterChange(System.Byte[],System.Int32)"></member>
    <member name="M:Clarion.Plugins.IParsesRemoteCommunication.ParseSensoryInformation(System.Byte[],System.Int32)"></member>
    <member name="T:Clarion.Plugins.ITransmitsRemoteCommunication"></member>
    <member name="M:Clarion.Plugins.ITransmitsRemoteCommunication.Close"></member>
    <member name="M:Clarion.Plugins.ITransmitsRemoteCommunication.ReceiveRemoteData"></member>
    <member name="M:Clarion.Plugins.ITransmitsRemoteCommunication.SendAction(System.Byte[])"></member>
    <member name="T:Clarion.Plugins.RemoteCommunicationParserJSON"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserJSON.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Plugins.RemoteCommunicationParserJSON" /> class</summary>
    </member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserJSON.HasFeedback(System.Byte[])"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserJSON.HasParameterChanges(System.Byte[])"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserJSON.HasSensoryInformation(System.Byte[])"></member>
    <member name="P:Clarion.Plugins.RemoteCommunicationParserJSON.MessageTerminator"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserJSON.ParseAction(Clarion.Framework.Agent,Clarion.Framework.ExternalActionChunk,Clarion.Framework.SensoryInformation,System.Int64,System.Int64)"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserJSON.ParseFeedback(System.Byte[],System.Int32)"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserJSON.ParseParameterChange(System.Byte[],System.Int32)"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserJSON.ParseSensoryInformation(System.Byte[],System.Int32)"></member>
    <member name="T:Clarion.Plugins.RemoteCommunicationParserXML"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserXML.#ctor(Clarion.Plugins.RemoteCommunicationParserXML.SchemaOptions)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Plugins.RemoteCommunicationParserXML" /> class</summary>
    </member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserXML.HasFeedback(System.Byte[])"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserXML.HasParameterChanges(System.Byte[])"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserXML.HasSensoryInformation(System.Byte[])"></member>
    <member name="P:Clarion.Plugins.RemoteCommunicationParserXML.MessageTerminator"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserXML.ParseAction(Clarion.Framework.Agent,Clarion.Framework.ExternalActionChunk,Clarion.Framework.SensoryInformation,System.Int64,System.Int64)"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserXML.ParseFeedback(System.Byte[],System.Int32)"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserXML.ParseParameterChange(System.Byte[],System.Int32)"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationParserXML.ParseSensoryInformation(System.Byte[],System.Int32)"></member>
    <member name="P:Clarion.Plugins.RemoteCommunicationParserXML.UseWorldIDs"></member>
    <member name="T:Clarion.Plugins.RemoteCommunicationParserXML.SchemaOptions"></member>
    <member name="F:Clarion.Plugins.RemoteCommunicationParserXML.SchemaOptions.SHORT"></member>
    <member name="F:Clarion.Plugins.RemoteCommunicationParserXML.SchemaOptions.FULL"></member>
    <member name="T:Clarion.Plugins.RemoteCommunicationTransmitterTCP"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationTransmitterTCP.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Plugins.RemoteCommunicationTransmitterTCP" /> class</summary>
    </member>
    <member name="M:Clarion.Plugins.RemoteCommunicationTransmitterTCP.Close"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationTransmitterTCP.ReceiveRemoteData"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationTransmitterTCP.SendAction(System.Byte[])"></member>
    <member name="T:Clarion.Plugins.RemoteCommunicationTransmitterUDP"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationTransmitterUDP.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Plugins.RemoteCommunicationTransmitterUDP" /> class</summary>
    </member>
    <member name="M:Clarion.Plugins.RemoteCommunicationTransmitterUDP.Close"></member>
    <member name="P:Clarion.Plugins.RemoteCommunicationTransmitterUDP.LocalEndPoint"></member>
    <member name="P:Clarion.Plugins.RemoteCommunicationTransmitterUDP.Port"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationTransmitterUDP.ReceiveRemoteData"></member>
    <member name="M:Clarion.Plugins.RemoteCommunicationTransmitterUDP.SendAction(System.Byte[])"></member>
    <member name="T:Clarion.Plugins.RemoteSimulatingEnvironment`2"></member>
    <member name="M:Clarion.Plugins.RemoteSimulatingEnvironment`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Clarion.Plugins.RemoteSimulatingEnvironment`2" /> class</summary>
    </member>
    <member name="M:Clarion.Plugins.RemoteSimulatingEnvironment`2.Die"></member>
    <member name="M:Clarion.Plugins.RemoteSimulatingEnvironment`2.Initialize"></member>
    <member name="M:Clarion.Plugins.RemoteSimulatingEnvironment`2.InitializeParser"></member>
    <member name="M:Clarion.Plugins.RemoteSimulatingEnvironment`2.InitializeTransmitter"></member>
    <member name="P:Clarion.Plugins.RemoteSimulatingEnvironment`2.IsTest"></member>
    <member name="P:Clarion.Plugins.RemoteSimulatingEnvironment`2.Parser"></member>
    <member name="M:Clarion.Plugins.RemoteSimulatingEnvironment`2.ProcessChosenExternalAction(Clarion.Framework.Agent,Clarion.Framework.ExternalActionChunk,Clarion.Framework.SensoryInformation,System.Collections.Generic.Dictionary{Clarion.Framework.Core.ActionChunk,System.Double},System.Int64,System.Int64)"></member>
    <member name="P:Clarion.Plugins.RemoteSimulatingEnvironment`2.Transmittor"></member>
    <member name="T:Clarion.Plugins.SerializationPlugin"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.CompleteAgentDeserialization(Clarion.Framework.Agent)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.Deserialize``1(System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeActionRule``1(Clarion.Framework.Agent,System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeAssociativeEpisodicMemoryNetwork``1(Clarion.Framework.Agent,System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeAssociativeMemoryNetwork``1(Clarion.Framework.Agent,System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeAssociativeRule``1(Clarion.Framework.Agent,System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeDrive``1(Clarion.Framework.Agent,System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeDriveComponent``1(Clarion.Framework.Templates.Drive,System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeImplicitDecisionNetwork``1(Clarion.Framework.Agent,System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeMetaCognitiveActionRule``1(Clarion.Framework.Templates.MetaCognitiveModule,System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeMetaCognitiveDecisionNetwork``1(Clarion.Framework.Templates.MetaCognitiveModule,System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeMetaCognitiveModule``1(Clarion.Framework.Agent,System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeWorld(System.String)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.DeserializeWorldObject``1(System.String,``0@)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.Serialize(Clarion.Framework.Core.ICommitable,System.String)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.Serialize(Clarion.Framework.Core.IWorldObject,System.String)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.Serialize(System.Object,System.String)"></member>
    <member name="M:Clarion.Plugins.SerializationPlugin.SerializeWorld(System.String)"></member>
  </members>
</doc>